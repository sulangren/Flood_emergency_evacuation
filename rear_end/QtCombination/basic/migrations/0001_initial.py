# Generated by Django 5.1.4 on 2025-06-22 08:26

import django.contrib.gis.db.models.fields
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="staffUser",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("staff_username", models.CharField(max_length=15, unique=True)),
                ("staff_password", models.CharField(max_length=15)),
                (
                    "staff_telephone",
                    models.CharField(max_length=12, null=True, unique=True),
                ),
            ],
            options={
                "db_table": "db_staff_user",
            },
        ),
        migrations.CreateModel(
            name="City",
            fields=[
                (
                    "city_id",
                    models.AutoField(
                        primary_key=True, serialize=False, verbose_name="城市ID"
                    ),
                ),
                ("name", models.CharField(max_length=100, verbose_name="城市名")),
                (
                    "area",
                    models.FloatField(blank=True, null=True, verbose_name="城市面积"),
                ),
                (
                    "boundary",
                    django.contrib.gis.db.models.fields.PolygonField(
                        srid=4326, verbose_name="城市范围"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "城市",
                "verbose_name_plural": "城市",
                "indexes": [
                    models.Index(fields=["name"], name="basic_city_name_dd6e18_idx")
                ],
            },
        ),
        migrations.CreateModel(
            name="PointFeature",
            fields=[
                (
                    "pid",
                    models.AutoField(
                        primary_key=True, serialize=False, verbose_name="编号"
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        blank=True, max_length=100, null=True, verbose_name="场所名"
                    ),
                ),
                (
                    "elevation",
                    models.FloatField(blank=True, null=True, verbose_name="高程"),
                ),
                (
                    "coordinates",
                    django.contrib.gis.db.models.fields.PointField(
                        srid=4326, verbose_name="坐标"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "city",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="points",
                        to="basic.city",
                        verbose_name="所属城市",
                    ),
                ),
            ],
            options={
                "verbose_name": "点要素",
                "verbose_name_plural": "点要素",
            },
        ),
        migrations.CreateModel(
            name="Pipeline",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("pipeline_id", models.IntegerField(verbose_name="管线编号")),
                ("sub_id", models.IntegerField(default=0, verbose_name="所属子编号")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "end_point",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="pipeline_ends",
                        to="basic.pointfeature",
                        verbose_name="终点",
                    ),
                ),
                (
                    "start_point",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="pipeline_starts",
                        to="basic.pointfeature",
                        verbose_name="起始点",
                    ),
                ),
            ],
            options={
                "verbose_name": "管线数据",
                "verbose_name_plural": "管线数据",
            },
        ),
        migrations.CreateModel(
            name="FloodProneArea",
            fields=[
                (
                    "flood_id",
                    models.AutoField(
                        primary_key=True, serialize=False, verbose_name="容易积水处ID"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "point",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="flood_prone_area",
                        to="basic.pointfeature",
                        verbose_name="积水处中心点",
                    ),
                ),
            ],
            options={
                "verbose_name": "容易积水处",
                "verbose_name_plural": "容易积水处",
            },
        ),
        migrations.CreateModel(
            name="Shelter",
            fields=[
                (
                    "shelter_id",
                    models.AutoField(
                        primary_key=True, serialize=False, verbose_name="避难场所ID"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "point",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="shelter",
                        to="basic.pointfeature",
                        verbose_name="避难场所点",
                    ),
                ),
            ],
            options={
                "verbose_name": "避难场所",
                "verbose_name_plural": "避难场所",
            },
        ),
        migrations.CreateModel(
            name="WeatherData",
            fields=[
                (
                    "weather_id",
                    models.AutoField(
                        primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "precipitation",
                    models.FloatField(blank=True, null=True, verbose_name="降水量"),
                ),
                (
                    "wind_speed",
                    models.FloatField(blank=True, null=True, verbose_name="风速"),
                ),
                (
                    "temperature",
                    models.FloatField(blank=True, null=True, verbose_name="温度"),
                ),
                (
                    "weather_condition",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("sunny", "晴"),
                            ("cloudy", "多云"),
                            ("rainy", "雨"),
                            ("snowy", "雪"),
                            ("foggy", "雾"),
                            ("stormy", "暴风雨"),
                            ("unknown", "未知"),
                        ],
                        default="unknown",
                        max_length=20,
                        null=True,
                        verbose_name="天气",
                    ),
                ),
                (
                    "datetime",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="日期时间"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "city",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="weather_data",
                        to="basic.city",
                        verbose_name="城市",
                    ),
                ),
            ],
            options={
                "verbose_name": "气象数据",
                "verbose_name_plural": "气象数据",
            },
        ),
        migrations.AddIndex(
            model_name="pointfeature",
            index=models.Index(fields=["city"], name="basic_point_city_id_974ae3_idx"),
        ),
        migrations.AddIndex(
            model_name="pointfeature",
            index=models.Index(
                fields=["coordinates"], name="basic_point_coordin_7524f0_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="pipeline",
            index=models.Index(
                fields=["pipeline_id", "sub_id"], name="basic_pipel_pipelin_e9534e_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="pipeline",
            unique_together={("pipeline_id", "sub_id")},
        ),
        migrations.AddIndex(
            model_name="weatherdata",
            index=models.Index(
                fields=["datetime"], name="basic_weath_datetim_a7ac7b_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="weatherdata",
            index=models.Index(fields=["city"], name="basic_weath_city_id_a61853_idx"),
        ),
        migrations.AlterUniqueTogether(
            name="weatherdata",
            unique_together={("city", "datetime")},
        ),
    ]

{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, normalizeClass as _normalizeClass, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  id: \"container\",\n  style: {\n    \"width\": \"100%\",\n    \"height\": \"100%\"\n  }\n};\nconst _hoisted_2 = {\n  class: \"map-control\"\n};\nconst _hoisted_3 = {\n  class: \"map-functions\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_a_button = _resolveComponent(\"a-button\");\n  const _component_a_menu_item = _resolveComponent(\"a-menu-item\");\n  const _component_a_menu = _resolveComponent(\"a-menu\");\n  const _component_a_dropdown = _resolveComponent(\"a-dropdown\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\" 地图容器 \"), _cache[3] || (_cache[3] = _createElementVNode(\"div\", {\n    id: \"map-container\"\n  }, null, -1 /* HOISTED */)), _createCommentVNode(\" 左上角的图层切换按钮 \"), _createElementVNode(\"div\", _hoisted_2, [_createVNode(_component_a_dropdown, {\n    visible: $setup.isDropdownVisible,\n    onVisibleChange: $setup.toggleDropdown,\n    trigger: \"click\"\n  }, {\n    overlay: _withCtx(() => [_createVNode(_component_a_menu, null, {\n      default: _withCtx(() => [_createVNode(_component_a_menu_item, {\n        key: \"vector\",\n        onClick: $setup.switchToVector\n      }, {\n        default: _withCtx(() => [_createElementVNode(\"span\", {\n          class: _normalizeClass({\n            active: $setup.currentLayer === 'vector'\n          })\n        }, \"矢量地图\", 2 /* CLASS */)]),\n        _: 1 /* STABLE */\n      }, 8 /* PROPS */, [\"onClick\"]), _createVNode(_component_a_menu_item, {\n        key: \"satellite\",\n        onClick: $setup.switchToSatellite\n      }, {\n        default: _withCtx(() => [_createElementVNode(\"span\", {\n          class: _normalizeClass({\n            active: $setup.currentLayer === 'satellite'\n          })\n        }, \"卫星地图\", 2 /* CLASS */)]),\n        _: 1 /* STABLE */\n      }, 8 /* PROPS */, [\"onClick\"])]),\n      _: 1 /* STABLE */\n    })]),\n    default: _withCtx(() => [_createVNode(_component_a_button, {\n      type: \"primary\",\n      shape: \"round\",\n      onClick: $setup.toggleDropdown\n    }, {\n      default: _withCtx(() => _cache[0] || (_cache[0] = [_createTextVNode(\" 图层切换 \")])),\n      _: 1 /* STABLE */\n    }, 8 /* PROPS */, [\"onClick\"])]),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"visible\", \"onVisibleChange\"])]), _createCommentVNode(\" 距离测量按钮和清空按钮 \"), _createElementVNode(\"div\", _hoisted_3, [_createVNode(_component_a_button, {\n    onClick: $setup.startMeasurement,\n    type: \"primary\"\n  }, {\n    default: _withCtx(() => _cache[1] || (_cache[1] = [_createTextVNode(\"开始量测\")])),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"onClick\"]), _createVNode(_component_a_button, {\n    onClick: $setup.clearAll,\n    type: \"danger\"\n  }, {\n    default: _withCtx(() => _cache[2] || (_cache[2] = [_createTextVNode(\"清空\")])),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"onClick\"])]), _createCommentVNode(\" 小地图容器 \"), _cache[4] || (_cache[4] = _createElementVNode(\"div\", {\n    id: \"overview-map\",\n    style: {\n      \"position\": \"absolute\",\n      \"bottom\": \"10px\",\n      \"right\": \"10px\",\n      \"width\": \"200px\",\n      \"height\": \"150px\",\n      \"border\": \"1px solid #000\",\n      \"z-index\": \"100\"\n    }\n  }, null, -1 /* HOISTED */))]);\n}","map":{"version":3,"names":["id","style","class","_createElementBlock","_hoisted_1","_createCommentVNode","_createElementVNode","_hoisted_2","_createVNode","_component_a_dropdown","visible","$setup","isDropdownVisible","onVisibleChange","toggleDropdown","trigger","overlay","_withCtx","_component_a_menu","default","_component_a_menu_item","key","onClick","switchToVector","_normalizeClass","active","currentLayer","_","switchToSatellite","_component_a_button","type","shape","_cache","_createTextVNode","_hoisted_3","startMeasurement","clearAll"],"sources":["E:\\code\\Django\\project\\front\\front\\src\\components\\NearbyTramsWindow.vue"],"sourcesContent":["<template>\r\n  <div id=\"container\" style=\"width: 100%; height: 100%\">\r\n    <!-- 地图容器 -->\r\n    <div id=\"map-container\"></div>\r\n\r\n    <!-- 左上角的图层切换按钮 -->\r\n    <div class=\"map-control\">\r\n      <a-dropdown\r\n        :visible=\"isDropdownVisible\"\r\n        @visibleChange=\"toggleDropdown\"\r\n        trigger=\"click\"\r\n      >\r\n        <!-- 触发按钮 -->\r\n        <a-button type=\"primary\" shape=\"round\" @click=\"toggleDropdown\">\r\n          图层切换\r\n        </a-button>\r\n\r\n        <!-- 下拉菜单 -->\r\n        <template #overlay>\r\n          <a-menu>\r\n            <a-menu-item key=\"vector\" @click=\"switchToVector\">\r\n              <span :class=\"{ active: currentLayer === 'vector' }\"\r\n                >矢量地图</span\r\n              >\r\n            </a-menu-item>\r\n            <a-menu-item key=\"satellite\" @click=\"switchToSatellite\">\r\n              <span :class=\"{ active: currentLayer === 'satellite' }\"\r\n                >卫星地图</span\r\n              >\r\n            </a-menu-item>\r\n          </a-menu>\r\n        </template>\r\n      </a-dropdown>\r\n    </div>\r\n\r\n    <!-- 距离测量按钮和清空按钮 -->\r\n    <div class=\"map-functions\">\r\n      <a-button @click=\"startMeasurement\" type=\"primary\">开始量测</a-button>\r\n      <a-button @click=\"clearAll\" type=\"danger\">清空</a-button>\r\n    </div>\r\n\r\n    <!-- 小地图容器 -->\r\n    <div\r\n      id=\"overview-map\"\r\n      style=\"\r\n        position: absolute;\r\n        bottom: 10px;\r\n        right: 10px;\r\n        width: 200px;\r\n        height: 150px;\r\n        border: 1px solid #000;\r\n        z-index: 100;\r\n      \"\r\n    ></div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, onMounted, nextTick } from \"vue\";\r\nimport { getRanderingSorted, getPointSorted } from \"@/api/rendering\";\r\n\r\nexport default {\r\n  name: \"MapWindow\",\r\n  setup() {\r\n    const map = ref(null);\r\n    const polygons = ref([]); // 存储多边形对象\r\n    const markers = ref([]); // 存储标记点对象\r\n    const currentLayer = ref(\"vector\"); // 当前图层（矢量或卫星）\r\n    const isDropdownVisible = ref(false); // 下拉菜单是否显示\r\n    let vectorLayer = null;\r\n    let satelliteLayer = null;\r\n    let overviewMap = null; // 小地图变量\r\n    let overviewRect = null; // 用于小地图中的框\r\n\r\n    // 距离测量相关\r\n    let measurementMode = false; // 是否处于测量模式\r\n    let points = []; // 存储点击的点\r\n    let lines = []; // 存储连线对象\r\n    let totalDistance = 0; // 总距离\r\n\r\n    // 加载并初始化地图\r\n    const loadAMapApi = () => {\r\n      const script = document.createElement(\"script\");\r\n      script.type = \"text/javascript\";\r\n      script.src =\r\n        \"https://webapi.amap.com/maps?v=2.0&key=a6042dfaa8137c1bd9f59034cd3021a3\";\r\n      document.head.appendChild(script);\r\n\r\n      script.onload = () => {\r\n        initMap();\r\n      };\r\n    };\r\n\r\n    const initMap = () => {\r\n      if (!AMap) {\r\n        console.error(\"AMap is not defined!\");\r\n        return;\r\n      }\r\n\r\n      // 初始化图层\r\n      vectorLayer = new AMap.createDefaultLayer({\r\n        zooms: [3, 20],\r\n        visible: true,\r\n        opacity: 1,\r\n        zIndex: 0,\r\n      }); // 矢量图层\r\n      satelliteLayer = new AMap.TileLayer.Satellite(); // 卫星图层\r\n\r\n      // 初始化地图\r\n      map.value = new AMap.Map(\"container\", {\r\n        viewMode: \"2D\",\r\n        zoom: 16.3,\r\n        center: [113.266949, 35.188365], // 地图中心\r\n        layers: [vectorLayer], // 默认加载矢量图层\r\n      });\r\n\r\n      // 加载工具条控件\r\n      AMap.plugin([\"AMap.ToolBar\"], () => {\r\n        const toolBarControl = new AMap.ToolBar();\r\n        map.value.addControl(toolBarControl);\r\n      });\r\n\r\n      // 获取并渲染多边形和标记点数据\r\n      fetchPolygons();\r\n      fetchBicyclePoints();\r\n\r\n      // 添加 Valid_area 范围的多边形\r\n      const Valid_area = [\r\n        [\r\n          [\r\n            [113.256395, 35.190641],\r\n            [113.257839, 35.183192],\r\n            [113.258212, 35.182905],\r\n            [113.258597, 35.18288],\r\n            [113.276622, 35.185157],\r\n            [113.274351, 35.196294],\r\n            [113.274176, 35.196435],\r\n            [113.273903, 35.196433],\r\n            [113.27348, 35.196239],\r\n            [113.271625, 35.194724],\r\n            [113.270753, 35.193288],\r\n            [113.267986, 35.192422],\r\n            [113.261557, 35.191206],\r\n            [113.256395, 35.190641],\r\n          ],\r\n        ],\r\n      ];\r\n\r\n      const polygon = new AMap.Polygon({\r\n        path: Valid_area, // 多边形路径\r\n        fillColor: \"#ccebc5\", // 多边形填充颜色\r\n        strokeOpacity: 1, // 线条透明度\r\n        fillOpacity: 0.5, // 填充透明度\r\n        strokeColor: \"#ff0000\", // 线条颜色\r\n        strokeWeight: 3, // 线条宽度\r\n        strokeStyle: \"dashed\", // 线样式\r\n        strokeDasharray: [5, 5], // 虚线样式\r\n      });\r\n\r\n      // 鼠标移入多边形时改变填充色和透明度\r\n      polygon.on(\"mouseover\", () => {\r\n        polygon.setOptions({\r\n          fillOpacity: 0.1, // 多边形填充透明度\r\n          fillColor: \"#7bccc4\",\r\n        });\r\n      });\r\n\r\n      // 将多边形添加到地图\r\n      map.value.add(polygon);\r\n\r\n      // 初始化鹰眼图\r\n      nextTick(() => {\r\n        initOverviewMap();\r\n      });\r\n    };\r\n\r\n    // 初始化小地图（鹰眼图）\r\n    const initOverviewMap = () => {\r\n      overviewMap = new AMap.Map(\"overview-map\", {\r\n        zoom: 13.5, // 设置鹰眼图缩放级别\r\n        center: map.value.getCenter(), // 设置小地图中心点为大地图中心\r\n        viewMode: \"2D\", // 小地图模式\r\n        zooms: [3, 15], // 小地图缩放级别\r\n      });\r\n\r\n      // 小地图上的框，用于显示大地图的显示区域\r\n      overviewRect = new AMap.Rectangle({\r\n        bounds: map.value.getBounds(),\r\n        strokeColor: \"#F00\",\r\n        strokeWeight: 2,\r\n        fillOpacity: 0.3,\r\n        fillColor: \"#FF0\",\r\n      });\r\n      overviewMap.add(overviewRect);\r\n\r\n      // 监听大地图的移动事件，更新小地图视图\r\n      map.value.on(\"move\", () => {\r\n        const center = map.value.getCenter();\r\n        overviewMap.setCenter(center); // 更新小地图中心\r\n        updateOverviewRect(); // 更新小地图的显示框\r\n      });\r\n\r\n      // 监听大地图的缩放事件，更新小地图的框\r\n      map.value.on(\"zoomend\", () => {\r\n        updateOverviewRect(); // 更新显示框\r\n      });\r\n\r\n      // 监听鼠标的移动事件\r\n      map.value.on(\"mousemove\", () => {\r\n        updateOverviewRect(); // 鼠标移动时，更新小地图框\r\n      });\r\n    };\r\n\r\n    // 更新小地图上的显示框\r\n    const updateOverviewRect = () => {\r\n      const bounds = map.value.getBounds();\r\n      overviewRect.setBounds(bounds); // 设置小地图上的框为大地图当前显示区域\r\n    };\r\n\r\n    const startMeasurement = () => {\r\n      measurementMode = !measurementMode;\r\n      if (measurementMode) {\r\n        points = []; // 清空已标记的点\r\n        lines = []; // 清空已绘制的线\r\n        totalDistance = 0; // 重置总距离\r\n      }\r\n    };\r\n\r\n    const addPoint = (e) => {\r\n      if (!measurementMode) return; // 不处于测量模式时不执行\r\n\r\n      const { lnglat } = e;\r\n      const marker = new AMap.Marker({\r\n        position: lnglat,\r\n        icon: new AMap.Icon({\r\n          size: new AMap.Size(30, 30),\r\n          image: \"https://webapi.amap.com/theme/v1.3/markers/n/mark_b.png\",\r\n        }),\r\n      });\r\n\r\n      // 记录第一个点为起点\r\n      if (points.length === 0) {\r\n        marker.setLabel({\r\n          content: \"起点\",\r\n        });\r\n      }\r\n\r\n      // 计算与上一个点的距离\r\n      if (points.length > 0) {\r\n        const lastLngLat = points[points.length - 1];\r\n        const distance = AMap.Util.distance(lastLngLat, lnglat);\r\n        totalDistance += distance;\r\n\r\n        const line = new AMap.Line({\r\n          path: [lastLngLat, lnglat],\r\n          strokeColor: \"#00A9FF\",\r\n          strokeWeight: 3,\r\n        });\r\n\r\n        lines.push(line);\r\n        map.value.add(line);\r\n      }\r\n\r\n      points.push(lnglat);\r\n      map.value.add(marker);\r\n\r\n      // 更新 lastMarker 为当前的 marker\r\n      lastMarker = marker;\r\n\r\n      // 显示总距离\r\n      updateDistanceLabel();\r\n\r\n      marker.on(\"dblclick\", () => {\r\n        if (points.length > 1) {\r\n          marker.setLabel({ content: \"终点\" });\r\n          measurementMode = false; // 双击终点后停止量测\r\n        }\r\n      });\r\n    };\r\n\r\n    const updateDistanceLabel = () => {\r\n      console.log(`当前总距离: ${totalDistance.toFixed(2)}米`);\r\n    };\r\n\r\n    const clearAll = () => {\r\n      points.forEach((point, index) => {\r\n        if (index > 0) {\r\n          lines[index - 1].setMap(null);\r\n        }\r\n      });\r\n      points = [];\r\n      lines = [];\r\n      totalDistance = 0;\r\n      updateDistanceLabel();\r\n    };\r\n\r\n    // 控制下拉菜单的显示状态\r\n    const toggleDropdown = (visible) => {\r\n      isDropdownVisible.value =\r\n        visible !== undefined ? visible : !isDropdownVisible.value;\r\n    };\r\n\r\n    // 图层切换逻辑\r\n    const switchToVector = () => {\r\n      if (currentLayer.value !== \"vector\") {\r\n        map.value.setLayers([vectorLayer]);\r\n        currentLayer.value = \"vector\";\r\n      }\r\n    };\r\n\r\n    const switchToSatellite = () => {\r\n      if (currentLayer.value !== \"satellite\") {\r\n        map.value.setLayers([satelliteLayer]);\r\n        currentLayer.value = \"satellite\";\r\n      }\r\n    };\r\n\r\n    // 获取并渲染多边形数据\r\n    const fetchPolygons = async () => {\r\n      try {\r\n        const response = await getRanderingSorted();\r\n        console.log(\"Polygons Response:\", response.data);\r\n\r\n        if (response.data.code === 0 && Array.isArray(response.data.data)) {\r\n          const formattedPolygons = response.data.data.map((item) => {\r\n            const coordinates = item.coordinates;\r\n            console.log(coordinates);\r\n            const polygon = new AMap.Polygon({\r\n              path: coordinates,\r\n              fillColor: \"#efebe2\",\r\n              strokeOpacity: 1,\r\n              fillOpacity: 0.5,\r\n              strokeColor: \"#2b8cbe\",\r\n              strokeWeight: 1,\r\n              strokeStyle: \"dashed\",\r\n              strokeDasharray: [5, 5],\r\n            });\r\n            return polygon;\r\n          });\r\n\r\n          polygons.value = formattedPolygons;\r\n\r\n          // 延迟添加多边形到地图\r\n          setTimeout(() => {\r\n            addPolygonsToMap(polygons.value);\r\n          }, 500);\r\n        } else {\r\n          console.error(\"Invalid polygon data format\", response.data);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error fetching polygons:\", error);\r\n      }\r\n    };\r\n\r\n    // 获取并渲染自行车点数据\r\n    const fetchBicyclePoints = async () => {\r\n      try {\r\n        const response = await getPointSorted();\r\n        console.log(\"Bicycles Response:\", response.data);\r\n\r\n        if (response.data.code === 0 && Array.isArray(response.data.data)) {\r\n          const bicycles = response.data.data;\r\n\r\n          // 延迟添加点到地图\r\n          setTimeout(() => {\r\n            addMarkersToMap(bicycles);\r\n          }, 500);\r\n        } else {\r\n          console.error(\"Invalid bicycle data format\", response.data);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error fetching bicycles:\", error);\r\n      }\r\n    };\r\n\r\n    // 将多边形添加到地图\r\n    const addPolygonsToMap = (polygons) => {\r\n      polygons.forEach((polygon) => map.value.add(polygon));\r\n    };\r\n\r\n    // 将自行车点添加到地图\r\n    const addMarkersToMap = (bicycles) => {\r\n      bicycles.forEach((bicycle) => {\r\n        const { id, coordinates } = bicycle;\r\n        const marker = new AMap.Marker({\r\n          position: new AMap.LngLat(coordinates[0], coordinates[1]),\r\n          title: `Bicycle ID: ${id}`,\r\n        });\r\n        markers.value.push(marker);\r\n        map.value.add(marker);\r\n      });\r\n    };\r\n\r\n    // 功能按钮逻辑\r\n    const resetView = () => {\r\n      map.value.setZoomAndCenter(16.3, [113.266949, 35.188365]);\r\n    };\r\n\r\n    const clearPolygons = () => {\r\n      polygons.value.forEach((polygon) => map.value.remove(polygon));\r\n      polygons.value = [];\r\n    };\r\n\r\n    const clearMarkers = () => {\r\n      markers.value.forEach((marker) => map.value.remove(marker));\r\n      markers.value = [];\r\n    };\r\n\r\n    // 初始化时加载地图\r\n    onMounted(() => {\r\n      loadAMapApi();\r\n      map.value.on(\"click\", addPoint); // 在地图初始化时绑定点击事件\r\n    });\r\n\r\n    return {\r\n      currentLayer,\r\n      switchToVector,\r\n      switchToSatellite,\r\n      resetView,\r\n      clearPolygons,\r\n      clearMarkers,\r\n      toggleDropdown,\r\n      map,\r\n      isDropdownVisible,\r\n      startMeasurement,\r\n      clearAll,\r\n    };\r\n  },\r\n};\r\n</script>\r\n\r\n<style>\r\nhtml,\r\nbody,\r\n#container {\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n\r\n.map-control {\r\n  position: absolute;\r\n  top: 10px;\r\n  right: 10px;\r\n  z-index: 1000;\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 5px;\r\n}\r\n\r\n.map-control button {\r\n  background-color: #fff;\r\n  border: 1px solid #ccc;\r\n  padding: 8px 12px;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  font-size: 14px;\r\n  transition: background-color 0.3s;\r\n  color: #000;\r\n}\r\n\r\n.map-control button:hover {\r\n  background-color: #f0f0f0;\r\n}\r\n\r\n.map-control button.active {\r\n  background-color: #2b8cbe;\r\n  color: #fff;\r\n  border-color: #2b8cbe;\r\n}\r\n\r\n.map-functions {\r\n  position: absolute;\r\n  bottom: 10px;\r\n  right: 10px;\r\n  z-index: 1000;\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 5px;\r\n}\r\n\r\n.map-functions button {\r\n  background-color: #fff;\r\n  border: 1px solid #ccc;\r\n  padding: 8px 12px;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  font-size: 14px;\r\n  transition: background-color 0.3s;\r\n}\r\n\r\n.map-functions button:hover {\r\n  background-color: #f0f0f0;\r\n}\r\n\r\n.map-control-container {\r\n  position: absolute;\r\n  top: 10px;\r\n  left: 10px;\r\n  z-index: 1000;\r\n  width: 160px;\r\n  background: #fff;\r\n  border: 1px solid #ccc;\r\n  border-radius: 6px;\r\n  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.2);\r\n  font-family: Arial, sans-serif;\r\n  overflow: hidden;\r\n}\r\n\r\n.map-control-header {\r\n  background: #2b8cbe;\r\n  color: #fff;\r\n  padding: 8px;\r\n  text-align: center;\r\n  font-weight: bold;\r\n  border-bottom: 1px solid #ccc;\r\n}\r\n\r\n.map-control-buttons {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 5px;\r\n  padding: 8px;\r\n}\r\n\r\n.map-control-buttons button {\r\n  background-color: #fff;\r\n  border: 1px solid #ccc;\r\n  padding: 8px 12px;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  font-size: 14px;\r\n  text-align: center;\r\n  transition: background-color 0.3s, color 0.3s;\r\n}\r\n\r\n.map-control-buttons button:hover {\r\n  background-color: #f0f0f0;\r\n}\r\n\r\n.map-control-buttons button.active {\r\n  background-color: #2b8cbe;\r\n  color: #fff;\r\n  border-color: #2b8cbe;\r\n}\r\n\r\n#overview-map {\r\n  position: absolute;\r\n  top: 10px;\r\n  left: 10px; /* 放在左上角 */\r\n  width: 200px;\r\n  height: 150px;\r\n  border: 1px solid #000;\r\n  z-index: 100;\r\n}\r\n</style>\r\n"],"mappings":";;EACOA,EAAE,EAAC,WAAW;EAACC,KAAiC,EAAjC;IAAA;IAAA;EAAA;;;EAKbC,KAAK,EAAC;AAAa;;EA8BnBA,KAAK,EAAC;AAAe;;;;;;uBAnC5BC,mBAAA,CAqDM,OArDNC,UAqDM,GApDJC,mBAAA,UAAa,E,0BACbC,mBAAA,CAA8B;IAAzBN,EAAE,EAAC;EAAe,6BAEvBK,mBAAA,gBAAmB,EACnBC,mBAAA,CA2BM,OA3BNC,UA2BM,GA1BJC,YAAA,CAyBaC,qBAAA;IAxBVC,OAAO,EAAEC,MAAA,CAAAC,iBAAiB;IAC1BC,eAAa,EAAEF,MAAA,CAAAG,cAAc;IAC9BC,OAAO,EAAC;;IAQGC,OAAO,EAAAC,QAAA,CAChB,MAWS,CAXTT,YAAA,CAWSU,iBAAA;MA9BnBC,OAAA,EAAAF,QAAA,CAoBY,MAIc,CAJdT,YAAA,CAIcY,sBAAA;QAJDC,GAAG,EAAC,QAAQ;QAAEC,OAAK,EAAEX,MAAA,CAAAY;;QApB9CJ,OAAA,EAAAF,QAAA,CAqBc,MAC8B,CAD9BX,mBAAA,CAC8B;UADvBJ,KAAK,EArB1BsB,eAAA;YAAAC,MAAA,EAqBsCd,MAAA,CAAAe,YAAY;UAAA;WACjC,MAAI,iB;QAtBrBC,CAAA;sCAyBYnB,YAAA,CAIcY,sBAAA;QAJDC,GAAG,EAAC,WAAW;QAAEC,OAAK,EAAEX,MAAA,CAAAiB;;QAzBjDT,OAAA,EAAAF,QAAA,CA0Bc,MAC8B,CAD9BX,mBAAA,CAC8B;UADvBJ,KAAK,EA1B1BsB,eAAA;YAAAC,MAAA,EA0BsCd,MAAA,CAAAe,YAAY;UAAA;WACjC,MAAI,iB;QA3BrBC,CAAA;;MAAAA,CAAA;;IAAAR,OAAA,EAAAF,QAAA,CAaQ,MAEW,CAFXT,YAAA,CAEWqB,mBAAA;MAFDC,IAAI,EAAC,SAAS;MAACC,KAAK,EAAC,OAAO;MAAET,OAAK,EAAEX,MAAA,CAAAG;;MAbvDK,OAAA,EAAAF,QAAA,CAauE,MAE/De,MAAA,QAAAA,MAAA,OAfRC,gBAAA,CAauE,QAE/D,E;MAfRN,CAAA;;IAAAA,CAAA;uDAmCItB,mBAAA,iBAAoB,EACpBC,mBAAA,CAGM,OAHN4B,UAGM,GAFJ1B,YAAA,CAAkEqB,mBAAA;IAAvDP,OAAK,EAAEX,MAAA,CAAAwB,gBAAgB;IAAEL,IAAI,EAAC;;IArC/CX,OAAA,EAAAF,QAAA,CAqCyD,MAAIe,MAAA,QAAAA,MAAA,OArC7DC,gBAAA,CAqCyD,MAAI,E;IArC7DN,CAAA;kCAsCMnB,YAAA,CAAuDqB,mBAAA;IAA5CP,OAAK,EAAEX,MAAA,CAAAyB,QAAQ;IAAEN,IAAI,EAAC;;IAtCvCX,OAAA,EAAAF,QAAA,CAsCgD,MAAEe,MAAA,QAAAA,MAAA,OAtClDC,gBAAA,CAsCgD,IAAE,E;IAtClDN,CAAA;oCAyCItB,mBAAA,WAAc,E,0BACdC,mBAAA,CAWO;IAVLN,EAAE,EAAC,cAAc;IACjBC,KAQC,EARD;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;IAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
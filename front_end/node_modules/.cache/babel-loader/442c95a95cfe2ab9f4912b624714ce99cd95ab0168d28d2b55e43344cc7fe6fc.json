{"ast":null,"code":"import \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport { ref, onMounted } from \"vue\";\nimport { getRanderingSorted } from \"@/api/rendering\";\nimport { Button, Menu as aMenu } from \"ant-design-vue\";\nexport default {\n  name: \"MapWindow\",\n  components: {\n    Button,\n    aMenu\n  },\n  setup() {\n    const map = ref(null);\n    const polygons = ref([]);\n    const collapsed = ref(false);\n    const openKeys = ref([]);\n    const mapLoaded = ref(false); // 跟踪地图是否加载完成\n\n    // 切换菜单折叠\n    const toggleCollapsed = () => {\n      collapsed.value = !collapsed.value;\n      if (collapsed.value) {\n        openKeys.value = []; // 当折叠时关闭所有子菜单\n      } else {\n        openKeys.value = [\"sub1\"]; // 展开默认子菜单\n      }\n    };\n\n    // 处理 openKeys 更新\n    const handleOpenKeys = keys => {\n      openKeys.value = keys;\n    };\n\n    // 加载并初始化地图\n    const loadAMapApi = () => {\n      const script = document.createElement(\"script\");\n      script.type = \"text/javascript\";\n      script.src = \"https://webapi.amap.com/maps?v=2.0&key=a6042dfaa8137c1bd9f59034cd3021a3\";\n      document.head.appendChild(script);\n      script.onload = () => {\n        initMap();\n      };\n    };\n    const initMap = () => {\n      const layer = new AMap.createDefaultLayer({\n        zooms: [3, 20],\n        visible: true,\n        opacity: 1,\n        zIndex: 0\n      });\n      map.value = new AMap.Map(\"container\", {\n        viewMode: \"2D\",\n        zoom: 16.3,\n        center: [113.266949, 35.188365],\n        layer: [layer]\n      });\n      mapLoaded.value = true; // 设置地图加载完成标志\n      addPolygonsToMap(polygons.value); // 在地图加载完成后添加多边形\n    };\n\n    // 获取并渲染数据\n    onMounted(async () => {\n      try {\n        const response = await getRanderingSorted();\n        console.log(\"Response:\", response.data);\n        if (response.data.code === 0 && Array.isArray(response.data.data)) {\n          const formattedPolygons = response.data.data.map(item => {\n            const coordinates = item.coordinates;\n            console.log(coordinates);\n            // 创建 AMap.Polygon 实例时，确保它没有被响应式包裹\n            const polygon = new AMap.Polygon({\n              path: coordinates,\n              fillColor: \"#ccebc5\",\n              strokeOpacity: 1,\n              fillOpacity: 0.5,\n              strokeColor: \"#2b8cbe\",\n              strokeWeight: 1,\n              strokeStyle: \"dashed\",\n              strokeDasharray: [5, 5]\n            });\n            return polygon;\n          });\n          polygons.value = formattedPolygons; // 更新 polygons\n        } else {\n          console.error(\"Invalid data format\", response.data);\n        }\n      } catch (error) {\n        console.error(\"Error fetching polygons:\", error);\n      }\n    });\n\n    // 将多边形添加到地图\n    const addPolygonsToMap = polygons => {\n      if (map.value && Array.isArray(polygons)) {\n        polygons.forEach(polygon => {\n          // 确保每个 polygon 是 AMap.Polygon 实例\n          if (polygon instanceof AMap.Polygon) {\n            map.value.add(polygon); // 添加有效的 AMap.Polygon 实例到地图\n          } else {\n            console.error(\"Invalid polygon item\", polygon);\n          }\n        });\n      } else {\n        console.error(\"Map or Polygons is not properly initialized:\", map.value, polygons);\n      }\n    };\n\n    // 加载并初始化地图 API\n    onMounted(() => {\n      loadAMapApi();\n    });\n    return {\n      map,\n      polygons,\n      collapsed,\n      toggleCollapsed,\n      openKeys,\n      handleOpenKeys,\n      mapLoaded // 绑定到模板，确保地图容器的加载\n    };\n  }\n};","map":{"version":3,"names":["ref","onMounted","getRanderingSorted","Button","Menu","aMenu","name","components","setup","map","polygons","collapsed","openKeys","mapLoaded","toggleCollapsed","value","handleOpenKeys","keys","loadAMapApi","script","document","createElement","type","src","head","appendChild","onload","initMap","layer","AMap","createDefaultLayer","zooms","visible","opacity","zIndex","Map","viewMode","zoom","center","addPolygonsToMap","response","console","log","data","code","Array","isArray","formattedPolygons","item","coordinates","polygon","Polygon","path","fillColor","strokeOpacity","fillOpacity","strokeColor","strokeWeight","strokeStyle","strokeDasharray","error","forEach","add"],"sources":["E:\\code\\Django\\project\\front\\front\\src\\components\\LocationWindow.vue"],"sourcesContent":["<template>\r\n  <div id=\"app\" style=\"position: relative; width: 100%; height: 100%\">\r\n    <!-- 地图容器，确保地图位于底层 -->\r\n    <div\r\n      v-if=\"mapLoaded\"\r\n      id=\"container\"\r\n      style=\"width: 100%; height: 100%; position: absolute; z-index: 0\"\r\n    ></div>\r\n\r\n    <!-- 菜单部分，显示在地图上层 -->\r\n    <div style=\"position: absolute; top: 20px; left: 20px; z-index: 10\">\r\n      <Button type=\"primary\" @click=\"toggleCollapsed\" style=\"margin-bottom: 16\">\r\n        {{ collapsed ? \"Expand\" : \"Collapse\" }}\r\n      </Button>\r\n      <a-menu\r\n        :inline-collapsed=\"collapsed\"\r\n        mode=\"inline\"\r\n        theme=\"dark\"\r\n        :default-selected-keys=\"['1']\"\r\n        :open-keys=\"collapsed ? [] : openKeys\"\r\n        @update:openKeys=\"handleOpenKeys\"\r\n      >\r\n        <a-menu-item key=\"1\" icon=\"pie-chart\">Option 1</a-menu-item>\r\n        <a-menu-item key=\"2\" icon=\"desktop\">Option 2</a-menu-item>\r\n        <a-menu-item key=\"3\" icon=\"container\">Option 3</a-menu-item>\r\n        <a-sub-menu key=\"sub1\" icon=\"mail\" title=\"Navigation One\">\r\n          <a-menu-item key=\"5\">Option 5</a-menu-item>\r\n          <a-menu-item key=\"6\">Option 6</a-menu-item>\r\n          <a-menu-item key=\"7\">Option 7</a-menu-item>\r\n          <a-menu-item key=\"8\">Option 8</a-menu-item>\r\n        </a-sub-menu>\r\n        <a-sub-menu key=\"sub2\" icon=\"appstore\" title=\"Navigation Two\">\r\n          <a-menu-item key=\"9\">Option 9</a-menu-item>\r\n          <a-menu-item key=\"10\">Option 10</a-menu-item>\r\n          <a-sub-menu key=\"sub3\" title=\"Submenu\">\r\n            <a-menu-item key=\"11\">Option 11</a-menu-item>\r\n            <a-menu-item key=\"12\">Option 12</a-menu-item>\r\n          </a-sub-menu>\r\n        </a-sub-menu>\r\n      </a-menu>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, onMounted } from \"vue\";\r\nimport { getRanderingSorted } from \"@/api/rendering\";\r\nimport { Button, Menu as aMenu } from \"ant-design-vue\";\r\n\r\nexport default {\r\n  name: \"MapWindow\",\r\n  components: {\r\n    Button,\r\n    aMenu,\r\n  },\r\n  setup() {\r\n    const map = ref(null);\r\n    const polygons = ref([]);\r\n    const collapsed = ref(false);\r\n    const openKeys = ref([]);\r\n    const mapLoaded = ref(false); // 跟踪地图是否加载完成\r\n\r\n    // 切换菜单折叠\r\n    const toggleCollapsed = () => {\r\n      collapsed.value = !collapsed.value;\r\n      if (collapsed.value) {\r\n        openKeys.value = []; // 当折叠时关闭所有子菜单\r\n      } else {\r\n        openKeys.value = [\"sub1\"]; // 展开默认子菜单\r\n      }\r\n    };\r\n\r\n    // 处理 openKeys 更新\r\n    const handleOpenKeys = (keys) => {\r\n      openKeys.value = keys;\r\n    };\r\n\r\n    // 加载并初始化地图\r\n    const loadAMapApi = () => {\r\n      const script = document.createElement(\"script\");\r\n      script.type = \"text/javascript\";\r\n      script.src =\r\n        \"https://webapi.amap.com/maps?v=2.0&key=a6042dfaa8137c1bd9f59034cd3021a3\";\r\n      document.head.appendChild(script);\r\n\r\n      script.onload = () => {\r\n        initMap();\r\n      };\r\n    };\r\n\r\n    const initMap = () => {\r\n      const layer = new AMap.createDefaultLayer({\r\n        zooms: [3, 20],\r\n        visible: true,\r\n        opacity: 1,\r\n        zIndex: 0,\r\n      });\r\n\r\n      map.value = new AMap.Map(\"container\", {\r\n        viewMode: \"2D\",\r\n        zoom: 16.3,\r\n        center: [113.266949, 35.188365],\r\n        layer: [layer],\r\n      });\r\n\r\n      mapLoaded.value = true; // 设置地图加载完成标志\r\n      addPolygonsToMap(polygons.value); // 在地图加载完成后添加多边形\r\n    };\r\n\r\n    // 获取并渲染数据\r\n    onMounted(async () => {\r\n      try {\r\n        const response = await getRanderingSorted();\r\n        console.log(\"Response:\", response.data);\r\n\r\n        if (response.data.code === 0 && Array.isArray(response.data.data)) {\r\n          const formattedPolygons = response.data.data.map((item) => {\r\n            const coordinates = item.coordinates;\r\n            console.log(coordinates);\r\n            // 创建 AMap.Polygon 实例时，确保它没有被响应式包裹\r\n            const polygon = new AMap.Polygon({\r\n              path: coordinates,\r\n              fillColor: \"#ccebc5\",\r\n              strokeOpacity: 1,\r\n              fillOpacity: 0.5,\r\n              strokeColor: \"#2b8cbe\",\r\n              strokeWeight: 1,\r\n              strokeStyle: \"dashed\",\r\n              strokeDasharray: [5, 5],\r\n            });\r\n\r\n            return polygon;\r\n          });\r\n\r\n          polygons.value = formattedPolygons; // 更新 polygons\r\n        } else {\r\n          console.error(\"Invalid data format\", response.data);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error fetching polygons:\", error);\r\n      }\r\n    });\r\n\r\n    // 将多边形添加到地图\r\n    const addPolygonsToMap = (polygons) => {\r\n      if (map.value && Array.isArray(polygons)) {\r\n        polygons.forEach((polygon) => {\r\n          // 确保每个 polygon 是 AMap.Polygon 实例\r\n          if (polygon instanceof AMap.Polygon) {\r\n            map.value.add(polygon); // 添加有效的 AMap.Polygon 实例到地图\r\n          } else {\r\n            console.error(\"Invalid polygon item\", polygon);\r\n          }\r\n        });\r\n      } else {\r\n        console.error(\r\n          \"Map or Polygons is not properly initialized:\",\r\n          map.value,\r\n          polygons\r\n        );\r\n      }\r\n    };\r\n\r\n    // 加载并初始化地图 API\r\n    onMounted(() => {\r\n      loadAMapApi();\r\n    });\r\n\r\n    return {\r\n      map,\r\n      polygons,\r\n      collapsed,\r\n      toggleCollapsed,\r\n      openKeys,\r\n      handleOpenKeys,\r\n      mapLoaded, // 绑定到模板，确保地图容器的加载\r\n    };\r\n  },\r\n};\r\n</script>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
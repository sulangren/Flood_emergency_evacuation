{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  id: \"container\",\n  style: {\n    \"width\": \"100%\",\n    \"height\": \"100%\"\n  }\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1);\n}","map":{"version":3,"names":["id","style","_createElementBlock","_hoisted_1"],"sources":["E:\\code\\Django\\project\\front\\front\\src\\components\\NearbyTramsWindow.vue"],"sourcesContent":["<template>\r\n  <div id=\"container\" style=\"width: 100%; height: 100%\"></div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, onMounted } from \"vue\";\r\nimport { getRanderingSorted } from \"@/api/rendering\";\r\n\r\nexport default {\r\n  name: \"MapWindow\",\r\n  setup() {\r\n    const map = ref(null);\r\n    const polygon = ref([]);\r\n\r\n    onMounted(() => {\r\n      loadAMapApi();\r\n    });\r\n\r\n    const loadAMapApi = () => {\r\n      const script = document.createElement(\"script\");\r\n      script.type = \"text/javascript\";\r\n      script.src =\r\n        \"https://webapi.amap.com/maps?v=2.0&key=a6042dfaa8137c1bd9f59034cd3021a3\";\r\n      document.head.appendChild(script);\r\n\r\n      script.onload = () => {\r\n        initMap();\r\n      };\r\n    };\r\n\r\n    const initMap = () => {\r\n      const layer = new AMap.createDefaultLayer({\r\n        zooms: [3, 20], // 可见级别\r\n        visible: true, // 是否可见\r\n        opacity: 1, // 透明度\r\n        zIndex: 0, // 叠加层级\r\n      });\r\n\r\n      map.value = new AMap.Map(\"container\", {\r\n        viewMode: \"2D\",\r\n        zoom: 16.3,\r\n        center: [113.266949, 35.188365],\r\n        layer: [layer],\r\n      });\r\n\r\n      const Valid_area = [\r\n        [\r\n          [\r\n            [113.256395, 35.190641],\r\n            [113.257839, 35.183192],\r\n            [113.258212, 35.182905],\r\n            [113.258597, 35.18288],\r\n            [113.276622, 35.185157],\r\n            [113.274351, 35.196294],\r\n            [113.274176, 35.196435],\r\n            [113.273903, 35.196433],\r\n            [113.27348, 35.196239],\r\n            [113.271625, 35.194724],\r\n            [113.270753, 35.193288],\r\n            [113.267986, 35.192422],\r\n            [113.261557, 35.191206],\r\n            [113.256395, 35.190641],\r\n          ],\r\n        ],\r\n      ];\r\n\r\n      polygon.value = new AMap.Polygon({\r\n        path: Valid_area,\r\n        fillColor: \"#ccebc5\",\r\n        strokeOpacity: 1,\r\n        fillOpacity: 0.5,\r\n        strokeColor: \"#2b8cbe\",\r\n        strokeWeight: 1,\r\n        strokeStyle: \"dashed\",\r\n        strokeDasharray: [5, 5],\r\n      });\r\n\r\n      polygon.value.on(\"mouseover\", () => {\r\n        polygon.value.setOptions({\r\n          fillOpacity: 0.1,\r\n          fillColor: \"#7bccc4\",\r\n        });\r\n      });\r\n\r\n      map.value.add(polygon.value);\r\n\r\n      map.value.on(\"zoomchange\", () => {\r\n        handleZoomChange();\r\n      });\r\n    };\r\n\r\n    const handleZoomChange = () => {\r\n      const zoomLevel = map.value.getZoom();\r\n      const threshold = 17;\r\n\r\n      if (zoomLevel > threshold) {\r\n        polygon.value.setMap(null);\r\n      } else {\r\n        polygon.value.setMap(map.value);\r\n      }\r\n    };\r\n\r\n    onMounted(async () => {\r\n      try {\r\n        const response = await getRanderingSorted();\r\n        console.log(\"Response:\", response.data);\r\n\r\n        if (\r\n          response.data.code === 0 &&\r\n          response.data.data &&\r\n          Array.isArray(response.data.data)\r\n        ) {\r\n          const formattedData = response.data.data\r\n            .map((item) => {\r\n              const coordinates = item.coordinates;\r\n\r\n              // 确保坐标数据正确\r\n              if (\r\n                Array.isArray(coordinates) &&\r\n                coordinates[0] &&\r\n                Array.isArray(coordinates[0])\r\n              ) {\r\n                // 创建一个新的 Polygon 实例\r\n                const polygonInstance = new AMap.Polygon({\r\n                  path: coordinates,\r\n                  fillColor: \"#ccebc5\",\r\n                  strokeOpacity: 1,\r\n                  fillOpacity: 0.5,\r\n                  strokeColor: \"#2b8cbe\",\r\n                  strokeWeight: 1,\r\n                  strokeStyle: \"dashed\",\r\n                  strokeDasharray: [5, 5],\r\n                });\r\n                return polygonInstance;\r\n              }\r\n              return null; // 如果坐标格式错误，返回 null\r\n            })\r\n            .filter((polygonItem) => polygonItem !== null); // 过滤掉无效的多边形\r\n\r\n          polygon.value = formattedData; // 更新 polygon 数据\r\n\r\n          // 延迟执行添加多边形操作\r\n          setTimeout(() => {\r\n            addPolygonsToMap(polygon.value);\r\n          }, 500);\r\n        } else {\r\n          console.error(\"Invalid data format\", response.data);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error fetching polygons:\", error);\r\n      }\r\n    });\r\n\r\n    const addPolygonsToMap = (polygons) => {\r\n      // 判断 polygons 是否是数组\r\n      if (Array.isArray(polygons)) {\r\n        polygons.forEach((polygonItem) => {\r\n          if (polygonItem instanceof AMap.Polygon) {\r\n            map.value.add(polygonItem); // 将有效的 Polygon 实例添加到地图\r\n          } else {\r\n            console.error(\"Invalid polygon item\", polygonItem);\r\n          }\r\n        });\r\n      } else {\r\n        console.error(\"Polygons is not an array:\", polygons);\r\n      }\r\n    };\r\n\r\n    return {\r\n      map,\r\n      polygon,\r\n    };\r\n  },\r\n};\r\n</script>\r\n\r\n<style>\r\nhtml,\r\nbody,\r\n#container {\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n\r\n.amap-logo {\r\n  display: none !important;\r\n}\r\n\r\n.amap-copyright {\r\n  opacity: 0 !important;\r\n}\r\n</style>\r\n"],"mappings":";;EACOA,EAAE,EAAC,WAAW;EAACC,KAAiC,EAAjC;IAAA;IAAA;EAAA;;;uBAApBC,mBAAA,CAA4D,OAA5DC,UAA4D","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
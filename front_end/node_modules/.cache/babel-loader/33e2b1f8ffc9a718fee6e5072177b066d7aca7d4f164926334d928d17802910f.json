{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport { ref, onMounted } from \"vue\";\nimport { getRanderingSorted, getPointSorted } from \"@/api/rendering\";\nexport default {\n  name: \"MapWindow\",\n  setup() {\n    const map = ref(null);\n    const polygons = ref([]); // 存储多边形对象\n    const markers = ref([]); // 存储标记点对象\n    const currentLayer = ref(\"vector\"); // 当前图层（矢量或卫星）\n    const isDropdownVisible = ref(false); // 下拉菜单是否显示\n    let vectorLayer = null;\n    let satelliteLayer = null;\n\n    // 加载并初始化地图\n    const loadAMapApi = () => {\n      const script = document.createElement(\"script\");\n      script.type = \"text/javascript\";\n      script.src = \"https://webapi.amap.com/maps?v=2.0&key=a6042dfaa8137c1bd9f59034cd3021a3\";\n      document.head.appendChild(script);\n      script.onload = () => {\n        initMap();\n      };\n    };\n    const initMap = () => {\n      if (!AMap) {\n        console.error(\"AMap is not defined!\");\n        return;\n      }\n\n      // 初始化图层\n      vectorLayer = new AMap.createDefaultLayer({\n        zooms: [3, 20],\n        visible: true,\n        opacity: 1,\n        zIndex: 0\n      }); // 矢量图层\n      satelliteLayer = new AMap.TileLayer.Satellite(); // 卫星图层\n\n      // 初始化地图\n      map.value = new AMap.Map(\"container\", {\n        viewMode: \"2D\",\n        zoom: 16.3,\n        center: [113.266949, 35.188365],\n        // 地图中心\n        layers: [vectorLayer] // 默认加载矢量图层\n      });\n\n      // 加载工具条控件\n      AMap.plugin([\"AMap.ToolBar\"], () => {\n        const toolBarControl = new AMap.ToolBar();\n        map.value.addControl(toolBarControl);\n      });\n\n      // 加载鹰眼图（OverviewMap）插件\n      AMap.plugin([\"AMap.OverviewMap\"], function () {\n        const overviewMap = new AMap.OverviewMap({\n          isOpen: true,\n          // 开启鹰眼图\n          zoom: 10 // 鹰眼图的缩放级别\n        });\n        map.value.addControl(overviewMap); // 将鹰眼图控件添加到地图\n      });\n\n      // 获取并渲染多边形和标记点数据\n      fetchPolygons();\n      fetchBicyclePoints();\n\n      // 添加 Valid_area 范围的多边形\n      const Valid_area = [[[[113.256395, 35.190641], [113.257839, 35.183192], [113.258212, 35.182905], [113.258597, 35.18288], [113.276622, 35.185157], [113.274351, 35.196294], [113.274176, 35.196435], [113.273903, 35.196433], [113.27348, 35.196239], [113.271625, 35.194724], [113.270753, 35.193288], [113.267986, 35.192422], [113.261557, 35.191206], [113.256395, 35.190641]]]];\n      const polygon = new AMap.Polygon({\n        path: Valid_area,\n        // 多边形路径\n        fillColor: \"#ccebc5\",\n        // 多边形填充颜色\n        strokeOpacity: 1,\n        // 线条透明度\n        fillOpacity: 0.3,\n        // 填充透明度\n        strokeColor: \"#ff0000\",\n        // 线条颜色\n        strokeWeight: 3,\n        // 线条宽度\n        strokeStyle: \"dashed\",\n        // 线样式\n        strokeDasharray: [5, 5] // 虚线样式\n      });\n\n      // 鼠标移入多边形时改变填充色和透明度\n      polygon.on(\"mouseover\", () => {\n        polygon.setOptions({\n          fillOpacity: 0.1,\n          // 多边形填充透明度\n          fillColor: \"#7bccc4\"\n        });\n      });\n\n      // 将多边形添加到地图\n      map.value.add(polygon);\n    };\n\n    // 控制下拉菜单的显示状态\n    const toggleDropdown = visible => {\n      isDropdownVisible.value = visible !== undefined ? visible : !isDropdownVisible.value;\n    };\n\n    // 图层切换逻辑\n    const switchToVector = () => {\n      if (currentLayer.value !== \"vector\") {\n        map.value.setLayers([vectorLayer]);\n        currentLayer.value = \"vector\";\n      }\n    };\n    const switchToSatellite = () => {\n      if (currentLayer.value !== \"satellite\") {\n        map.value.setLayers([satelliteLayer]);\n        currentLayer.value = \"satellite\";\n      }\n    };\n\n    // 获取并渲染多边形数据\n    const fetchPolygons = async () => {\n      try {\n        const response = await getRanderingSorted();\n        console.log(\"Polygons Response:\", response.data);\n        if (response.data.code === 0 && Array.isArray(response.data.data)) {\n          const formattedPolygons = response.data.data.map(item => {\n            const coordinates = item.coordinates;\n            console.log(coordinates);\n            const polygon = new AMap.Polygon({\n              path: coordinates,\n              fillColor: \"#efebe2\",\n              strokeOpacity: 1,\n              fillOpacity: 0.5,\n              strokeColor: \"#2b8cbe\",\n              strokeWeight: 1,\n              strokeStyle: \"dashed\",\n              strokeDasharray: [5, 5]\n            });\n            return polygon;\n          });\n          polygons.value = formattedPolygons;\n\n          // 延迟添加多边形到地图\n          setTimeout(() => {\n            addPolygonsToMap(polygons.value);\n          }, 500);\n        } else {\n          console.error(\"Invalid polygon data format\", response.data);\n        }\n      } catch (error) {\n        console.error(\"Error fetching polygons:\", error);\n      }\n    };\n\n    // 获取并渲染自行车点数据\n    const fetchBicyclePoints = async () => {\n      try {\n        const response = await getPointSorted();\n        console.log(\"Bicycles Response:\", response.data);\n        if (response.data.code === 0 && Array.isArray(response.data.data)) {\n          const bicycles = response.data.data;\n\n          // 延迟添加点到地图\n          setTimeout(() => {\n            addMarkersToMap(bicycles);\n          }, 500);\n        } else {\n          console.error(\"Invalid bicycle data format\", response.data);\n        }\n      } catch (error) {\n        console.error(\"Error fetching bicycles:\", error);\n      }\n    };\n\n    // 将多边形添加到地图\n    const addPolygonsToMap = polygons => {\n      polygons.forEach(polygon => map.value.add(polygon));\n    };\n\n    // 将自行车点添加到地图\n    const addMarkersToMap = bicycles => {\n      bicycles.forEach(bicycle => {\n        const {\n          id,\n          coordinates\n        } = bicycle;\n        const marker = new AMap.Marker({\n          position: new AMap.LngLat(coordinates[0], coordinates[1]),\n          title: `Bicycle ID: ${id}`\n        });\n        markers.value.push(marker);\n        map.value.add(marker);\n      });\n    };\n\n    // 功能按钮逻辑\n    const resetView = () => {\n      map.value.setZoomAndCenter(16.3, [113.266949, 35.188365]);\n    };\n    const clearPolygons = () => {\n      polygons.value.forEach(polygon => map.value.remove(polygon));\n      polygons.value = [];\n    };\n    const clearMarkers = () => {\n      markers.value.forEach(marker => map.value.remove(marker));\n      markers.value = [];\n    };\n\n    // 初始化时加载地图\n    onMounted(() => {\n      loadAMapApi();\n    });\n    return {\n      currentLayer,\n      switchToVector,\n      switchToSatellite,\n      resetView,\n      clearPolygons,\n      clearMarkers,\n      toggleDropdown\n    };\n  }\n};","map":{"version":3,"names":["ref","onMounted","getRanderingSorted","getPointSorted","name","setup","map","polygons","markers","currentLayer","isDropdownVisible","vectorLayer","satelliteLayer","loadAMapApi","script","document","createElement","type","src","head","appendChild","onload","initMap","AMap","console","error","createDefaultLayer","zooms","visible","opacity","zIndex","TileLayer","Satellite","value","Map","viewMode","zoom","center","layers","plugin","toolBarControl","ToolBar","addControl","overviewMap","OverviewMap","isOpen","fetchPolygons","fetchBicyclePoints","Valid_area","polygon","Polygon","path","fillColor","strokeOpacity","fillOpacity","strokeColor","strokeWeight","strokeStyle","strokeDasharray","on","setOptions","add","toggleDropdown","undefined","switchToVector","setLayers","switchToSatellite","response","log","data","code","Array","isArray","formattedPolygons","item","coordinates","setTimeout","addPolygonsToMap","bicycles","addMarkersToMap","forEach","bicycle","id","marker","Marker","position","LngLat","title","push","resetView","setZoomAndCenter","clearPolygons","remove","clearMarkers"],"sources":["E:\\code\\Django\\project\\front\\front\\src\\components\\NearbyTramsWindow.vue"],"sourcesContent":["<template>\r\n  <div id=\"container\" style=\"width: 100%; height: 100%\">\r\n    <!-- 地图容器 -->\r\n    <div id=\"map-container\"></div>\r\n\r\n    <!-- 左上角的图层切换按钮 -->\r\n    <div class=\"map-control\">\r\n      <a-dropdown\r\n        :visible=\"isDropdownVisible\"\r\n        @visibleChange=\"toggleDropdown\"\r\n        trigger=\"click\"\r\n      >\r\n        <!-- 触发按钮 -->\r\n        <a-button type=\"primary\" shape=\"round\" @click=\"toggleDropdown\">\r\n          图层切换\r\n        </a-button>\r\n\r\n        <!-- 下拉菜单 -->\r\n        <template #overlay>\r\n          <a-menu>\r\n            <a-menu-item key=\"vector\" @click=\"switchToVector\">\r\n              <span :class=\"{ active: currentLayer === 'vector' }\"\r\n                >矢量地图</span\r\n              >\r\n            </a-menu-item>\r\n            <a-menu-item key=\"satellite\" @click=\"switchToSatellite\">\r\n              <span :class=\"{ active: currentLayer === 'satellite' }\"\r\n                >卫星地图</span\r\n              >\r\n            </a-menu-item>\r\n          </a-menu>\r\n        </template>\r\n      </a-dropdown>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, onMounted } from \"vue\";\r\nimport { getRanderingSorted, getPointSorted } from \"@/api/rendering\";\r\n\r\nexport default {\r\n  name: \"MapWindow\",\r\n  setup() {\r\n    const map = ref(null);\r\n    const polygons = ref([]); // 存储多边形对象\r\n    const markers = ref([]); // 存储标记点对象\r\n    const currentLayer = ref(\"vector\"); // 当前图层（矢量或卫星）\r\n    const isDropdownVisible = ref(false); // 下拉菜单是否显示\r\n    let vectorLayer = null;\r\n    let satelliteLayer = null;\r\n\r\n    // 加载并初始化地图\r\n    const loadAMapApi = () => {\r\n      const script = document.createElement(\"script\");\r\n      script.type = \"text/javascript\";\r\n      script.src =\r\n        \"https://webapi.amap.com/maps?v=2.0&key=a6042dfaa8137c1bd9f59034cd3021a3\";\r\n      document.head.appendChild(script);\r\n\r\n      script.onload = () => {\r\n        initMap();\r\n      };\r\n    };\r\n\r\n    const initMap = () => {\r\n      if (!AMap) {\r\n        console.error(\"AMap is not defined!\");\r\n        return;\r\n      }\r\n\r\n      // 初始化图层\r\n      vectorLayer = new AMap.createDefaultLayer({\r\n        zooms: [3, 20],\r\n        visible: true,\r\n        opacity: 1,\r\n        zIndex: 0,\r\n      }); // 矢量图层\r\n      satelliteLayer = new AMap.TileLayer.Satellite(); // 卫星图层\r\n\r\n      // 初始化地图\r\n      map.value = new AMap.Map(\"container\", {\r\n        viewMode: \"2D\",\r\n        zoom: 16.3,\r\n        center: [113.266949, 35.188365], // 地图中心\r\n        layers: [vectorLayer], // 默认加载矢量图层\r\n      });\r\n\r\n      // 加载工具条控件\r\n      AMap.plugin([\"AMap.ToolBar\"], () => {\r\n        const toolBarControl = new AMap.ToolBar();\r\n        map.value.addControl(toolBarControl);\r\n      });\r\n\r\n      // 加载鹰眼图（OverviewMap）插件\r\n      AMap.plugin([\"AMap.OverviewMap\"], function () {\r\n        const overviewMap = new AMap.OverviewMap({\r\n          isOpen: true, // 开启鹰眼图\r\n          zoom: 10, // 鹰眼图的缩放级别\r\n        });\r\n        map.value.addControl(overviewMap); // 将鹰眼图控件添加到地图\r\n      });\r\n\r\n      // 获取并渲染多边形和标记点数据\r\n      fetchPolygons();\r\n      fetchBicyclePoints();\r\n\r\n      // 添加 Valid_area 范围的多边形\r\n      const Valid_area = [\r\n        [\r\n          [\r\n            [113.256395, 35.190641],\r\n            [113.257839, 35.183192],\r\n            [113.258212, 35.182905],\r\n            [113.258597, 35.18288],\r\n            [113.276622, 35.185157],\r\n            [113.274351, 35.196294],\r\n            [113.274176, 35.196435],\r\n            [113.273903, 35.196433],\r\n            [113.27348, 35.196239],\r\n            [113.271625, 35.194724],\r\n            [113.270753, 35.193288],\r\n            [113.267986, 35.192422],\r\n            [113.261557, 35.191206],\r\n            [113.256395, 35.190641],\r\n          ],\r\n        ],\r\n      ];\r\n\r\n      const polygon = new AMap.Polygon({\r\n        path: Valid_area, // 多边形路径\r\n        fillColor: \"#ccebc5\", // 多边形填充颜色\r\n        strokeOpacity: 1, // 线条透明度\r\n        fillOpacity: 0.3, // 填充透明度\r\n        strokeColor: \"#ff0000\", // 线条颜色\r\n        strokeWeight: 3, // 线条宽度\r\n        strokeStyle: \"dashed\", // 线样式\r\n        strokeDasharray: [5, 5], // 虚线样式\r\n      });\r\n\r\n      // 鼠标移入多边形时改变填充色和透明度\r\n      polygon.on(\"mouseover\", () => {\r\n        polygon.setOptions({\r\n          fillOpacity: 0.1, // 多边形填充透明度\r\n          fillColor: \"#7bccc4\",\r\n        });\r\n      });\r\n\r\n      // 将多边形添加到地图\r\n      map.value.add(polygon);\r\n    };\r\n\r\n    // 控制下拉菜单的显示状态\r\n    const toggleDropdown = (visible) => {\r\n      isDropdownVisible.value =\r\n        visible !== undefined ? visible : !isDropdownVisible.value;\r\n    };\r\n\r\n    // 图层切换逻辑\r\n    const switchToVector = () => {\r\n      if (currentLayer.value !== \"vector\") {\r\n        map.value.setLayers([vectorLayer]);\r\n        currentLayer.value = \"vector\";\r\n      }\r\n    };\r\n\r\n    const switchToSatellite = () => {\r\n      if (currentLayer.value !== \"satellite\") {\r\n        map.value.setLayers([satelliteLayer]);\r\n        currentLayer.value = \"satellite\";\r\n      }\r\n    };\r\n\r\n    // 获取并渲染多边形数据\r\n    const fetchPolygons = async () => {\r\n      try {\r\n        const response = await getRanderingSorted();\r\n        console.log(\"Polygons Response:\", response.data);\r\n\r\n        if (response.data.code === 0 && Array.isArray(response.data.data)) {\r\n          const formattedPolygons = response.data.data.map((item) => {\r\n            const coordinates = item.coordinates;\r\n            console.log(coordinates);\r\n            const polygon = new AMap.Polygon({\r\n              path: coordinates,\r\n              fillColor: \"#efebe2\",\r\n              strokeOpacity: 1,\r\n              fillOpacity: 0.5,\r\n              strokeColor: \"#2b8cbe\",\r\n              strokeWeight: 1,\r\n              strokeStyle: \"dashed\",\r\n              strokeDasharray: [5, 5],\r\n            });\r\n            return polygon;\r\n          });\r\n\r\n          polygons.value = formattedPolygons;\r\n\r\n          // 延迟添加多边形到地图\r\n          setTimeout(() => {\r\n            addPolygonsToMap(polygons.value);\r\n          }, 500);\r\n        } else {\r\n          console.error(\"Invalid polygon data format\", response.data);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error fetching polygons:\", error);\r\n      }\r\n    };\r\n\r\n    // 获取并渲染自行车点数据\r\n    const fetchBicyclePoints = async () => {\r\n      try {\r\n        const response = await getPointSorted();\r\n        console.log(\"Bicycles Response:\", response.data);\r\n\r\n        if (response.data.code === 0 && Array.isArray(response.data.data)) {\r\n          const bicycles = response.data.data;\r\n\r\n          // 延迟添加点到地图\r\n          setTimeout(() => {\r\n            addMarkersToMap(bicycles);\r\n          }, 500);\r\n        } else {\r\n          console.error(\"Invalid bicycle data format\", response.data);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error fetching bicycles:\", error);\r\n      }\r\n    };\r\n\r\n    // 将多边形添加到地图\r\n    const addPolygonsToMap = (polygons) => {\r\n      polygons.forEach((polygon) => map.value.add(polygon));\r\n    };\r\n\r\n    // 将自行车点添加到地图\r\n    const addMarkersToMap = (bicycles) => {\r\n      bicycles.forEach((bicycle) => {\r\n        const { id, coordinates } = bicycle;\r\n        const marker = new AMap.Marker({\r\n          position: new AMap.LngLat(coordinates[0], coordinates[1]),\r\n          title: `Bicycle ID: ${id}`,\r\n        });\r\n        markers.value.push(marker);\r\n        map.value.add(marker);\r\n      });\r\n    };\r\n\r\n    // 功能按钮逻辑\r\n    const resetView = () => {\r\n      map.value.setZoomAndCenter(16.3, [113.266949, 35.188365]);\r\n    };\r\n\r\n    const clearPolygons = () => {\r\n      polygons.value.forEach((polygon) => map.value.remove(polygon));\r\n      polygons.value = [];\r\n    };\r\n\r\n    const clearMarkers = () => {\r\n      markers.value.forEach((marker) => map.value.remove(marker));\r\n      markers.value = [];\r\n    };\r\n\r\n    // 初始化时加载地图\r\n    onMounted(() => {\r\n      loadAMapApi();\r\n    });\r\n\r\n    return {\r\n      currentLayer,\r\n      switchToVector,\r\n      switchToSatellite,\r\n      resetView,\r\n      clearPolygons,\r\n      clearMarkers,\r\n      toggleDropdown,\r\n    };\r\n  },\r\n};\r\n</script>\r\n\r\n<style>\r\nhtml,\r\nbody,\r\n#container {\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n\r\n.map-control {\r\n  position: absolute;\r\n  top: 10px;\r\n  right: 10px;\r\n  z-index: 1000;\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 5px;\r\n}\r\n\r\n.map-control button {\r\n  background-color: #fff;\r\n  border: 1px solid #ccc;\r\n  padding: 8px 12px;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  font-size: 14px;\r\n  transition: background-color 0.3s;\r\n  color: #000;\r\n}\r\n\r\n.map-control button:hover {\r\n  background-color: #f0f0f0;\r\n}\r\n\r\n.map-control button.active {\r\n  background-color: #2b8cbe;\r\n  color: #fff;\r\n  border-color: #2b8cbe;\r\n}\r\n\r\n.map-functions {\r\n  position: absolute;\r\n  bottom: 10px;\r\n  right: 10px;\r\n  z-index: 1000;\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 5px;\r\n}\r\n\r\n.map-functions button {\r\n  background-color: #fff;\r\n  border: 1px solid #ccc;\r\n  padding: 8px 12px;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  font-size: 14px;\r\n  transition: background-color 0.3s;\r\n}\r\n\r\n.map-functions button:hover {\r\n  background-color: #f0f0f0;\r\n}\r\n\r\n.map-control-container {\r\n  position: absolute;\r\n  top: 10px;\r\n  left: 10px;\r\n  z-index: 1000;\r\n  width: 160px;\r\n  background: #fff;\r\n  border: 1px solid #ccc;\r\n  border-radius: 6px;\r\n  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.2);\r\n  font-family: Arial, sans-serif;\r\n  overflow: hidden;\r\n}\r\n\r\n.map-control-header {\r\n  background: #2b8cbe;\r\n  color: #fff;\r\n  padding: 8px;\r\n  text-align: center;\r\n  font-weight: bold;\r\n  border-bottom: 1px solid #ccc;\r\n}\r\n\r\n.map-control-buttons {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 5px;\r\n  padding: 8px;\r\n}\r\n\r\n.map-control-buttons button {\r\n  background-color: #fff;\r\n  border: 1px solid #ccc;\r\n  padding: 8px 12px;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  font-size: 14px;\r\n  text-align: center;\r\n  transition: background-color 0.3s, color 0.3s;\r\n}\r\n\r\n.map-control-buttons button:hover {\r\n  background-color: #f0f0f0;\r\n}\r\n\r\n.map-control-buttons button.active {\r\n  background-color: #2b8cbe;\r\n  color: #fff;\r\n  border-color: #2b8cbe;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  id: \"container\",\n  style: {\n    \"width\": \"100%\",\n    \"height\": \"100%\"\n  }\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1);\n}","map":{"version":3,"names":["id","style","_createElementBlock","_hoisted_1"],"sources":["E:\\code\\Django\\project\\front\\front\\src\\components\\NearbyTramsWindow.vue"],"sourcesContent":["<template>\r\n  <div id=\"container\" style=\"width: 100%; height: 100%\"></div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, onMounted } from \"vue\";\r\nimport { getRanderingSorted, getPointSorted } from \"@/api/rendering\";\r\n\r\nexport default {\r\n  name: \"MapWindow\",\r\n  setup() {\r\n    const map = ref(null);\r\n    const polygons = ref([]);\r\n    const markerList = ref([]);\r\n\r\n    // 加载并初始化地图\r\n    const loadAMapApi = () => {\r\n      const script = document.createElement(\"script\");\r\n      script.type = \"text/javascript\";\r\n      script.src =\r\n        \"https://webapi.amap.com/maps?v=2.0&key=a6042dfaa8137c1bd9f59034cd3021a3\";\r\n      document.head.appendChild(script);\r\n\r\n      script.onload = () => {\r\n        initMap();\r\n      };\r\n    };\r\n\r\n    // 在 initMap 中确保 map 被初始化\r\n    const initMap = () => {\r\n      const layer = new AMap.createDefaultLayer({\r\n        zooms: [3, 20],\r\n        visible: true,\r\n        opacity: 1,\r\n        zIndex: 0,\r\n      });\r\n\r\n      map.value = new AMap.Map(\"container\", {\r\n        viewMode: \"2D\",\r\n        zoom: 16.3,\r\n        center: [113.266949, 35.188365],\r\n        layer: [layer],\r\n      });\r\n\r\n      console.log(\"Map initialized:\", map.value); // 确保 map 被正确初始化\r\n    };\r\n\r\n    // 获取并渲染数据\r\n    onMounted(async () => {\r\n      try {\r\n        const response = await getRanderingSorted();\r\n        const response_tow = await getPointSorted();\r\n        console.log(\"Response:\", response.data);\r\n        console.log(\"Point:\", response_tow.data);\r\n\r\n        if (response.data.code === 0 && Array.isArray(response.data.data)) {\r\n          const formattedPolygons = response.data.data\r\n            .map((item) => {\r\n              const coordinates = item.parking_area; // 确保 parking_area 为有效数组\r\n              if (\r\n                coordinates &&\r\n                Array.isArray(coordinates) &&\r\n                coordinates.length > 0\r\n              ) {\r\n                console.log(\"Valid coordinates:\", coordinates);\r\n                const polygon = new AMap.Polygon({\r\n                  path: coordinates,\r\n                  fillColor: \"#ccebc5\",\r\n                  strokeOpacity: 1,\r\n                  fillOpacity: 0.5,\r\n                  strokeColor: \"#2b8cbe\",\r\n                  strokeWeight: 1,\r\n                  strokeStyle: \"dashed\",\r\n                  strokeDasharray: [5, 5],\r\n                });\r\n                return polygon;\r\n              } else {\r\n                console.error(\"Invalid coordinates:\", coordinates);\r\n                return null;\r\n              }\r\n            })\r\n            .filter((polygon) => polygon !== null); // 过滤掉无效的多边形\r\n\r\n          const formattedPoint = response_tow.data.data\r\n            .map((item) => {\r\n              const coordinates_tow = item.coordinates;\r\n              const id = item.id;\r\n              console.log(coordinates_tow);\r\n              console.log(id);\r\n\r\n              // 检查坐标是否有效\r\n              if (\r\n                Array.isArray(coordinates_tow) &&\r\n                coordinates_tow.length === 2\r\n              ) {\r\n                const [lng, lat] = coordinates_tow;\r\n                if (!isNaN(lng) && !isNaN(lat)) {\r\n                  const marker = new AMap.Marker({\r\n                    position: new AMap.LngLat(lng, lat), // 经度、纬度\r\n                    title: id,\r\n                  });\r\n                  return marker;\r\n                } else {\r\n                  console.error(\r\n                    `Invalid coordinates for marker ${id}:`,\r\n                    coordinates_tow\r\n                  );\r\n                }\r\n              }\r\n              return null;\r\n            })\r\n            .filter((marker) => marker !== null); // 过滤掉无效的 marker\r\n\r\n          polygons.value = formattedPolygons; // 更新 polygons\r\n          markerList.value = formattedPoint;\r\n\r\n          // 延迟添加多边形到地图\r\n          setTimeout(() => {\r\n            addPolygonsToMap(polygons.value);\r\n            addPolygonsToMap(markerList.value);\r\n          }, 500);\r\n        } else {\r\n          console.error(\"Invalid data format\", response.data);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error fetching polygons:\", error);\r\n      }\r\n    });\r\n\r\n    // 将多边形添加到地图\r\n    // 延迟添加多边形到地图，确保地图已初始化\r\n    const addPolygonsToMap = (polygons, markerList) => {\r\n      if (!map.value) {\r\n        console.error(\"Map is not initialized yet!\");\r\n        return;\r\n      }\r\n\r\n      // 确保 polygons 是数组，并且每个 polygon 都是 AMap.Polygon 实例\r\n      if (Array.isArray(polygons)) {\r\n        polygons.forEach((polygon) => {\r\n          if (polygon instanceof AMap.Polygon) {\r\n            map.value.add(polygon); // 添加有效的 AMap.Polygon 实例到地图\r\n          } else {\r\n            console.error(\"Invalid polygon item\", polygon);\r\n          }\r\n        });\r\n      } else {\r\n        console.error(\"Polygons is not an array:\", polygons);\r\n      }\r\n\r\n      // 确保 markerList 是数组，并且每个 marker 都是 AMap.Marker 实例\r\n      if (Array.isArray(markerList)) {\r\n        markerList.forEach((marker) => {\r\n          if (marker instanceof AMap.Marker) {\r\n            map.value.add(marker); // 添加有效的 AMap.Marker 实例到地图\r\n          } else {\r\n            console.error(\"Invalid marker item\", marker);\r\n          }\r\n        });\r\n      } else {\r\n        console.error(\"markerList is not an array:\", markerList);\r\n      }\r\n    };\r\n\r\n    // 加载并初始化地图 API\r\n    onMounted(() => {\r\n      loadAMapApi();\r\n    });\r\n\r\n    return {\r\n      map,\r\n      polygons,\r\n    };\r\n  },\r\n};\r\n</script>\r\n\r\n<style>\r\nhtml,\r\nbody,\r\n#container {\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n\r\n.amap-logo {\r\n  display: none !important;\r\n}\r\n\r\n.amap-copyright {\r\n  opacity: 0 !important;\r\n}\r\n</style>\r\n"],"mappings":";;EACOA,EAAE,EAAC,WAAW;EAACC,KAAiC,EAAjC;IAAA;IAAA;EAAA;;;uBAApBC,mBAAA,CAA4D,OAA5DC,UAA4D","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
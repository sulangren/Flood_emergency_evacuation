{"ast":null,"code":"import { createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  id: \"container\",\n  style: {\n    \"width\": \"100%\",\n    \"height\": \"100%\"\n  }\n};\nconst _hoisted_2 = {\n  class: \"button-container\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_Button = _resolveComponent(\"Button\");\n  const _component_Input = _resolveComponent(\"Input\");\n  const _component_a_form_item = _resolveComponent(\"a-form-item\");\n  const _component_Row = _resolveComponent(\"Row\");\n  const _component_Form = _resolveComponent(\"Form\");\n  const _component_Drawer = _resolveComponent(\"Drawer\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_createVNode(_component_Button, {\n    type: \"primary\",\n    onClick: $setup.showDrawer\n  }, {\n    default: _withCtx(() => _cache[2] || (_cache[2] = [_createTextVNode(\" 预警 \")])),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"onClick\"]), _createCommentVNode(\" 使用 v-model 来控制 Drawer 的显示和隐藏 \"), _createVNode(_component_Drawer, {\n    title: \"调度功能页面\",\n    width: 400,\n    visible: $setup.open,\n    \"onUpdate:visible\": _cache[1] || (_cache[1] = $event => $setup.open = $event),\n    onClose: $setup.onClose,\n    style: {\n      zIndex: 999\n    }\n  }, {\n    default: _withCtx(() => [_createVNode(_component_Form, {\n      model: $setup.form,\n      onFinish: $setup.buffer\n    }, {\n      default: _withCtx(() => [_createVNode(_component_Row, {\n        gutter: 16\n      }, {\n        default: _withCtx(() => [_createVNode(_component_a_form_item, {\n          label: \"火灾车辆编号\",\n          name: \"vehicleCount\",\n          hasFeedback: \"\"\n        }, {\n          default: _withCtx(() => [_createVNode(_component_Input, {\n            value: $setup.form.vehicleCount,\n            \"onUpdate:value\": _cache[0] || (_cache[0] = $event => $setup.form.vehicleCount = $event),\n            placeholder: \"电车编号\"\n          }, null, 8 /* PROPS */, [\"value\"])]),\n          _: 1 /* STABLE */\n        })]),\n        _: 1 /* STABLE */\n      }), _createVNode(_component_Row, null, {\n        default: _withCtx(() => [_createVNode(_component_a_form_item, null, {\n          default: _withCtx(() => _cache[3] || (_cache[3] = [_createElementVNode(\"button\", null, \"生成缓冲区预警\", -1 /* HOISTED */)])),\n          _: 1 /* STABLE */\n        })]),\n        _: 1 /* STABLE */\n      })]),\n      _: 1 /* STABLE */\n    }, 8 /* PROPS */, [\"model\", \"onFinish\"])]),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"visible\", \"onClose\"])])]);\n}","map":{"version":3,"names":["id","style","class","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_createVNode","_component_Button","type","onClick","$setup","showDrawer","default","_withCtx","_cache","_createTextVNode","_","_createCommentVNode","_component_Drawer","title","width","visible","open","$event","onClose","zIndex","_component_Form","model","form","onFinish","buffer","_component_Row","gutter","_component_a_form_item","label","name","hasFeedback","_component_Input","value","vehicleCount","placeholder"],"sources":["E:\\code\\Django\\project\\front\\front\\src\\components\\WarningWindow.vue"],"sourcesContent":["<template>\r\n  <div id=\"container\" style=\"width: 100%; height: 100%\">\r\n    <div class=\"button-container\">\r\n      <Button type=\"primary\" @click=\"showDrawer\"> 预警 </Button>\r\n\r\n      <!-- 使用 v-model 来控制 Drawer 的显示和隐藏 -->\r\n      <Drawer\r\n        title=\"调度功能页面\"\r\n        :width=\"400\"\r\n        v-model:visible=\"open\"\r\n        @close=\"onClose\"\r\n        :style=\"{ zIndex: 999 }\"\r\n      >\r\n        <Form :model=\"form\" @finish=\"buffer\">\r\n          <Row :gutter=\"16\">\r\n            <a-form-item label=\"火灾车辆编号\" name=\"vehicleCount\" hasFeedback>\r\n              <Input v-model:value=\"form.vehicleCount\" placeholder=\"电车编号\" />\r\n            </a-form-item>\r\n          </Row>\r\n          <Row>\r\n            <a-form-item>\r\n              <button>生成缓冲区预警</button>\r\n            </a-form-item>\r\n          </Row>\r\n        </Form>\r\n      </Drawer>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, onMounted } from \"vue\";\r\nimport { getRanderingSorted, getPointSorted } from \"@/api/rendering\";\r\nimport { functionAuthStore } from \"@/storage/functionStorage\";\r\nimport { Button, Drawer, Form, Input, Row } from \"ant-design-vue\";\r\n\r\nexport default {\r\n  name: \"MapWindow\",\r\n  components: {\r\n    Button,\r\n    Drawer,\r\n    Form,\r\n    Input,\r\n    Row,\r\n    \"a-form-item\": Form.Item,\r\n  },\r\n  setup() {\r\n    const map = ref(null);\r\n    const polygons = ref([]);\r\n    const open = ref(false); // 控制 Drawer 显示与否\r\n    const markers = ref([]);\r\n\r\n    const authStore = functionAuthStore();\r\n\r\n    // 初始化表单对象\r\n    const form = ref({\r\n      vehicleCount: \"\", // 火灾车辆\r\n    });\r\n\r\n    const showDrawer = () => {\r\n      open.value = true; // 打开 Drawer\r\n    };\r\n\r\n    const onClose = () => {\r\n      open.value = false; // 关闭 Drawer\r\n    };\r\n\r\n    // 提交表单时的操作\r\n    const onSubmit = (values) => {\r\n      console.log(\"Form Submitted:\", values);\r\n    };\r\n\r\n    // 加载并初始化地图\r\n    const loadAMapApi = () => {\r\n      const script = document.createElement(\"script\");\r\n      script.type = \"text/javascript\";\r\n      script.src =\r\n        \"https://webapi.amap.com/maps?v=2.0&key=a6042dfaa8137c1bd9f59034cd3021a3\";\r\n      document.head.appendChild(script);\r\n\r\n      script.onload = () => {\r\n        initMap();\r\n      };\r\n    };\r\n\r\n    const initMap = () => {\r\n      const layer = new AMap.createDefaultLayer({\r\n        zooms: [3, 20],\r\n        visible: true,\r\n        opacity: 1,\r\n        zIndex: 0,\r\n      });\r\n\r\n      map.value = new AMap.Map(\"container\", {\r\n        viewMode: \"2D\",\r\n        zoom: 16.3,\r\n        center: [113.266949, 35.188365],\r\n        layer: [layer],\r\n      });\r\n    };\r\n\r\n    // 获取并渲染数据\r\n    onMounted(async () => {\r\n      try {\r\n        const response = await getRanderingSorted();\r\n        console.log(\"Response:\", response.data);\r\n\r\n        if (response.data.code === 0 && Array.isArray(response.data.data)) {\r\n          const formattedPolygons = response.data.data.map((item) => {\r\n            const coordinates = item.coordinates;\r\n            // 创建 AMap.Polygon 实例时，确保它没有被响应式包裹\r\n            const polygon = new AMap.Polygon({\r\n              path: coordinates,\r\n              fillColor: \"#ccebc5\",\r\n              strokeOpacity: 1,\r\n              fillOpacity: 0.5,\r\n              strokeColor: \"#2b8cbe\",\r\n              strokeWeight: 1,\r\n              strokeStyle: \"dashed\",\r\n              strokeDasharray: [5, 5],\r\n            });\r\n\r\n            return polygon;\r\n          });\r\n\r\n          polygons.value = formattedPolygons; // 更新 polygons\r\n\r\n          // 延迟添加多边形到地图\r\n          setTimeout(() => {\r\n            addPolygonsToMap(polygons.value);\r\n          }, 500);\r\n        } else {\r\n          console.error(\"Invalid data format\", response.data);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error fetching polygons:\", error);\r\n      }\r\n    });\r\n\r\n    // 获取并渲染自行车点数据\r\n    const fetchBicyclePoints = async () => {\r\n      try {\r\n        const response = await getPointSorted();\r\n        // console.log(\"Bicycles Response:\", response.data);\r\n\r\n        if (response.data.code === 0 && Array.isArray(response.data.data)) {\r\n          const bicycles = response.data.data;\r\n          console.log(bicycles);\r\n          // 延迟添加点到地图\r\n          setTimeout(() => {\r\n            addMarkersToMap(bicycles);\r\n          }, 500);\r\n        } else {\r\n          console.error(\"Invalid bicycle data format\", response.data);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error fetching bicycles:\", error);\r\n      }\r\n    };\r\n\r\n    // 将多边形添加到地图\r\n    const addPolygonsToMap = (polygons) => {\r\n      if (Array.isArray(polygons)) {\r\n        polygons.forEach((polygon) => {\r\n          // 确保每个 polygon 是 AMap.Polygon 实例\r\n          if (polygon instanceof AMap.Polygon) {\r\n            map.value.add(polygon); // 添加有效的 AMap.Polygon 实例到地图\r\n          } else {\r\n            console.error(\"Invalid polygon item\", polygon);\r\n          }\r\n        });\r\n      } else {\r\n        console.error(\"Polygons is not an array:\", polygons);\r\n      }\r\n    };\r\n\r\n    // 将自行车点添加到地图\r\n    const addMarkersToMap = (bicycles) => {\r\n      if (Array.isArray(bicycles)) {\r\n        bicycles.forEach((bicycle) => {\r\n          const { id, coordinates } = bicycle;\r\n          const marker = new AMap.Marker({\r\n            position: new AMap.LngLat(coordinates[0], coordinates[1]), // 设置点的坐标\r\n            title: `Bicycle ID: ${id}`, // 设置点的标题为 ID\r\n          });\r\n          markers.value.push(marker); // 将每个点标记保存到 markers 数组\r\n          map.value.add(marker); // 添加标记到地图\r\n        });\r\n      }\r\n    };\r\n\r\n    // 加载并初始化地图 API\r\n    onMounted(() => {\r\n      loadAMapApi();\r\n      fetchBicyclePoints(); // 获取并渲染自行车点数据\r\n    });\r\n\r\n    const buffer = async () => {\r\n      try {\r\n        const response = await authStore.bufferRegisters({\r\n          id: form.value.vehicleCount,\r\n        });\r\n\r\n        if (response.code === 0 && Array.isArray(response.data)) {\r\n          const bicycles = response.data;\r\n          console.log(bicycles);\r\n\r\n          // 延迟添加点到地图\r\n          setTimeout(() => {\r\n            addBufferMarkersPointToMap(bicycles);\r\n            console.log(\"添加成功\");\r\n          }, 500);\r\n        } else {\r\n          console.error(\"Invalid bicycle data format\", response.data);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error fetching bicycles:\", error);\r\n      }\r\n    };\r\n\r\n    // 将自行车点添加到地图\r\n    const addBufferMarkersPointToMap = (bicycles) => {\r\n      if (Array.isArray(bicycles)) {\r\n        bicycles.forEach((bicycle) => {\r\n          const { id, coordinates } = bicycle;\r\n\r\n          // 创建新的标记\r\n          const marker = new AMap.Marker({\r\n            position: new AMap.LngLat(coordinates[0], coordinates[1]), // 设置点的坐标\r\n            title: `Bicycle ID: ${id}`, // 设置点的标题为 ID\r\n            offset: new AMap.Pixel(-9.5, -31.7), //偏移量\r\n            icon: \"https://webapi.amap.com/theme/v1.3/markers/n/mark_r.png\", // 设置图标\r\n          });\r\n\r\n          // 将标记保存到 markers 数组\r\n          markers.value.push(marker);\r\n          // 将标记添加到地图\r\n          map.value.add(marker);\r\n        });\r\n      }\r\n    };\r\n\r\n    return {\r\n      map,\r\n      polygons,\r\n      onClose,\r\n      showDrawer,\r\n      open, // 需要返回给模板以便使用\r\n      form,\r\n      onSubmit,\r\n      buffer,\r\n    };\r\n  },\r\n};\r\n</script>\r\n\r\n<style>\r\nhtml,\r\nbody,\r\n#container {\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n\r\n.amap-logo {\r\n  display: none !important;\r\n}\r\n\r\n.amap-copyright {\r\n  opacity: 0 !important;\r\n}\r\n\r\n/* 按钮容器的样式 */\r\n.button-container {\r\n  position: absolute;\r\n  top: 50px; /* 按钮距离顶部 20px */\r\n  right: 70px; /* 按钮距离右边 20px */\r\n  z-index: 99; /* 确保按钮位于地图的顶部 */\r\n}\r\n\r\n/* 确保 Drawer 的 z-index 比 Button 的 z-index 小 */\r\n.ant-drawer {\r\n  z-index: 1000 !important;\r\n}\r\n</style>\r\n"],"mappings":";;EACOA,EAAE,EAAC,WAAW;EAACC,KAAiC,EAAjC;IAAA;IAAA;EAAA;;;EACbC,KAAK,EAAC;AAAkB;;;;;;;;uBAD/BC,mBAAA,CA0BM,OA1BNC,UA0BM,GAzBJC,mBAAA,CAwBM,OAxBNC,UAwBM,GAvBJC,YAAA,CAAwDC,iBAAA;IAAhDC,IAAI,EAAC,SAAS;IAAEC,OAAK,EAAEC,MAAA,CAAAC;;IAHrCC,OAAA,EAAAC,QAAA,CAGiD,MAAIC,MAAA,QAAAA,MAAA,OAHrDC,gBAAA,CAGiD,MAAI,E;IAHrDC,CAAA;kCAKMC,mBAAA,kCAAqC,EACrCX,YAAA,CAmBSY,iBAAA;IAlBPC,KAAK,EAAC,QAAQ;IACbC,KAAK,EAAE,GAAG;IACHC,OAAO,EAAEX,MAAA,CAAAY,IAAI;IAT7B,oBAAAR,MAAA,QAAAA,MAAA,MAAAS,MAAA,IASyBb,MAAA,CAAAY,IAAI,GAAAC,MAAA;IACpBC,OAAK,EAAEd,MAAA,CAAAc,OAAO;IACdxB,KAAK,EAAE;MAAAyB,MAAA;IAAA;;IAXhBb,OAAA,EAAAC,QAAA,CAaQ,MAWO,CAXPP,YAAA,CAWOoB,eAAA;MAXAC,KAAK,EAAEjB,MAAA,CAAAkB,IAAI;MAAGC,QAAM,EAAEnB,MAAA,CAAAoB;;MAbrClB,OAAA,EAAAC,QAAA,CAcU,MAIM,CAJNP,YAAA,CAIMyB,cAAA;QAJAC,MAAM,EAAE;MAAE;QAd1BpB,OAAA,EAAAC,QAAA,CAeY,MAEc,CAFdP,YAAA,CAEc2B,sBAAA;UAFDC,KAAK,EAAC,QAAQ;UAACC,IAAI,EAAC,cAAc;UAACC,WAAW,EAAX;;UAf5DxB,OAAA,EAAAC,QAAA,CAgBc,MAA8D,CAA9DP,YAAA,CAA8D+B,gBAAA;YAA/CC,KAAK,EAAE5B,MAAA,CAAAkB,IAAI,CAACW,YAAY;YAhBrD,kBAAAzB,MAAA,QAAAA,MAAA,MAAAS,MAAA,IAgBoCb,MAAA,CAAAkB,IAAI,CAACW,YAAY,GAAAhB,MAAA;YAAEiB,WAAW,EAAC;;UAhBnExB,CAAA;;QAAAA,CAAA;UAmBUV,YAAA,CAIMyB,cAAA;QAvBhBnB,OAAA,EAAAC,QAAA,CAoBY,MAEc,CAFdP,YAAA,CAEc2B,sBAAA;UAtB1BrB,OAAA,EAAAC,QAAA,CAqBc,MAAwBC,MAAA,QAAAA,MAAA,OAAxBV,mBAAA,CAAwB,gBAAhB,SAAO,oB;UArB7BY,CAAA;;QAAAA,CAAA;;MAAAA,CAAA;;IAAAA,CAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
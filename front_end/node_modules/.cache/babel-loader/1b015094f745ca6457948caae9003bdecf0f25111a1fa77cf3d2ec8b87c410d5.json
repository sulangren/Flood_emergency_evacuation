{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString } from \"vue\";\nconst _hoisted_1 = {\n  class: \"map-container\"\n};\nconst _hoisted_2 = {\n  class: \"right-sidebar\"\n};\nconst _hoisted_3 = {\n  class: \"data-table\"\n};\nconst _hoisted_4 = [\"onClick\"];\nconst _hoisted_5 = {\n  class: \"pagination\"\n};\nconst _hoisted_6 = [\"disabled\"];\nconst _hoisted_7 = [\"disabled\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_Input = _resolveComponent(\"Input\");\n  const _component_a_form_item = _resolveComponent(\"a-form-item\");\n  const _component_Row = _resolveComponent(\"Row\");\n  const _component_Form = _resolveComponent(\"Form\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\" 地图容器 \"), _cache[5] || (_cache[5] = _createElementVNode(\"div\", {\n    id: \"container\",\n    class: \"map\"\n  }, null, -1 /* HOISTED */)), _createCommentVNode(\" 右侧面板容器 \"), _createElementVNode(\"div\", _hoisted_2, [_createVNode(_component_Form, {\n    model: $setup.form,\n    onFinish: $setup.handleButtonClick\n  }, {\n    default: _withCtx(() => [_createVNode(_component_Row, {\n      gutter: 16\n    }, {\n      default: _withCtx(() => [_createVNode(_component_a_form_item, {\n        label: \"运输车辆容量\",\n        name: \"vehicleCount\",\n        hasFeedback: \"\"\n      }, {\n        default: _withCtx(() => [_createVNode(_component_Input, {\n          value: $setup.form.vehicleCount,\n          \"onUpdate:value\": _cache[0] || (_cache[0] = $event => $setup.form.vehicleCount = $event),\n          placeholder: \"输入大于5的整数\"\n        }, null, 8 /* PROPS */, [\"value\"])]),\n        _: 1 /* STABLE */\n      })]),\n      _: 1 /* STABLE */\n    }), _createVNode(_component_Row, null, {\n      default: _withCtx(() => [_createVNode(_component_a_form_item, null, {\n        default: _withCtx(() => _cache[3] || (_cache[3] = [_createElementVNode(\"button\", {\n          class: \"action-button\"\n        }, \"生成运输方案\", -1 /* HOISTED */)])),\n        _: 1 /* STABLE */\n      })]),\n      _: 1 /* STABLE */\n    })]),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"model\", \"onFinish\"]), _createCommentVNode(\" 表格展示调度数据 \"), _createElementVNode(\"table\", _hoisted_3, [_cache[4] || (_cache[4] = _createElementVNode(\"thead\", null, [_createElementVNode(\"tr\", null, [_createElementVNode(\"th\", null, \"调度ID\"), _createElementVNode(\"th\", null, \"起始点\"), _createElementVNode(\"th\", null, \"终点\"), _createElementVNode(\"th\", null, \"调度数量\"), _createElementVNode(\"th\", null, \"开始调度\")])], -1 /* HOISTED */)), _createElementVNode(\"tbody\", null, [_createCommentVNode(\" 动态渲染表格数据 \"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.currentPageData, (row, index) => {\n    return _openBlock(), _createElementBlock(\"tr\", {\n      key: index\n    }, [_createElementVNode(\"td\", null, _toDisplayString(row.dispatchId), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(row.startPoint), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(row.endPoint), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(row.scheduleAmount), 1 /* TEXT */), _createElementVNode(\"td\", null, [_createElementVNode(\"button\", {\n      onClick: $event => $setup.startDispatch(row.dispatchId),\n      class: \"start-dispatch-button\"\n    }, \" 开始调度 \", 8 /* PROPS */, _hoisted_4)])]);\n  }), 128 /* KEYED_FRAGMENT */))])]), _createCommentVNode(\" 分页控件 \"), _createElementVNode(\"div\", _hoisted_5, [_createElementVNode(\"button\", {\n    onClick: _cache[1] || (_cache[1] = $event => $setup.changePage($setup.currentPage - 1)),\n    disabled: $setup.currentPage <= 1\n  }, \" 上一页 \", 8 /* PROPS */, _hoisted_6), _createElementVNode(\"span\", null, \"第 \" + _toDisplayString($setup.currentPage) + \" 页\", 1 /* TEXT */), _createElementVNode(\"button\", {\n    onClick: _cache[2] || (_cache[2] = $event => $setup.changePage($setup.currentPage + 1)),\n    disabled: $setup.currentPage >= $setup.totalPages\n  }, \" 下一页 \", 8 /* PROPS */, _hoisted_7)])]), _createCommentVNode(\" 小地图容器 \"), _cache[6] || (_cache[6] = _createElementVNode(\"div\", {\n    id: \"overview-map\",\n    style: {\n      \"position\": \"absolute\",\n      \"bottom\": \"10px\",\n      \"right\": \"10px\",\n      \"width\": \"200px\",\n      \"height\": \"150px\",\n      \"border\": \"1px solid #000\",\n      \"z-index\": \"100\"\n    }\n  }, null, -1 /* HOISTED */))]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_createCommentVNode","_createElementVNode","id","_hoisted_2","_createVNode","_component_Form","model","$setup","form","onFinish","handleButtonClick","default","_withCtx","_component_Row","gutter","_component_a_form_item","label","name","hasFeedback","_component_Input","value","vehicleCount","_cache","$event","placeholder","_","_hoisted_3","_Fragment","_renderList","currentPageData","row","index","key","_toDisplayString","dispatchId","startPoint","endPoint","scheduleAmount","onClick","startDispatch","_hoisted_4","_hoisted_5","changePage","currentPage","disabled","_hoisted_6","totalPages","_hoisted_7","style"],"sources":["E:\\code\\Django\\project\\front\\front\\src\\components\\LocationWindow.vue"],"sourcesContent":["<template>\r\n  <div class=\"map-container\">\r\n    <!-- 地图容器 -->\r\n    <div id=\"container\" class=\"map\"></div>\r\n\r\n    <!-- 右侧面板容器 -->\r\n    <div class=\"right-sidebar\">\r\n      <Form :model=\"form\" @finish=\"handleButtonClick\">\r\n        <Row :gutter=\"16\">\r\n          <a-form-item label=\"运输车辆容量\" name=\"vehicleCount\" hasFeedback>\r\n            <Input\r\n              v-model:value=\"form.vehicleCount\"\r\n              placeholder=\"输入大于5的整数\"\r\n            />\r\n          </a-form-item>\r\n        </Row>\r\n        <Row>\r\n          <a-form-item>\r\n            <button class=\"action-button\">生成运输方案</button>\r\n          </a-form-item>\r\n        </Row>\r\n      </Form>\r\n\r\n      <!-- 表格展示调度数据 -->\r\n      <table class=\"data-table\">\r\n        <thead>\r\n          <tr>\r\n            <th>调度ID</th>\r\n            <th>起始点</th>\r\n            <th>终点</th>\r\n            <th>调度数量</th>\r\n            <th>开始调度</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <!-- 动态渲染表格数据 -->\r\n          <tr v-for=\"(row, index) in currentPageData\" :key=\"index\">\r\n            <td>{{ row.dispatchId }}</td>\r\n            <td>{{ row.startPoint }}</td>\r\n            <td>{{ row.endPoint }}</td>\r\n            <td>{{ row.scheduleAmount }}</td>\r\n            <td>\r\n              <button\r\n                @click=\"startDispatch(row.dispatchId)\"\r\n                class=\"start-dispatch-button\"\r\n              >\r\n                开始调度\r\n              </button>\r\n            </td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n\r\n      <!-- 分页控件 -->\r\n      <div class=\"pagination\">\r\n        <button\r\n          @click=\"changePage(currentPage - 1)\"\r\n          :disabled=\"currentPage <= 1\"\r\n        >\r\n          上一页\r\n        </button>\r\n        <span>第 {{ currentPage }} 页</span>\r\n        <button\r\n          @click=\"changePage(currentPage + 1)\"\r\n          :disabled=\"currentPage >= totalPages\"\r\n        >\r\n          下一页\r\n        </button>\r\n      </div>\r\n    </div>\r\n    <!-- 小地图容器 -->\r\n    <div\r\n      id=\"overview-map\"\r\n      style=\"\r\n        position: absolute;\r\n        bottom: 10px;\r\n        right: 10px;\r\n        width: 200px;\r\n        height: 150px;\r\n        border: 1px solid #000;\r\n        z-index: 100;\r\n      \"\r\n    ></div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, onMounted, computed, nextTick } from \"vue\";\r\nimport { getRanderingSorted } from \"@/api/rendering\"; // 假设你的接口方法\r\nimport { getCenterPointRegister, topPathRegister } from \"@/api/function\";\r\nimport { Form, Input, Row } from \"ant-design-vue\";\r\n\r\nexport default {\r\n  name: \"MapWindow\",\r\n  components: {\r\n    \"a-form-item\": Form.Item,\r\n    Form,\r\n    Input,\r\n    Row,\r\n  },\r\n\r\n  setup() {\r\n    const map = ref(null);\r\n    const polygons = ref([]); // 存储多边形\r\n    const tableData = ref([]); // 存储表格数据\r\n    const markers = ref([]); // 存储标记\r\n    const navigationData = ref([]); // 存储导航数据\r\n    const one = ref([]);\r\n    let overviewMap = null; // 小地图变量\r\n    let overviewRect = null; // 用于小地图中的框\r\n\r\n    // 分页参数\r\n    const currentPage = ref(1); // 当前页\r\n    const pageSize = ref(5); // 每页显示的数量\r\n\r\n    // 初始化表单对象\r\n    const form = ref({\r\n      vehicleCount: \"\", // 表单中的运输车辆容量\r\n    });\r\n\r\n    // 加载并初始化地图\r\n    const loadAMapApi = () => {\r\n      window._AMapSecurityConfig = {\r\n        securityJsCode: \"e81516c693797208565e290f0cc83b6e\", // 替换为你的安全密钥\r\n      };\r\n      const script = document.createElement(\"script\");\r\n      script.type = \"text/javascript\";\r\n      script.src =\r\n        \"https://webapi.amap.com/maps?v=2.0&key=a6042dfaa8137c1bd9f59034cd3021a3\"; // 请替换为有效的高德地图API Key\r\n      document.head.appendChild(script);\r\n\r\n      script.onload = () => {\r\n        initMap();\r\n      };\r\n    };\r\n\r\n    const initMap = () => {\r\n      const layer = new AMap.createDefaultLayer({\r\n        zooms: [3, 20],\r\n        visible: true,\r\n        opacity: 1,\r\n        zIndex: 0,\r\n      });\r\n\r\n      map.value = new AMap.Map(\"container\", {\r\n        viewMode: \"2D\",\r\n        zoom: 16.3,\r\n        center: [113.266949, 35.188365],\r\n        layer: [layer],\r\n      });\r\n\r\n      // 加载驾车插件\r\n      AMap.plugin([\"AMap.Driving\"], () => {\r\n        console.log(\"Driving plugin loaded successfully\");\r\n      });\r\n    };\r\n\r\n    // 获取并渲染数据\r\n    onMounted(async () => {\r\n      try {\r\n        const response = await getRanderingSorted();\r\n        if (response.data.code === 0 && Array.isArray(response.data.data)) {\r\n          const formattedPolygons = response.data.data.map((item) => {\r\n            const coordinates = item.coordinates;\r\n            const polygon = new AMap.Polygon({\r\n              path: coordinates,\r\n              fillColor: \"#ccebc5\",\r\n              strokeOpacity: 1,\r\n              fillOpacity: 0.5,\r\n              strokeColor: \"#2b8cbe\",\r\n              strokeWeight: 1,\r\n              strokeStyle: \"dashed\",\r\n              strokeDasharray: [5, 5],\r\n            });\r\n            return polygon;\r\n          });\r\n\r\n          polygons.value = formattedPolygons;\r\n\r\n          // 延迟添加多边形到地图\r\n          setTimeout(() => {\r\n            addPolygonsToMap(polygons.value);\r\n          }, 500);\r\n\r\n          // 初始化鹰眼图\r\n          nextTick(() => {\r\n            initOverviewMap();\r\n          });\r\n        } else {\r\n          console.error(\"Invalid data format\", response.data);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error fetching polygons:\", error);\r\n      }\r\n    });\r\n\r\n    // 初始化小地图（鹰眼图）\r\n    const initOverviewMap = () => {\r\n      overviewMap = new AMap.Map(\"overview-map\", {\r\n        zoom: 13.5, // 设置鹰眼图缩放级别\r\n        center: map.value.getCenter(), // 设置小地图中心点为大地图中心\r\n        viewMode: \"2D\", // 小地图模式\r\n        zooms: [3, 15], // 小地图缩放级别\r\n      });\r\n\r\n      // 小地图上的框，用于显示大地图的显示区域\r\n      overviewRect = new AMap.Rectangle({\r\n        bounds: map.value.getBounds(),\r\n        strokeColor: \"#F00\",\r\n        strokeWeight: 2,\r\n        fillOpacity: 0.3,\r\n        fillColor: \"#FF0\",\r\n      });\r\n      overviewMap.add(overviewRect);\r\n\r\n      // 监听大地图的移动事件，更新小地图视图\r\n      map.value.on(\"move\", () => {\r\n        const center = map.value.getCenter();\r\n        overviewMap.setCenter(center); // 更新小地图中心\r\n        updateOverviewRect(); // 更新小地图的显示框\r\n      });\r\n\r\n      // 监听大地图的缩放事件，更新小地图的框\r\n      map.value.on(\"zoomend\", () => {\r\n        updateOverviewRect(); // 更新显示框\r\n      });\r\n\r\n      // 监听鼠标的移动事件\r\n      map.value.on(\"mousemove\", () => {\r\n        updateOverviewRect(); // 鼠标移动时，更新小地图框\r\n      });\r\n    };\r\n\r\n    // 更新小地图上的显示框\r\n    const updateOverviewRect = () => {\r\n      const bounds = map.value.getBounds();\r\n      overviewRect.setBounds(bounds); // 设置小地图上的框为大地图当前显示区域\r\n    };\r\n\r\n    const centerPointRegisters = async () => {\r\n      try {\r\n        const response = await getCenterPointRegister();\r\n        if (response.data.code === 0 && Array.isArray(response.data.data)) {\r\n          const bicycles = response.data.data;\r\n          setTimeout(() => {\r\n            addMarkersToMap(bicycles);\r\n          }, 500);\r\n        } else {\r\n          console.error(\"Invalid bicycle data format\", response.data);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error fetching bicycles:\", error);\r\n      }\r\n    };\r\n\r\n    // 将多边形添加到地图\r\n    const addPolygonsToMap = (polygons) => {\r\n      if (Array.isArray(polygons)) {\r\n        polygons.forEach((polygon) => {\r\n          if (polygon instanceof AMap.Polygon) {\r\n            map.value.add(polygon);\r\n          } else {\r\n            console.error(\"Invalid polygon item\", polygon);\r\n          }\r\n        });\r\n      } else {\r\n        console.error(\"Polygons is not an array:\", polygons);\r\n      }\r\n    };\r\n\r\n    // 将自行车点添加到地图\r\n    const addMarkersToMap = (bicycles) => {\r\n      if (Array.isArray(bicycles)) {\r\n        bicycles.forEach((bicycle) => {\r\n          const { id, polygon_center } = bicycle;\r\n          const marker = new AMap.Marker({\r\n            position: new AMap.LngLat(polygon_center[0], polygon_center[1]), // 设置点的坐标\r\n            title: `Bicycle ID: ${id}`, // 设置点的标题为 ID\r\n          });\r\n          markers.value.push(marker); // 将每个点标记保存到 markers 数组\r\n          map.value.add(marker); // 添加标记到地图\r\n        });\r\n      }\r\n    };\r\n\r\n    const handleButtonClick = async () => {\r\n      try {\r\n        const response = await topPathRegister({\r\n          capacity: form.value.vehicleCount, // 从表单获取车辆容量\r\n        });\r\n\r\n        console.log(\"API Response:\", response.data); // 打印返回的数据\r\n\r\n        // 检查 response.data.data 是否是数组\r\n        if (response.data && Array.isArray(response.data.data)) {\r\n          const allData = response.data.data;\r\n\r\n          // 更新表格数据\r\n          tableData.value = allData.map((item) => ({\r\n            dispatchId: item.dispatch_count, // 调度数量\r\n            startPoint: item.from, // 起始点\r\n            endPoint: item.to, // 终点\r\n            scheduleAmount: item.transfer_amount, // 调度数量\r\n          }));\r\n\r\n          // 更新导航数据\r\n          navigationData.value = allData.map((item) => ({\r\n            dispatchId: item.dispatch_count,\r\n            startCoords: item.fromPoint, // 起始点坐标\r\n            endCoords: item.toPoint, // 终止点坐标\r\n          }));\r\n        } else {\r\n          console.error(\"response.data.data is not an array:\", response.data);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error fetching schedule data:\", error);\r\n      }\r\n    };\r\n\r\n    // 开始调度\r\n    const startDispatch = async (dispatchId) => {\r\n      try {\r\n        console.log(\"dispatchId:\", dispatchId);\r\n        console.log(\"navigationData.value:\", navigationData.value); // 打印导航数据\r\n\r\n        // 清除上一次的路线和标记\r\n        clearLastRoute();\r\n\r\n        // 找到对应的导航数据\r\n        const navigation = navigationData.value.find(\r\n          (item) => item.dispatchId === dispatchId\r\n        );\r\n\r\n        if (navigation) {\r\n          const { startCoords, endCoords } = navigation;\r\n\r\n          // 检查坐标是否有效\r\n          if (!startCoords || !endCoords) {\r\n            console.error(\"起点或终点坐标无效:\", navigation);\r\n            return;\r\n          }\r\n\r\n          // 确保坐标为有效的 [longitude, latitude] 数组\r\n          if (\r\n            !Array.isArray(startCoords) ||\r\n            !Array.isArray(endCoords) ||\r\n            startCoords.length !== 2 ||\r\n            endCoords.length !== 2\r\n          ) {\r\n            console.error(\"坐标数据无效:\", navigation);\r\n            return;\r\n          }\r\n\r\n          const startLngLat = new AMap.LngLat(startCoords[0], startCoords[1]);\r\n          const endLngLat = new AMap.LngLat(endCoords[0], endCoords[1]);\r\n\r\n          // 确保高德地图插件已加载\r\n          if (window.AMap && window.AMap.Driving) {\r\n            const driving = new AMap.Driving({\r\n              map: map.value, // 地图对象\r\n              panel: null, // 可以设置为显示信息的面板\r\n              policy: AMap.DrivingPolicy.LEAST_TIME, // 选择最短时间路线\r\n            });\r\n\r\n            // 设置起点和终点\r\n            driving.search(startLngLat, endLngLat, (status, result) => {\r\n              if (status === \"complete\") {\r\n                console.log(\"导航成功:\", result);\r\n                one.value.push(driving);\r\n                console.log(one.value);\r\n              } else {\r\n                console.error(\"导航失败:\", result);\r\n              }\r\n            });\r\n          } else {\r\n            console.error(\"AMap.Driving 插件未加载.\");\r\n          }\r\n        } else {\r\n          console.error(\"未找到对应的导航数据:\", dispatchId);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"调度启动失败\", error);\r\n      }\r\n    };\r\n\r\n    // 分页：计算当前页的数据\r\n    const currentPageData = computed(() => {\r\n      const start = (currentPage.value - 1) * pageSize.value;\r\n      const end = currentPage.value * pageSize.value;\r\n      return tableData.value.slice(start, end);\r\n    });\r\n\r\n    // 计算总页数\r\n    const totalPages = computed(() => {\r\n      return Math.ceil(tableData.value.length / pageSize.value);\r\n    });\r\n\r\n    // 改变页面\r\n    const changePage = (newPage) => {\r\n      if (newPage >= 1 && newPage <= totalPages.value) {\r\n        currentPage.value = newPage;\r\n      }\r\n    };\r\n\r\n    // 清除上一次的导航路径和标记\r\n    function clearLastRoute() {\r\n      if (Array.isArray(one.value) && one.value.length > 0) {\r\n        one.value.forEach((driving) => {\r\n          if (driving && map.value) {\r\n            driving.clear(); // 清理路线\r\n            console.log(\"Cleared route:\", driving);\r\n          }\r\n        });\r\n      }\r\n      one.value = []; // 清理完毕后再重置\r\n    }\r\n\r\n    // 加载并初始化地图 API\r\n    onMounted(() => {\r\n      loadAMapApi();\r\n      centerPointRegisters();\r\n    });\r\n\r\n    return {\r\n      map,\r\n      polygons,\r\n      tableData, // 表格数据\r\n      handleButtonClick,\r\n      startDispatch,\r\n      form,\r\n      currentPageData,\r\n      currentPage,\r\n      totalPages,\r\n      changePage,\r\n    };\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\nhtml,\r\nbody,\r\n#container {\r\n  margin: 0;\r\n  padding: 0;\r\n  height: 100%;\r\n}\r\n\r\n.map-container {\r\n  display: flex;\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n\r\n.map {\r\n  flex-grow: 1;\r\n  height: 100%;\r\n}\r\n\r\n.right-sidebar {\r\n  width: 450px;\r\n  background-color: #fff;\r\n  padding: 20px;\r\n  border-radius: 10px;\r\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);\r\n  overflow-y: auto;\r\n}\r\n\r\n.action-button {\r\n  width: 100%;\r\n  padding: 10px;\r\n  background-color: #4caf50;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 5px;\r\n  font-size: 16px;\r\n  cursor: pointer;\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.action-button:hover {\r\n  background-color: #45a049;\r\n}\r\n\r\n.data-table {\r\n  width: 100%;\r\n  border-collapse: collapse;\r\n}\r\n\r\n.data-table th,\r\n.data-table td {\r\n  border: 1px solid #ddd;\r\n  padding: 8px;\r\n  text-align: left;\r\n}\r\n\r\n.data-table th {\r\n  background-color: #f2f2f2;\r\n}\r\n\r\n.start-dispatch-button {\r\n  padding: 5px 10px;\r\n  background-color: #008cba;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n}\r\n\r\n.start-dispatch-button:hover {\r\n  background-color: #007b9f;\r\n}\r\n\r\n/* 分页器样式 */\r\n.pagination {\r\n  display: flex;\r\n  justify-content: center;\r\n  margin-top: 10px;\r\n}\r\n\r\n.pagination button {\r\n  padding: 5px 10px;\r\n  margin: 0 10px;\r\n  background-color: #007b9f;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n}\r\n\r\n.pagination button[disabled] {\r\n  background-color: #d3d3d3;\r\n  cursor: not-allowed;\r\n}\r\n\r\n.map-control button {\r\n  background-color: #fff;\r\n  border: 1px solid #ccc;\r\n  padding: 8px 12px;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  font-size: 14px;\r\n  transition: background-color 0.3s;\r\n  color: #000;\r\n}\r\n\r\n.map-control button:hover {\r\n  background-color: #f0f0f0;\r\n}\r\n\r\n.map-control button.active {\r\n  background-color: #2b8cbe;\r\n  color: #fff;\r\n  border-color: #2b8cbe;\r\n}\r\n\r\n#overview-map {\r\n  position: absolute;\r\n  top: 10px;\r\n  right: 10px; /* 保持右上角 */\r\n  width: 200px;\r\n  height: 150px;\r\n  border: 1px solid #000;\r\n  z-index: 100;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport { ref, onMounted } from \"vue\";\nimport { getRanderingSorted } from \"@/api/rendering\"; // 假设你的接口方法\nimport { getCenterPointRegister, topPathRegister } from \"@/api/function\";\nimport { Form, Input, Row } from \"ant-design-vue\";\nexport default {\n  name: \"MapWindow\",\n  components: {\n    \"a-form-item\": Form.Item,\n    Form,\n    Input,\n    Row\n  },\n  setup() {\n    const map = ref(null);\n    const polygons = ref([]);\n    const tableData = ref([]); // 存储表格数据\n    const markers = ref([]);\n\n    // 初始化表单对象\n    const form = ref({\n      vehicleCount: \"\" // 火灾车辆\n    });\n\n    // 加载并初始化地图\n    const loadAMapApi = () => {\n      const script = document.createElement(\"script\");\n      script.type = \"text/javascript\";\n      script.src = \"https://webapi.amap.com/maps?v=2.0&key=a6042dfaa8137c1bd9f59034cd3021a3\";\n      document.head.appendChild(script);\n      script.onload = () => {\n        initMap();\n      };\n    };\n    const initMap = () => {\n      const layer = new AMap.createDefaultLayer({\n        zooms: [3, 20],\n        visible: true,\n        opacity: 1,\n        zIndex: 0\n      });\n      map.value = new AMap.Map(\"container\", {\n        viewMode: \"2D\",\n        zoom: 16.3,\n        center: [113.266949, 35.188365],\n        layer: [layer]\n      });\n    };\n\n    // 获取并渲染数据\n    onMounted(async () => {\n      try {\n        const response = await getRanderingSorted();\n        if (response.data.code === 0 && Array.isArray(response.data.data)) {\n          const formattedPolygons = response.data.data.map(item => {\n            const coordinates = item.coordinates;\n            const polygon = new AMap.Polygon({\n              path: coordinates,\n              fillColor: \"#ccebc5\",\n              strokeOpacity: 1,\n              fillOpacity: 0.5,\n              strokeColor: \"#2b8cbe\",\n              strokeWeight: 1,\n              strokeStyle: \"dashed\",\n              strokeDasharray: [5, 5]\n            });\n            return polygon;\n          });\n          polygons.value = formattedPolygons;\n\n          // 延迟添加多边形到地图\n          setTimeout(() => {\n            addPolygonsToMap(polygons.value);\n          }, 500);\n        } else {\n          console.error(\"Invalid data format\", response.data);\n        }\n      } catch (error) {\n        console.error(\"Error fetching polygons:\", error);\n      }\n    });\n    const centerPointRegisters = async () => {\n      try {\n        const response = await getCenterPointRegister();\n        // console.log(\"Bicycles Response:\", response.data);\n\n        if (response.data.code === 0 && Array.isArray(response.data.data)) {\n          const bicycles = response.data.data;\n          console.log(bicycles);\n          // 延迟添加点到地图\n          setTimeout(() => {\n            addMarkersToMap(bicycles);\n          }, 500);\n        } else {\n          console.error(\"Invalid bicycle data format\", response.data);\n        }\n      } catch (error) {\n        console.error(\"Error fetching bicycles:\", error);\n      }\n    };\n\n    // 将多边形添加到地图\n    const addPolygonsToMap = polygons => {\n      if (Array.isArray(polygons)) {\n        polygons.forEach(polygon => {\n          if (polygon instanceof AMap.Polygon) {\n            map.value.add(polygon);\n          } else {\n            console.error(\"Invalid polygon item\", polygon);\n          }\n        });\n      } else {\n        console.error(\"Polygons is not an array:\", polygons);\n      }\n    };\n\n    // 将自行车点添加到地图\n    const addMarkersToMap = bicycles => {\n      if (Array.isArray(bicycles)) {\n        bicycles.forEach(bicycle => {\n          const {\n            id,\n            polygon_center\n          } = bicycle;\n          const marker = new AMap.Marker({\n            position: new AMap.LngLat(polygon_center[0], polygon_center[1]),\n            // 设置点的坐标\n            title: `Bicycle ID: ${id}` // 设置点的标题为 ID\n          });\n          markers.value.push(marker); // 将每个点标记保存到 markers 数组\n          map.value.add(marker); // 添加标记到地图\n        });\n      }\n    };\n\n    // 请求并更新表格数据\n    const handleButtonClick = async () => {\n      try {\n        const response = await topPathRegister({\n          capacity: from.value.vehicleCount\n        });\n        if (response.data.code === 0 && Array.isArray(response.data.data)) {\n          // 更新表格数据\n          tableData.value = response.data.data.map(item => ({\n            dispatchId: item.dispatchId,\n            startPoint: item.startPoint,\n            endPoint: item.endPoint,\n            scheduleAmount: item.scheduleAmount\n          }));\n        } else {\n          console.error(\"Invalid data format\", response.data);\n        }\n      } catch (error) {\n        console.error(\"Error fetching schedule data:\", error);\n      }\n    };\n\n    // 开始调度\n    const startDispatch = async dispatchId => {\n      try {\n        // 发起调度请求\n        const response = await fetch(`/api/start-dispatch/${dispatchId}`, {\n          method: \"POST\"\n        });\n        const data = await response.json();\n        if (data.success) {\n          alert(`调度 ${dispatchId} 已成功启动！`);\n        } else {\n          alert(`调度 ${dispatchId} 启动失败，请重试！`);\n        }\n      } catch (error) {\n        console.error(\"调度启动失败\", error);\n      }\n    };\n\n    // 加载并初始化地图 API\n    onMounted(() => {\n      loadAMapApi();\n      centerPointRegisters();\n    });\n    return {\n      map,\n      polygons,\n      tableData,\n      handleButtonClick,\n      startDispatch,\n      form\n    };\n  }\n};","map":{"version":3,"names":["ref","onMounted","getRanderingSorted","getCenterPointRegister","topPathRegister","Form","Input","Row","name","components","Item","setup","map","polygons","tableData","markers","form","vehicleCount","loadAMapApi","script","document","createElement","type","src","head","appendChild","onload","initMap","layer","AMap","createDefaultLayer","zooms","visible","opacity","zIndex","value","Map","viewMode","zoom","center","response","data","code","Array","isArray","formattedPolygons","item","coordinates","polygon","Polygon","path","fillColor","strokeOpacity","fillOpacity","strokeColor","strokeWeight","strokeStyle","strokeDasharray","setTimeout","addPolygonsToMap","console","error","centerPointRegisters","bicycles","log","addMarkersToMap","forEach","add","bicycle","id","polygon_center","marker","Marker","position","LngLat","title","push","handleButtonClick","capacity","from","dispatchId","startPoint","endPoint","scheduleAmount","startDispatch","fetch","method","json","success","alert"],"sources":["E:\\code\\Django\\project\\front\\front\\src\\components\\LocationWindow.vue"],"sourcesContent":["<template>\r\n  <div class=\"map-container\">\r\n    <!-- 地图容器 -->\r\n    <div id=\"container\" class=\"map\"></div>\r\n\r\n    <!-- 右侧面板容器 -->\r\n    <div class=\"right-sidebar\">\r\n      <!-- <button @click=\"handleButtonClick\" class=\"action-button\">\r\n        请求调度数据\r\n      </button> -->\r\n      <Form :model=\"form\" @finish=\"handleButtonClick\">\r\n        <Row :gutter=\"16\">\r\n          <a-form-item label=\"运输车辆容量\" name=\"vehicleCount\" hasFeedback>\r\n            <Input v-model:value=\"form.vehicleCount\" placeholder=\"电车编号\" />\r\n          </a-form-item>\r\n        </Row>\r\n        <Row>\r\n          <a-form-item>\r\n            <button class=\"action-button\">生成缓冲区预警</button>\r\n          </a-form-item>\r\n        </Row>\r\n      </Form>\r\n\r\n      <!-- 表格展示调度数据 -->\r\n      <table class=\"data-table\">\r\n        <thead>\r\n          <tr>\r\n            <th>调度ID</th>\r\n            <th>起始点</th>\r\n            <th>终点</th>\r\n            <th>调度数量</th>\r\n            <th>开始调度</th>\r\n            <!-- 新增的列 -->\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <!-- 动态渲染表格数据 -->\r\n          <tr v-for=\"(row, index) in tableData\" :key=\"index\">\r\n            <td>{{ row.dispatchId }}</td>\r\n            <td>{{ row.startPoint }}</td>\r\n            <td>{{ row.endPoint }}</td>\r\n            <td>{{ row.scheduleAmount }}</td>\r\n            <td>\r\n              <button\r\n                @click=\"startDispatch(row.dispatchId)\"\r\n                class=\"start-dispatch-button\"\r\n              >\r\n                开始调度\r\n              </button>\r\n            </td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, onMounted } from \"vue\";\r\nimport { getRanderingSorted } from \"@/api/rendering\"; // 假设你的接口方法\r\nimport { getCenterPointRegister, topPathRegister } from \"@/api/function\";\r\nimport { Form, Input, Row } from \"ant-design-vue\";\r\n\r\nexport default {\r\n  name: \"MapWindow\",\r\n  components: {\r\n    \"a-form-item\": Form.Item,\r\n    Form,\r\n    Input,\r\n    Row,\r\n  },\r\n\r\n  setup() {\r\n    const map = ref(null);\r\n    const polygons = ref([]);\r\n    const tableData = ref([]); // 存储表格数据\r\n    const markers = ref([]);\r\n\r\n    // 初始化表单对象\r\n    const form = ref({\r\n      vehicleCount: \"\", // 火灾车辆\r\n    });\r\n\r\n    // 加载并初始化地图\r\n    const loadAMapApi = () => {\r\n      const script = document.createElement(\"script\");\r\n      script.type = \"text/javascript\";\r\n      script.src =\r\n        \"https://webapi.amap.com/maps?v=2.0&key=a6042dfaa8137c1bd9f59034cd3021a3\";\r\n      document.head.appendChild(script);\r\n\r\n      script.onload = () => {\r\n        initMap();\r\n      };\r\n    };\r\n\r\n    const initMap = () => {\r\n      const layer = new AMap.createDefaultLayer({\r\n        zooms: [3, 20],\r\n        visible: true,\r\n        opacity: 1,\r\n        zIndex: 0,\r\n      });\r\n\r\n      map.value = new AMap.Map(\"container\", {\r\n        viewMode: \"2D\",\r\n        zoom: 16.3,\r\n        center: [113.266949, 35.188365],\r\n        layer: [layer],\r\n      });\r\n    };\r\n\r\n    // 获取并渲染数据\r\n    onMounted(async () => {\r\n      try {\r\n        const response = await getRanderingSorted();\r\n        if (response.data.code === 0 && Array.isArray(response.data.data)) {\r\n          const formattedPolygons = response.data.data.map((item) => {\r\n            const coordinates = item.coordinates;\r\n            const polygon = new AMap.Polygon({\r\n              path: coordinates,\r\n              fillColor: \"#ccebc5\",\r\n              strokeOpacity: 1,\r\n              fillOpacity: 0.5,\r\n              strokeColor: \"#2b8cbe\",\r\n              strokeWeight: 1,\r\n              strokeStyle: \"dashed\",\r\n              strokeDasharray: [5, 5],\r\n            });\r\n            return polygon;\r\n          });\r\n\r\n          polygons.value = formattedPolygons;\r\n\r\n          // 延迟添加多边形到地图\r\n          setTimeout(() => {\r\n            addPolygonsToMap(polygons.value);\r\n          }, 500);\r\n        } else {\r\n          console.error(\"Invalid data format\", response.data);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error fetching polygons:\", error);\r\n      }\r\n    });\r\n\r\n    const centerPointRegisters = async () => {\r\n      try {\r\n        const response = await getCenterPointRegister();\r\n        // console.log(\"Bicycles Response:\", response.data);\r\n\r\n        if (response.data.code === 0 && Array.isArray(response.data.data)) {\r\n          const bicycles = response.data.data;\r\n          console.log(bicycles);\r\n          // 延迟添加点到地图\r\n          setTimeout(() => {\r\n            addMarkersToMap(bicycles);\r\n          }, 500);\r\n        } else {\r\n          console.error(\"Invalid bicycle data format\", response.data);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error fetching bicycles:\", error);\r\n      }\r\n    };\r\n\r\n    // 将多边形添加到地图\r\n    const addPolygonsToMap = (polygons) => {\r\n      if (Array.isArray(polygons)) {\r\n        polygons.forEach((polygon) => {\r\n          if (polygon instanceof AMap.Polygon) {\r\n            map.value.add(polygon);\r\n          } else {\r\n            console.error(\"Invalid polygon item\", polygon);\r\n          }\r\n        });\r\n      } else {\r\n        console.error(\"Polygons is not an array:\", polygons);\r\n      }\r\n    };\r\n\r\n    // 将自行车点添加到地图\r\n    const addMarkersToMap = (bicycles) => {\r\n      if (Array.isArray(bicycles)) {\r\n        bicycles.forEach((bicycle) => {\r\n          const { id, polygon_center } = bicycle;\r\n          const marker = new AMap.Marker({\r\n            position: new AMap.LngLat(polygon_center[0], polygon_center[1]), // 设置点的坐标\r\n            title: `Bicycle ID: ${id}`, // 设置点的标题为 ID\r\n          });\r\n          markers.value.push(marker); // 将每个点标记保存到 markers 数组\r\n          map.value.add(marker); // 添加标记到地图\r\n        });\r\n      }\r\n    };\r\n\r\n    // 请求并更新表格数据\r\n    const handleButtonClick = async () => {\r\n      try {\r\n        const response = await topPathRegister({\r\n          capacity: from.value.vehicleCount,\r\n        });\r\n        if (response.data.code === 0 && Array.isArray(response.data.data)) {\r\n          // 更新表格数据\r\n          tableData.value = response.data.data.map((item) => ({\r\n            dispatchId: item.dispatchId,\r\n            startPoint: item.startPoint,\r\n            endPoint: item.endPoint,\r\n            scheduleAmount: item.scheduleAmount,\r\n          }));\r\n        } else {\r\n          console.error(\"Invalid data format\", response.data);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error fetching schedule data:\", error);\r\n      }\r\n    };\r\n\r\n    // 开始调度\r\n    const startDispatch = async (dispatchId) => {\r\n      try {\r\n        // 发起调度请求\r\n        const response = await fetch(`/api/start-dispatch/${dispatchId}`, {\r\n          method: \"POST\",\r\n        });\r\n        const data = await response.json();\r\n        if (data.success) {\r\n          alert(`调度 ${dispatchId} 已成功启动！`);\r\n        } else {\r\n          alert(`调度 ${dispatchId} 启动失败，请重试！`);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"调度启动失败\", error);\r\n      }\r\n    };\r\n\r\n    // 加载并初始化地图 API\r\n    onMounted(() => {\r\n      loadAMapApi();\r\n      centerPointRegisters();\r\n    });\r\n\r\n    return {\r\n      map,\r\n      polygons,\r\n      tableData,\r\n      handleButtonClick,\r\n      startDispatch,\r\n      form,\r\n    };\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\nhtml,\r\nbody,\r\n#container {\r\n  margin: 0;\r\n  padding: 0;\r\n  height: 100%;\r\n}\r\n\r\n.map-container {\r\n  display: flex;\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n\r\n.map {\r\n  flex-grow: 1;\r\n  height: 100%;\r\n}\r\n\r\n.right-sidebar {\r\n  width: 450px; /* 固定宽度的右侧面板 */\r\n  background-color: #fff;\r\n  padding: 20px;\r\n  border-radius: 10px;\r\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);\r\n  overflow-y: auto;\r\n}\r\n\r\n.action-button {\r\n  width: 100%;\r\n  padding: 10px;\r\n  background-color: #4caf50;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 5px;\r\n  font-size: 16px;\r\n  cursor: pointer;\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.action-button:hover {\r\n  background-color: #45a049;\r\n}\r\n\r\n.data-table {\r\n  width: 100%;\r\n  border-collapse: collapse;\r\n}\r\n\r\n.data-table th,\r\n.data-table td {\r\n  border: 1px solid #ddd;\r\n  padding: 8px;\r\n  text-align: left;\r\n}\r\n\r\n.data-table th {\r\n  background-color: #f2f2f2;\r\n}\r\n\r\n.start-dispatch-button {\r\n  padding: 5px 10px;\r\n  background-color: #008cba;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n}\r\n\r\n.start-dispatch-button:hover {\r\n  background-color: #007b9f;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
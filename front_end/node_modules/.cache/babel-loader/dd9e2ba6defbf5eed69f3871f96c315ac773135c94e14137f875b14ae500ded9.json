{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  id: \"container\",\n  style: {\n    \"width\": \"100%\",\n    \"height\": \"100%\"\n  }\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1);\n}","map":{"version":3,"names":["id","style","_createElementBlock","_hoisted_1"],"sources":["E:\\code\\Django\\project\\front\\front\\src\\components\\NearbyTramsWindow.vue"],"sourcesContent":["<template>\r\n  <div id=\"container\" style=\"width: 100%; height: 100%\"></div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, onMounted } from \"vue\";\r\nimport { getRanderingSorted } from \"@/api/rendering\";\r\nexport default {\r\n  name: \"MapWindow\",\r\n  setup() {\r\n    // 使用 ref 定义响应式数据\r\n    const map = ref(null);\r\n    const polygon = ref([]);\r\n\r\n    // 在组件挂载时加载高德地图API\r\n    onMounted(() => {\r\n      loadAMapApi();\r\n    });\r\n\r\n    // 加载高德地图API\r\n    const loadAMapApi = () => {\r\n      const script = document.createElement(\"script\");\r\n      script.type = \"text/javascript\";\r\n      script.src =\r\n        \"https://webapi.amap.com/maps?v=2.0&key=a6042dfaa8137c1bd9f59034cd3021a3\";\r\n      document.head.appendChild(script);\r\n\r\n      script.onload = () => {\r\n        initMap();\r\n      };\r\n    };\r\n\r\n    // 初始化地图\r\n    const initMap = () => {\r\n      const layer = new AMap.createDefaultLayer({\r\n        zooms: [3, 20], // 可见级别\r\n        visible: true, // 是否可见\r\n        opacity: 1, // 透明度\r\n        zIndex: 0, // 叠加层级\r\n      });\r\n\r\n      map.value = new AMap.Map(\"container\", {\r\n        viewMode: \"2D\", // 默认使用 2D 模式\r\n        zoom: 16.3, // 地图级别\r\n        center: [113.266949, 35.188365], // 地图中心点\r\n        layer: [layer],\r\n      });\r\n\r\n      const Valid_area = [\r\n        [\r\n          [\r\n            [113.256395, 35.190641],\r\n            [113.257839, 35.183192],\r\n            [113.258212, 35.182905],\r\n            [113.258597, 35.18288],\r\n            [113.276622, 35.185157],\r\n            [113.274351, 35.196294],\r\n            [113.274176, 35.196435],\r\n            [113.273903, 35.196433],\r\n            [113.27348, 35.196239],\r\n            [113.271625, 35.194724],\r\n            [113.270753, 35.193288],\r\n            [113.267986, 35.192422],\r\n            [113.261557, 35.191206],\r\n            [113.256395, 35.190641],\r\n          ],\r\n        ],\r\n      ];\r\n\r\n      polygon.value = new AMap.Polygon({\r\n        path: Valid_area, // 多边形路径\r\n        fillColor: \"#ccebc5\", // 多边形填充颜色\r\n        strokeOpacity: 1, // 线条透明度\r\n        fillOpacity: 0.5, // 填充透明度\r\n        strokeColor: \"#2b8cbe\", // 线条颜色\r\n        strokeWeight: 1, // 线条宽度\r\n        strokeStyle: \"dashed\", // 线样式\r\n        strokeDasharray: [5, 5], // 轮廓的虚线和间隙的样式\r\n      });\r\n\r\n      polygon.value.on(\"mouseover\", () => {\r\n        polygon.value.setOptions({\r\n          fillOpacity: 0.1, // 多边形填充透明度\r\n          fillColor: \"#7bccc4\",\r\n        });\r\n      });\r\n\r\n      // 添加多边形到地图\r\n      map.value.add(polygon.value);\r\n\r\n      // 监听缩放级别的变化\r\n      map.value.on(\"zoomchange\", () => {\r\n        handleZoomChange();\r\n      });\r\n    };\r\n\r\n    // 处理缩放级别变化\r\n    const handleZoomChange = () => {\r\n      const zoomLevel = map.value.getZoom();\r\n\r\n      // 设置缩放级别阈值\r\n      const threshold = 17;\r\n\r\n      // 根据缩放级别显示或隐藏多边形\r\n      if (zoomLevel > threshold) {\r\n        polygon.value.setMap(null); // 隐藏多边形\r\n      } else {\r\n        polygon.value.setMap(map.value); // 显示多边形\r\n      }\r\n    };\r\n\r\n    onMounted(async () => {\r\n      try {\r\n        const response = await getRanderingSorted();\r\n        console.log(\"Received response:\", response.data); // 输出完整的返回数据\r\n\r\n        if (response.data.code === 0 && response.data.data.features) {\r\n          const formattedData = response.data.data.features.map((feature) => {\r\n            // 提取 coordinates 数据\r\n            const coordinates = feature.geometry.coordinates[0].map((coord) => {\r\n              return [coord[0], coord[1]]; // 转换为 [longitude, latitude] 格式\r\n            });\r\n\r\n            // 创建 AMap.Polygon 对象\r\n            return new AMap.Polygon({\r\n              path: coordinates,\r\n              fillColor: \"#ccebc5\", // 填充颜色\r\n              strokeOpacity: 1, // 线条透明度\r\n              fillOpacity: 0.5, // 填充透明度\r\n              strokeColor: \"#2b8cbe\", // 线条颜色\r\n              strokeWeight: 1, // 线条宽度\r\n              strokeStyle: \"dashed\", // 线样式\r\n              strokeDasharray: [5, 5], // 虚线样式\r\n            });\r\n          });\r\n\r\n          polygon.value = formattedData;\r\n\r\n          // 确保地图已初始化才添加多边形\r\n          if (map.value) {\r\n            addPolygonsToMap(polygon.value);\r\n          } else {\r\n            console.error(\"Map is not initialized yet.\");\r\n          }\r\n        } else {\r\n          console.error(\"Invalid data format\", response.data);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error fetching polygons:\", error); // 捕获到的错误信息\r\n        alert(\r\n          \"An error occurred while fetching polygons. Please check the console for more details.\"\r\n        );\r\n      }\r\n    });\r\n\r\n    const addPolygonsToMap = (polygons) => {\r\n      // 确保 map 已初始化\r\n      if (map.value) {\r\n        polygons.forEach((polygonItem) => {\r\n          map.value.add(polygonItem); // 添加多边形到地图\r\n        });\r\n      } else {\r\n        console.error(\"Map object is null, cannot add polygons.\");\r\n      }\r\n    };\r\n\r\n    // 返回需要暴露的响应式变量和方法\r\n    return {\r\n      map,\r\n      polygon,\r\n    };\r\n  },\r\n};\r\n</script>\r\n\r\n<style>\r\nhtml,\r\nbody,\r\n#container {\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n\r\n.amap-logo {\r\n  display: none !important;\r\n}\r\n\r\n.amap-copyright {\r\n  opacity: 0 !important;\r\n}\r\n</style>\r\n"],"mappings":";;EACOA,EAAE,EAAC,WAAW;EAACC,KAAiC,EAAjC;IAAA;IAAA;EAAA;;;uBAApBC,mBAAA,CAA4D,OAA5DC,UAA4D","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport { ref, onMounted } from \"vue\";\nimport { getRanderingSorted } from \"@/api/rendering\";\nexport default {\n  name: \"MapWindow\",\n  setup() {\n    // 使用 ref 定义响应式数据\n    const map = ref(null);\n    const polygon = ref([]);\n    const isMapReady = ref(false); // 新增的标志，表示地图是否初始化完成\n\n    // 在组件挂载时加载高德地图API\n    onMounted(() => {\n      loadAMapApi();\n    });\n\n    // 加载高德地图API\n    const loadAMapApi = () => {\n      const script = document.createElement(\"script\");\n      script.type = \"text/javascript\";\n      script.src = \"https://webapi.amap.com/maps?v=2.0&key=a6042dfaa8137c1bd9f59034cd3021a3\";\n      document.head.appendChild(script);\n      script.onload = () => {\n        initMap();\n      };\n    };\n\n    // 初始化地图\n    const initMap = () => {\n      const layer = new AMap.createDefaultLayer({\n        zooms: [3, 20],\n        // 可见级别\n        visible: true,\n        // 是否可见\n        opacity: 1,\n        // 透明度\n        zIndex: 0 // 叠加层级\n      });\n      map.value = new AMap.Map(\"container\", {\n        viewMode: \"2D\",\n        // 默认使用 2D 模式\n        zoom: 16.3,\n        // 地图级别\n        center: [113.266949, 35.188365],\n        // 地图中心点\n        layer: [layer]\n      });\n\n      // 设置地图视野为包含所有多边形\n      map.value.setFitView();\n\n      // 标记地图已初始化完成\n      isMapReady.value = true;\n\n      // 添加初始的多边形（如果需要）\n      const Valid_area = [[[[113.256395, 35.190641], [113.257839, 35.183192], [113.258212, 35.182905], [113.258597, 35.18288], [113.276622, 35.185157], [113.274351, 35.196294], [113.274176, 35.196435], [113.273903, 35.196433], [113.27348, 35.196239], [113.271625, 35.194724], [113.270753, 35.193288], [113.267986, 35.192422], [113.261557, 35.191206], [113.256395, 35.190641]]]];\n      polygon.value = new AMap.Polygon({\n        path: Valid_area,\n        // 多边形路径\n        fillColor: \"#ccebc5\",\n        // 多边形填充颜色\n        strokeOpacity: 1,\n        // 线条透明度\n        fillOpacity: 0.3,\n        // 填充透明度\n        strokeColor: \"#2b8cbe\",\n        // 线条颜色\n        strokeWeight: 1,\n        // 线条宽度\n        strokeStyle: \"dashed\",\n        // 线样式\n        strokeDasharray: [5, 5] // 轮廓的虚线和间隙的样式\n      });\n      map.value.add(polygon.value);\n\n      // 监听缩放级别的变化\n      map.value.on(\"zoomchange\", () => {\n        handleZoomChange();\n      });\n    };\n\n    // 处理缩放级别变化\n    const handleZoomChange = () => {\n      const zoomLevel = map.value.getZoom();\n\n      // 设置缩放级别阈值\n      const threshold = 17;\n\n      // 根据缩放级别显示或隐藏多边形\n      if (zoomLevel > threshold) {\n        polygon.value.setMap(null); // 隐藏多边形\n      } else {\n        polygon.value.setMap(map.value); // 显示多边形\n      }\n    };\n\n    // 在地图加载完成后获取停车区域数据\n    onMounted(async () => {\n      if (isMapReady.value) {\n        try {\n          const response = await getRanderingSorted();\n          console.log(\"Received response:\", response.data); // 输出完整的返回数据\n\n          if (response.data.code === 0 && response.data.data.features) {\n            const formattedData = response.data.data.features.map(feature => {\n              // 提取 coordinates 数据\n              const coordinates = feature.geometry.coordinates[0].map(coord => {\n                return [coord[0], coord[1]]; // 转换为 [longitude, latitude] 格式\n              });\n\n              // 创建 AMap.Polygon 对象\n              return new AMap.Polygon({\n                path: coordinates,\n                fillColor: \"#ccebc5\",\n                // 填充颜色\n                strokeOpacity: 1,\n                // 线条透明度\n                fillOpacity: 0.5,\n                // 填充透明度\n                strokeColor: \"#2b8cbe\",\n                // 线条颜色\n                strokeWeight: 1,\n                // 线条宽度\n                strokeStyle: \"dashed\",\n                // 线样式\n                strokeDasharray: [5, 5] // 虚线样式\n              });\n            });\n            polygon.value = formattedData;\n\n            // 确保地图已初始化才添加多边形\n            if (map.value) {\n              addPolygonsToMap(polygon.value);\n            } else {\n              console.error(\"Map is not initialized yet.\");\n            }\n          } else {\n            console.error(\"Invalid data format\", response.data);\n          }\n        } catch (error) {\n          console.error(\"Error fetching polygons:\", error);\n          alert(\"An error occurred while fetching polygons. Please check the console for more details.\");\n        }\n      }\n    });\n    const addPolygonsToMap = polygons => {\n      // 确保 map 已初始化\n      if (map.value) {\n        polygons.forEach(polygonItem => {\n          map.value.add(polygonItem); // 添加多边形到地图\n        });\n      } else {\n        console.error(\"Map object is null, cannot add polygons.\");\n      }\n    };\n\n    // 返回需要暴露的响应式变量和方法\n    return {\n      map,\n      polygon\n    };\n  }\n};","map":{"version":3,"names":["ref","onMounted","getRanderingSorted","name","setup","map","polygon","isMapReady","loadAMapApi","script","document","createElement","type","src","head","appendChild","onload","initMap","layer","AMap","createDefaultLayer","zooms","visible","opacity","zIndex","value","Map","viewMode","zoom","center","setFitView","Valid_area","Polygon","path","fillColor","strokeOpacity","fillOpacity","strokeColor","strokeWeight","strokeStyle","strokeDasharray","add","on","handleZoomChange","zoomLevel","getZoom","threshold","setMap","response","console","log","data","code","features","formattedData","feature","coordinates","geometry","coord","addPolygonsToMap","error","alert","polygons","forEach","polygonItem"],"sources":["E:\\code\\Django\\project\\front\\front\\src\\components\\NearbyTramsWindow.vue"],"sourcesContent":["<template>\r\n  <div id=\"container\" style=\"width: 100%; height: 100%\"></div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, onMounted } from \"vue\";\r\nimport { getRanderingSorted } from \"@/api/rendering\";\r\nexport default {\r\n  name: \"MapWindow\",\r\n  setup() {\r\n    // 使用 ref 定义响应式数据\r\n    const map = ref(null);\r\n    const polygon = ref([]);\r\n    const isMapReady = ref(false); // 新增的标志，表示地图是否初始化完成\r\n\r\n    // 在组件挂载时加载高德地图API\r\n    onMounted(() => {\r\n      loadAMapApi();\r\n    });\r\n\r\n    // 加载高德地图API\r\n    const loadAMapApi = () => {\r\n      const script = document.createElement(\"script\");\r\n      script.type = \"text/javascript\";\r\n      script.src =\r\n        \"https://webapi.amap.com/maps?v=2.0&key=a6042dfaa8137c1bd9f59034cd3021a3\";\r\n      document.head.appendChild(script);\r\n\r\n      script.onload = () => {\r\n        initMap();\r\n      };\r\n    };\r\n\r\n    // 初始化地图\r\n    const initMap = () => {\r\n      const layer = new AMap.createDefaultLayer({\r\n        zooms: [3, 20], // 可见级别\r\n        visible: true, // 是否可见\r\n        opacity: 1, // 透明度\r\n        zIndex: 0, // 叠加层级\r\n      });\r\n\r\n      map.value = new AMap.Map(\"container\", {\r\n        viewMode: \"2D\", // 默认使用 2D 模式\r\n        zoom: 16.3, // 地图级别\r\n        center: [113.266949, 35.188365], // 地图中心点\r\n        layer: [layer],\r\n      });\r\n\r\n      // 设置地图视野为包含所有多边形\r\n      map.value.setFitView();\r\n\r\n      // 标记地图已初始化完成\r\n      isMapReady.value = true;\r\n\r\n      // 添加初始的多边形（如果需要）\r\n      const Valid_area = [\r\n        [\r\n          [\r\n            [113.256395, 35.190641],\r\n            [113.257839, 35.183192],\r\n            [113.258212, 35.182905],\r\n            [113.258597, 35.18288],\r\n            [113.276622, 35.185157],\r\n            [113.274351, 35.196294],\r\n            [113.274176, 35.196435],\r\n            [113.273903, 35.196433],\r\n            [113.27348, 35.196239],\r\n            [113.271625, 35.194724],\r\n            [113.270753, 35.193288],\r\n            [113.267986, 35.192422],\r\n            [113.261557, 35.191206],\r\n            [113.256395, 35.190641],\r\n          ],\r\n        ],\r\n      ];\r\n\r\n      polygon.value = new AMap.Polygon({\r\n        path: Valid_area, // 多边形路径\r\n        fillColor: \"#ccebc5\", // 多边形填充颜色\r\n        strokeOpacity: 1, // 线条透明度\r\n        fillOpacity: 0.3, // 填充透明度\r\n        strokeColor: \"#2b8cbe\", // 线条颜色\r\n        strokeWeight: 1, // 线条宽度\r\n        strokeStyle: \"dashed\", // 线样式\r\n        strokeDasharray: [5, 5], // 轮廓的虚线和间隙的样式\r\n      });\r\n\r\n      map.value.add(polygon.value);\r\n\r\n      // 监听缩放级别的变化\r\n      map.value.on(\"zoomchange\", () => {\r\n        handleZoomChange();\r\n      });\r\n    };\r\n\r\n    // 处理缩放级别变化\r\n    const handleZoomChange = () => {\r\n      const zoomLevel = map.value.getZoom();\r\n\r\n      // 设置缩放级别阈值\r\n      const threshold = 17;\r\n\r\n      // 根据缩放级别显示或隐藏多边形\r\n      if (zoomLevel > threshold) {\r\n        polygon.value.setMap(null); // 隐藏多边形\r\n      } else {\r\n        polygon.value.setMap(map.value); // 显示多边形\r\n      }\r\n    };\r\n\r\n    // 在地图加载完成后获取停车区域数据\r\n    onMounted(async () => {\r\n      if (isMapReady.value) {\r\n        try {\r\n          const response = await getRanderingSorted();\r\n          console.log(\"Received response:\", response.data); // 输出完整的返回数据\r\n\r\n          if (response.data.code === 0 && response.data.data.features) {\r\n            const formattedData = response.data.data.features.map((feature) => {\r\n              // 提取 coordinates 数据\r\n              const coordinates = feature.geometry.coordinates[0].map(\r\n                (coord) => {\r\n                  return [coord[0], coord[1]]; // 转换为 [longitude, latitude] 格式\r\n                }\r\n              );\r\n\r\n              // 创建 AMap.Polygon 对象\r\n              return new AMap.Polygon({\r\n                path: coordinates,\r\n                fillColor: \"#ccebc5\", // 填充颜色\r\n                strokeOpacity: 1, // 线条透明度\r\n                fillOpacity: 0.5, // 填充透明度\r\n                strokeColor: \"#2b8cbe\", // 线条颜色\r\n                strokeWeight: 1, // 线条宽度\r\n                strokeStyle: \"dashed\", // 线样式\r\n                strokeDasharray: [5, 5], // 虚线样式\r\n              });\r\n            });\r\n\r\n            polygon.value = formattedData;\r\n\r\n            // 确保地图已初始化才添加多边形\r\n            if (map.value) {\r\n              addPolygonsToMap(polygon.value);\r\n            } else {\r\n              console.error(\"Map is not initialized yet.\");\r\n            }\r\n          } else {\r\n            console.error(\"Invalid data format\", response.data);\r\n          }\r\n        } catch (error) {\r\n          console.error(\"Error fetching polygons:\", error);\r\n          alert(\r\n            \"An error occurred while fetching polygons. Please check the console for more details.\"\r\n          );\r\n        }\r\n      }\r\n    });\r\n\r\n    const addPolygonsToMap = (polygons) => {\r\n      // 确保 map 已初始化\r\n      if (map.value) {\r\n        polygons.forEach((polygonItem) => {\r\n          map.value.add(polygonItem); // 添加多边形到地图\r\n        });\r\n      } else {\r\n        console.error(\"Map object is null, cannot add polygons.\");\r\n      }\r\n    };\r\n\r\n    // 返回需要暴露的响应式变量和方法\r\n    return {\r\n      map,\r\n      polygon,\r\n    };\r\n  },\r\n};\r\n</script>\r\n\r\n<style>\r\nhtml,\r\nbody,\r\n#container {\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n\r\n.amap-logo {\r\n  display: none !important;\r\n}\r\n\r\n.amap-copyright {\r\n  opacity: 0 !important;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
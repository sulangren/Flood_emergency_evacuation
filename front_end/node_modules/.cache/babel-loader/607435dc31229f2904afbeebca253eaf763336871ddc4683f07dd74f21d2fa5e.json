{"ast":null,"code":"import \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport { ref, onMounted } from \"vue\";\nimport { getRanderingSorted } from \"@/api/rendering\";\nexport default {\n  name: \"MapWindow\",\n  setup() {\n    // 使用 ref 定义响应式数据\n    const map = ref(null);\n    const polygon = ref([]);\n\n    // 在组件挂载时加载高德地图API\n    onMounted(() => {\n      loadAMapApi();\n    });\n\n    // 加载高德地图API\n    const loadAMapApi = () => {\n      const script = document.createElement(\"script\");\n      script.type = \"text/javascript\";\n      script.src = \"https://webapi.amap.com/maps?v=2.0&key=a6042dfaa8137c1bd9f59034cd3021a3\";\n      document.head.appendChild(script);\n      script.onload = () => {\n        initMap();\n      };\n    };\n\n    // 初始化地图\n    const initMap = () => {\n      const layer = new AMap.createDefaultLayer({\n        zooms: [3, 20],\n        // 可见级别\n        visible: true,\n        // 是否可见\n        opacity: 1,\n        // 透明度\n        zIndex: 0 // 叠加层级\n      });\n      map.value = new AMap.Map(\"container\", {\n        viewMode: \"2D\",\n        // 默认使用 2D 模式\n        zoom: 16.3,\n        // 地图级别\n        center: [113.266949, 35.188365],\n        // 地图中心点\n        layer: [layer]\n      });\n\n      // 初始化地图后添加默认区域\n      const Valid_area = [[[[113.256395, 35.190641], [113.257839, 35.183192], [113.258212, 35.182905], [113.258597, 35.18288], [113.276622, 35.185157], [113.274351, 35.196294], [113.274176, 35.196435], [113.273903, 35.196433], [113.27348, 35.196239], [113.271625, 35.194724], [113.270753, 35.193288], [113.267986, 35.192422], [113.261557, 35.191206], [113.256395, 35.190641]]]];\n      polygon.value = new AMap.Polygon({\n        path: Valid_area,\n        // 多边形路径\n        fillColor: \"#ccebc5\",\n        // 多边形填充颜色\n        strokeOpacity: 1,\n        // 线条透明度\n        fillOpacity: 0.5,\n        // 填充透明度\n        strokeColor: \"#2b8cbe\",\n        // 线条颜色\n        strokeWeight: 1,\n        // 线条宽度\n        strokeStyle: \"dashed\",\n        // 线样式\n        strokeDasharray: [5, 5] // 轮廓的虚线和间隙的样式\n      });\n      polygon.value.on(\"mouseover\", () => {\n        polygon.value.setOptions({\n          fillOpacity: 0.1,\n          // 多边形填充透明度\n          fillColor: \"#7bccc4\"\n        });\n      });\n\n      // 添加多边形到地图\n      map.value.add(polygon.value);\n\n      // 监听缩放级别的变化\n      map.value.on(\"zoomchange\", () => {\n        handleZoomChange();\n      });\n    };\n\n    // 处理缩放级别变化\n    const handleZoomChange = () => {\n      const zoomLevel = map.value.getZoom();\n\n      // 设置缩放级别阈值\n      const threshold = 17;\n\n      // 根据缩放级别显示或隐藏多边形\n      if (zoomLevel > threshold) {\n        polygon.value.setMap(null); // 隐藏多边形\n      } else {\n        polygon.value.setMap(map.value); // 显示多边形\n      }\n    };\n    onMounted(async () => {\n      try {\n        const response = await getRanderingSorted();\n        console.log(\"Response:\", response.data); // 输出返回的完整数据\n\n        // 确保返回数据格式正确\n        if (response.data.code === 0 && response.data.data && Array.isArray(response.data.data)) {\n          const formattedData = response.data.data.map(item => {\n            // 获取 coordinates 数据\n            const coordinates = item.coordinates;\n\n            // 确保坐标数据格式正确，二维数组\n            if (Array.isArray(coordinates) && coordinates[0] && Array.isArray(coordinates[0])) {\n              return new AMap.Polygon({\n                path: coordinates,\n                // 使用正确格式的坐标\n                fillColor: \"#ccebc5\",\n                // 填充颜色\n                strokeOpacity: 1,\n                // 线条透明度\n                fillOpacity: 0.5,\n                // 填充透明度\n                strokeColor: \"#2b8cbe\",\n                // 线条颜色\n                strokeWeight: 1,\n                // 线条宽度\n                strokeStyle: \"dashed\",\n                // 线样式\n                strokeDasharray: [5, 5] // 虚线样式\n              });\n            }\n            return null; // 如果数据格式错误，返回 null\n          }).filter(polygonItem => polygonItem !== null); // 过滤掉无效的多边形数据\n\n          polygon.value = formattedData; // 更新 polygon 数据\n\n          // 延迟执行添加多边形操作，确保地图已经初始化完成\n          setTimeout(() => {\n            addPolygonsToMap(polygon.value); // 添加多边形到地图\n          }, 500); // 延迟500ms再添加，确保地图加载完成\n        } else {\n          console.error(\"Invalid data format\", response.data);\n        }\n      } catch (error) {\n        console.error(\"Error fetching polygons:\", error);\n      }\n    });\n    const addPolygonsToMap = polygons => {\n      // 只有在 map.value 已经初始化后才执行添加操作\n      if (map.value) {\n        if (Array.isArray(polygons)) {\n          polygons.forEach(polygonItem => {\n            map.value.add(polygonItem); // 将多边形添加到地图\n          });\n        } else {\n          console.error(\"Polygons is not an array:\", polygons);\n        }\n      } else {\n        console.error(\"Map is not initialized\");\n      }\n    };\n    return {\n      map,\n      polygon\n    };\n  }\n};","map":{"version":3,"names":["ref","onMounted","getRanderingSorted","name","setup","map","polygon","loadAMapApi","script","document","createElement","type","src","head","appendChild","onload","initMap","layer","AMap","createDefaultLayer","zooms","visible","opacity","zIndex","value","Map","viewMode","zoom","center","Valid_area","Polygon","path","fillColor","strokeOpacity","fillOpacity","strokeColor","strokeWeight","strokeStyle","strokeDasharray","on","setOptions","add","handleZoomChange","zoomLevel","getZoom","threshold","setMap","response","console","log","data","code","Array","isArray","formattedData","item","coordinates","filter","polygonItem","setTimeout","addPolygonsToMap","error","polygons","forEach"],"sources":["E:\\code\\Django\\project\\front\\front\\src\\components\\NearbyTramsWindow.vue"],"sourcesContent":["<template>\r\n  <div id=\"container\" style=\"width: 100%; height: 100%\"></div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, onMounted } from \"vue\";\r\nimport { getRanderingSorted } from \"@/api/rendering\";\r\n\r\nexport default {\r\n  name: \"MapWindow\",\r\n  setup() {\r\n    // 使用 ref 定义响应式数据\r\n    const map = ref(null);\r\n    const polygon = ref([]);\r\n\r\n    // 在组件挂载时加载高德地图API\r\n    onMounted(() => {\r\n      loadAMapApi();\r\n    });\r\n\r\n    // 加载高德地图API\r\n    const loadAMapApi = () => {\r\n      const script = document.createElement(\"script\");\r\n      script.type = \"text/javascript\";\r\n      script.src =\r\n        \"https://webapi.amap.com/maps?v=2.0&key=a6042dfaa8137c1bd9f59034cd3021a3\";\r\n      document.head.appendChild(script);\r\n\r\n      script.onload = () => {\r\n        initMap();\r\n      };\r\n    };\r\n\r\n    // 初始化地图\r\n    const initMap = () => {\r\n      const layer = new AMap.createDefaultLayer({\r\n        zooms: [3, 20], // 可见级别\r\n        visible: true, // 是否可见\r\n        opacity: 1, // 透明度\r\n        zIndex: 0, // 叠加层级\r\n      });\r\n\r\n      map.value = new AMap.Map(\"container\", {\r\n        viewMode: \"2D\", // 默认使用 2D 模式\r\n        zoom: 16.3, // 地图级别\r\n        center: [113.266949, 35.188365], // 地图中心点\r\n        layer: [layer],\r\n      });\r\n\r\n      // 初始化地图后添加默认区域\r\n      const Valid_area = [\r\n        [\r\n          [\r\n            [113.256395, 35.190641],\r\n            [113.257839, 35.183192],\r\n            [113.258212, 35.182905],\r\n            [113.258597, 35.18288],\r\n            [113.276622, 35.185157],\r\n            [113.274351, 35.196294],\r\n            [113.274176, 35.196435],\r\n            [113.273903, 35.196433],\r\n            [113.27348, 35.196239],\r\n            [113.271625, 35.194724],\r\n            [113.270753, 35.193288],\r\n            [113.267986, 35.192422],\r\n            [113.261557, 35.191206],\r\n            [113.256395, 35.190641],\r\n          ],\r\n        ],\r\n      ];\r\n\r\n      polygon.value = new AMap.Polygon({\r\n        path: Valid_area, // 多边形路径\r\n        fillColor: \"#ccebc5\", // 多边形填充颜色\r\n        strokeOpacity: 1, // 线条透明度\r\n        fillOpacity: 0.5, // 填充透明度\r\n        strokeColor: \"#2b8cbe\", // 线条颜色\r\n        strokeWeight: 1, // 线条宽度\r\n        strokeStyle: \"dashed\", // 线样式\r\n        strokeDasharray: [5, 5], // 轮廓的虚线和间隙的样式\r\n      });\r\n\r\n      polygon.value.on(\"mouseover\", () => {\r\n        polygon.value.setOptions({\r\n          fillOpacity: 0.1, // 多边形填充透明度\r\n          fillColor: \"#7bccc4\",\r\n        });\r\n      });\r\n\r\n      // 添加多边形到地图\r\n      map.value.add(polygon.value);\r\n\r\n      // 监听缩放级别的变化\r\n      map.value.on(\"zoomchange\", () => {\r\n        handleZoomChange();\r\n      });\r\n    };\r\n\r\n    // 处理缩放级别变化\r\n    const handleZoomChange = () => {\r\n      const zoomLevel = map.value.getZoom();\r\n\r\n      // 设置缩放级别阈值\r\n      const threshold = 17;\r\n\r\n      // 根据缩放级别显示或隐藏多边形\r\n      if (zoomLevel > threshold) {\r\n        polygon.value.setMap(null); // 隐藏多边形\r\n      } else {\r\n        polygon.value.setMap(map.value); // 显示多边形\r\n      }\r\n    };\r\n\r\n    onMounted(async () => {\r\n      try {\r\n        const response = await getRanderingSorted();\r\n        console.log(\"Response:\", response.data); // 输出返回的完整数据\r\n\r\n        // 确保返回数据格式正确\r\n        if (\r\n          response.data.code === 0 &&\r\n          response.data.data &&\r\n          Array.isArray(response.data.data)\r\n        ) {\r\n          const formattedData = response.data.data\r\n            .map((item) => {\r\n              // 获取 coordinates 数据\r\n              const coordinates = item.coordinates;\r\n\r\n              // 确保坐标数据格式正确，二维数组\r\n              if (\r\n                Array.isArray(coordinates) &&\r\n                coordinates[0] &&\r\n                Array.isArray(coordinates[0])\r\n              ) {\r\n                return new AMap.Polygon({\r\n                  path: coordinates, // 使用正确格式的坐标\r\n                  fillColor: \"#ccebc5\", // 填充颜色\r\n                  strokeOpacity: 1, // 线条透明度\r\n                  fillOpacity: 0.5, // 填充透明度\r\n                  strokeColor: \"#2b8cbe\", // 线条颜色\r\n                  strokeWeight: 1, // 线条宽度\r\n                  strokeStyle: \"dashed\", // 线样式\r\n                  strokeDasharray: [5, 5], // 虚线样式\r\n                });\r\n              }\r\n              return null; // 如果数据格式错误，返回 null\r\n            })\r\n            .filter((polygonItem) => polygonItem !== null); // 过滤掉无效的多边形数据\r\n\r\n          polygon.value = formattedData; // 更新 polygon 数据\r\n\r\n          // 延迟执行添加多边形操作，确保地图已经初始化完成\r\n          setTimeout(() => {\r\n            addPolygonsToMap(polygon.value); // 添加多边形到地图\r\n          }, 500); // 延迟500ms再添加，确保地图加载完成\r\n        } else {\r\n          console.error(\"Invalid data format\", response.data);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error fetching polygons:\", error);\r\n      }\r\n    });\r\n\r\n    const addPolygonsToMap = (polygons) => {\r\n      // 只有在 map.value 已经初始化后才执行添加操作\r\n      if (map.value) {\r\n        if (Array.isArray(polygons)) {\r\n          polygons.forEach((polygonItem) => {\r\n            map.value.add(polygonItem); // 将多边形添加到地图\r\n          });\r\n        } else {\r\n          console.error(\"Polygons is not an array:\", polygons);\r\n        }\r\n      } else {\r\n        console.error(\"Map is not initialized\");\r\n      }\r\n    };\r\n\r\n    return {\r\n      map,\r\n      polygon,\r\n    };\r\n  },\r\n};\r\n</script>\r\n\r\n<style>\r\nhtml,\r\nbody,\r\n#container {\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n\r\n.amap-logo {\r\n  display: none !important;\r\n}\r\n\r\n.amap-copyright {\r\n  opacity: 0 !important;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport { ref, onMounted } from \"vue\";\nimport { getRanderingSorted, getPointSorted } from \"@/api/rendering\";\nexport default {\n  name: \"MapWindow\",\n  setup() {\n    const map = ref(null);\n    const markers = ref([]);\n\n    // 加载并初始化地图\n    const loadAMapApi = () => {\n      const script = document.createElement(\"script\");\n      script.type = \"text/javascript\";\n      script.src = \"https://webapi.amap.com/maps?v=2.0&key=a6042dfaa8137c1bd9f59034cd3021a3&plugin=AMap.MarkerClusterer\";\n      document.head.appendChild(script);\n      script.onload = () => {\n        initMap();\n      };\n    };\n    const initMap = () => {\n      const layer = new AMap.createDefaultLayer({\n        zooms: [3, 20],\n        visible: true,\n        opacity: 1,\n        zIndex: 0\n      });\n      map.value = new AMap.Map(\"container\", {\n        viewMode: \"2D\",\n        zoom: 16.3,\n        center: [113.266949, 35.188365],\n        // 初始地图中心\n        layer: [layer]\n      });\n    };\n\n    // 获取并渲染自行车点数据\n    const fetchBicyclePoints = async () => {\n      try {\n        const response = await getPointSorted();\n        console.log(\"Bicycles Response:\", response.data);\n        if (response.data.code === 0 && Array.isArray(response.data.data)) {\n          const bicycles = response.data.data;\n\n          // 直接添加点到地图\n          addMarkersToMap(bicycles);\n        } else {\n          console.error(\"Invalid bicycle data format\", response.data);\n        }\n      } catch (error) {\n        console.error(\"Error fetching bicycles:\", error);\n      }\n    };\n\n    // 将自行车点添加到地图并启用点聚合\n    const addMarkersToMap = bicycles => {\n      if (Array.isArray(bicycles)) {\n        // 清空之前的标记\n        markers.value = [];\n        bicycles.forEach(bicycle => {\n          const {\n            id,\n            coordinates\n          } = bicycle;\n          const marker = new AMap.Marker({\n            position: new AMap.LngLat(coordinates[0], coordinates[1]),\n            // 设置点的坐标\n            title: `Bicycle ID: ${id}` // 设置点的标题为 ID\n          });\n          markers.value.push(marker); // 将每个点标记保存到 markers 数组\n        });\n\n        // 确保 MarkerClusterer 插件已经加载\n        if (typeof AMap.MarkerClusterer !== \"undefined\") {\n          const markerCluster = new AMap.MarkerClusterer(map.value, markers.value, {\n            gridSize: 100,\n            // 设置聚合网格大小\n            render: (map, markers) => {\n              return markers;\n            }\n          });\n\n          // 添加聚合器到地图\n          map.value.add(markerCluster);\n        } else {\n          console.error(\"MarkerClusterer plugin not loaded.\");\n        }\n      }\n    };\n\n    // 初始化时加载地图和数据\n    onMounted(() => {\n      loadAMapApi(); // 加载高德地图 API\n      fetchBicyclePoints(); // 获取并渲染自行车点数据\n    });\n    return {\n      map,\n      markers\n    };\n  }\n};","map":{"version":3,"names":["ref","onMounted","getRanderingSorted","getPointSorted","name","setup","map","markers","loadAMapApi","script","document","createElement","type","src","head","appendChild","onload","initMap","layer","AMap","createDefaultLayer","zooms","visible","opacity","zIndex","value","Map","viewMode","zoom","center","fetchBicyclePoints","response","console","log","data","code","Array","isArray","bicycles","addMarkersToMap","error","forEach","bicycle","id","coordinates","marker","Marker","position","LngLat","title","push","MarkerClusterer","markerCluster","gridSize","render","add"],"sources":["E:\\code\\Django\\project\\front\\front\\src\\components\\NearbyTramsWindow.vue"],"sourcesContent":["<template>\r\n  <div id=\"container\" style=\"width: 100%; height: 100%\"></div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, onMounted } from \"vue\";\r\nimport { getRanderingSorted, getPointSorted } from \"@/api/rendering\";\r\n\r\nexport default {\r\n  name: \"MapWindow\",\r\n  setup() {\r\n    const map = ref(null);\r\n    const markers = ref([]);\r\n\r\n    // 加载并初始化地图\r\n    const loadAMapApi = () => {\r\n      const script = document.createElement(\"script\");\r\n      script.type = \"text/javascript\";\r\n      script.src =\r\n        \"https://webapi.amap.com/maps?v=2.0&key=a6042dfaa8137c1bd9f59034cd3021a3&plugin=AMap.MarkerClusterer\";\r\n      document.head.appendChild(script);\r\n\r\n      script.onload = () => {\r\n        initMap();\r\n      };\r\n    };\r\n\r\n    const initMap = () => {\r\n      const layer = new AMap.createDefaultLayer({\r\n        zooms: [3, 20],\r\n        visible: true,\r\n        opacity: 1,\r\n        zIndex: 0,\r\n      });\r\n\r\n      map.value = new AMap.Map(\"container\", {\r\n        viewMode: \"2D\",\r\n        zoom: 16.3,\r\n        center: [113.266949, 35.188365], // 初始地图中心\r\n        layer: [layer],\r\n      });\r\n    };\r\n\r\n    // 获取并渲染自行车点数据\r\n    const fetchBicyclePoints = async () => {\r\n      try {\r\n        const response = await getPointSorted();\r\n        console.log(\"Bicycles Response:\", response.data);\r\n\r\n        if (response.data.code === 0 && Array.isArray(response.data.data)) {\r\n          const bicycles = response.data.data;\r\n\r\n          // 直接添加点到地图\r\n          addMarkersToMap(bicycles);\r\n        } else {\r\n          console.error(\"Invalid bicycle data format\", response.data);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error fetching bicycles:\", error);\r\n      }\r\n    };\r\n\r\n    // 将自行车点添加到地图并启用点聚合\r\n    const addMarkersToMap = (bicycles) => {\r\n      if (Array.isArray(bicycles)) {\r\n        // 清空之前的标记\r\n        markers.value = [];\r\n\r\n        bicycles.forEach((bicycle) => {\r\n          const { id, coordinates } = bicycle;\r\n          const marker = new AMap.Marker({\r\n            position: new AMap.LngLat(coordinates[0], coordinates[1]), // 设置点的坐标\r\n            title: `Bicycle ID: ${id}`, // 设置点的标题为 ID\r\n          });\r\n          markers.value.push(marker); // 将每个点标记保存到 markers 数组\r\n        });\r\n\r\n        // 确保 MarkerClusterer 插件已经加载\r\n        if (typeof AMap.MarkerClusterer !== \"undefined\") {\r\n          const markerCluster = new AMap.MarkerClusterer(\r\n            map.value,\r\n            markers.value,\r\n            {\r\n              gridSize: 100, // 设置聚合网格大小\r\n              render: (map, markers) => {\r\n                return markers;\r\n              },\r\n            }\r\n          );\r\n\r\n          // 添加聚合器到地图\r\n          map.value.add(markerCluster);\r\n        } else {\r\n          console.error(\"MarkerClusterer plugin not loaded.\");\r\n        }\r\n      }\r\n    };\r\n\r\n    // 初始化时加载地图和数据\r\n    onMounted(() => {\r\n      loadAMapApi(); // 加载高德地图 API\r\n      fetchBicyclePoints(); // 获取并渲染自行车点数据\r\n    });\r\n\r\n    return {\r\n      map,\r\n      markers,\r\n    };\r\n  },\r\n};\r\n</script>\r\n\r\n<style>\r\nhtml,\r\nbody,\r\n#container {\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n\r\n.amap-logo {\r\n  display: none !important;\r\n}\r\n\r\n.amap-copyright {\r\n  opacity: 0 !important;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
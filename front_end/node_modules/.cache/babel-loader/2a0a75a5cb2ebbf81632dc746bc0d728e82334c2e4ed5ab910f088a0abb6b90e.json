{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport { ref, onMounted, nextTick } from \"vue\";\nimport { getRanderingSorted, getPointSorted } from \"@/api/rendering\";\nexport default {\n  name: \"MapWindow\",\n  setup() {\n    const map = ref(null);\n    const polygons = ref([]); // 存储多边形对象\n    const markers = ref([]); // 存储标记点对象\n    const currentLayer = ref(\"vector\"); // 当前图层（矢量或卫星）\n    const isDropdownVisible = ref(false); // 下拉菜单是否显示\n    const operationDropdownVisible = ref(false); // 操作下拉菜单是否显示\n    let vectorLayer = null;\n    let satelliteLayer = null;\n    let overviewMap = null; // 小地图变量\n    let overviewRect = null; // 用于小地图中的框\n    let rangingTool = null; // 定义测距工具变量\n\n    let polyline = null; // 声明画线对象\n    const linePath = ref([]); // 画线的路径\n    const drawingMode = ref(false); // 是否开启画线模式\n\n    const isModalVisible = ref(false); // 控制Modal显示\n    const distanceInfo = ref(\"\"); // 存储距离信息\n\n    // 加载并初始化地图\n    const loadAMapApi = () => {\n      const script = document.createElement(\"script\");\n      script.type = \"text/javascript\";\n      script.src = \"https://webapi.amap.com/maps?v=2.0&key=a6042dfaa8137c1bd9f59034cd3021a3\";\n      document.head.appendChild(script);\n      script.onload = () => {\n        initMap();\n      };\n    };\n    const initMap = () => {\n      if (!AMap) {\n        console.error(\"AMap is not defined!\");\n        return;\n      }\n\n      // 初始化图层\n      vectorLayer = new AMap.createDefaultLayer({\n        zooms: [3, 20],\n        visible: true,\n        opacity: 1,\n        zIndex: 0\n      }); // 矢量图层\n      satelliteLayer = new AMap.TileLayer.Satellite(); // 卫星图层\n\n      // 初始化地图\n      map.value = new AMap.Map(\"container\", {\n        viewMode: \"2D\",\n        zoom: 16.3,\n        center: [113.266949, 35.188365],\n        // 地图中心\n        layers: [vectorLayer] // 默认加载矢量图层\n      });\n\n      // 加载工具条控件\n      AMap.plugin([\"AMap.ToolBar\"], () => {\n        const toolBarControl = new AMap.ToolBar();\n        map.value.addControl(toolBarControl);\n      });\n\n      // 加载测距工具插件\n      AMap.plugin(\"AMap.RangingTool\", () => {\n        rangingTool = new AMap.RangingTool(map.value); // 初始化测距工具\n        rangingTool.on(\"end\", event => {\n          console.log(\"测距结束:\", event);\n        });\n\n        // 点击右键时，停止测距工具\n        map.value.on(\"rightclick\", () => {\n          rangingTool.turnOff(); // 关闭测距工具\n        });\n      });\n\n      // 获取并渲染多边形和标记点数据\n      fetchPolygons();\n      fetchBicyclePoints();\n\n      // // 添加 Valid_area 范围的多边形\n      // const Valid_area = [\n      //   [\n      //     [\n      //       [113.256395, 35.190641],\n      //       [113.257839, 35.183192],\n      //       [113.258212, 35.182905],\n      //       [113.258597, 35.18288],\n      //       [113.276622, 35.185157],\n      //       [113.274351, 35.196294],\n      //       [113.274176, 35.196435],\n      //       [113.273903, 35.196433],\n      //       [113.27348, 35.196239],\n      //       [113.271625, 35.194724],\n      //       [113.270753, 35.193288],\n      //       [113.267986, 35.192422],\n      //       [113.261557, 35.191206],\n      //       [113.256395, 35.190641],\n      //     ],\n      //   ],\n      // ];\n\n      // const polygon = new AMap.Polygon({\n      //   path: Valid_area, // 多边形路径\n      //   fillColor: \"#ccebc5\", // 多边形填充颜色\n      //   strokeOpacity: 1, // 线条透明度\n      //   fillOpacity: 0.5, // 填充透明度\n      //   strokeColor: \"#ff0000\", // 线条颜色\n      //   strokeWeight: 3, // 线条宽度\n      //   strokeStyle: \"dashed\", // 线样式\n      //   strokeDasharray: [5, 5], // 虚线样式\n      // });\n\n      // // 鼠标移入多边形时改变填充色和透明度\n      // polygon.on(\"mouseover\", () => {\n      //   polygon.setOptions({\n      //     fillOpacity: 0.1, // 多边形填充透明度\n      //     fillColor: \"#7bccc4\",\n      //   });\n      // });\n\n      // // 将多边形添加到地图\n      // map.value.add(polygon);\n\n      // 初始化鹰眼图\n      nextTick(() => {\n        initOverviewMap();\n      });\n\n      // 监听地图点击事件以绘制路径\n      map.value.on(\"click\", e => {\n        if (!drawingMode.value) return;\n        const {\n          lng,\n          lat\n        } = e.lnglat;\n        linePath.value.push([lng, lat]);\n        console.log(\"添加点到路径:\", [lng, lat]);\n        if (polyline) {\n          polyline.setPath(linePath.value);\n        } else {\n          polyline = new AMap.Polyline({\n            path: linePath.value,\n            strokeColor: \"#FF0000\",\n            strokeWeight: 3\n          });\n          map.value.add(polyline);\n        }\n      });\n      map.value.on(\"dblclick\", () => {\n        console.log(\"Double click event triggered, drawingMode:\", drawingMode.value);\n        if (drawingMode.value) {\n          drawingMode.value = false;\n          console.log(\"Ending drawing mode\");\n        } else {\n          console.log(\"Drawing mode is already false\");\n        }\n      });\n    };\n\n    // 初始化小地图（鹰眼图）\n    const initOverviewMap = () => {\n      overviewMap = new AMap.Map(\"overview-map\", {\n        zoom: 13.5,\n        // 设置鹰眼图缩放级别\n        center: map.value.getCenter(),\n        // 设置小地图中心点为大地图中心\n        viewMode: \"2D\",\n        // 小地图模式\n        zooms: [3, 15] // 小地图缩放级别\n      });\n\n      // 小地图上的框，用于显示大地图的显示区域\n      overviewRect = new AMap.Rectangle({\n        bounds: map.value.getBounds(),\n        strokeColor: \"#F00\",\n        strokeWeight: 2,\n        fillOpacity: 0.3,\n        fillColor: \"#FF0\"\n      });\n      overviewMap.add(overviewRect);\n\n      // 监听大地图的移动事件，更新小地图视图\n      map.value.on(\"move\", () => {\n        const center = map.value.getCenter();\n        overviewMap.setCenter(center); // 更新小地图中心\n        updateOverviewRect(); // 更新小地图的显示框\n      });\n\n      // 监听大地图的缩放事件，更新小地图的框\n      map.value.on(\"zoomend\", () => {\n        updateOverviewRect(); // 更新显示框\n      });\n\n      // 监听鼠标的移动事件\n      map.value.on(\"mousemove\", () => {\n        updateOverviewRect(); // 鼠标移动时，更新小地图框\n      });\n    };\n\n    // 更新小地图上的显示框\n    const updateOverviewRect = () => {\n      const bounds = map.value.getBounds();\n      overviewRect.setBounds(bounds); // 设置小地图上的框为大地图当前显示区域\n    };\n\n    // 控制下拉菜单的显示状态\n    const toggleDropdown = visible => {\n      isDropdownVisible.value = visible !== undefined ? visible : !isDropdownVisible.value;\n    };\n    const handleOperationDropdown = visible => {\n      operationDropdownVisible.value = visible !== undefined ? visible : !operationDropdownVisible.value;\n    };\n\n    // 图层切换逻辑\n    const switchToVector = () => {\n      if (currentLayer.value !== \"vector\") {\n        map.value.setLayers([vectorLayer]);\n        currentLayer.value = \"vector\";\n      }\n    };\n    const switchToSatellite = () => {\n      if (currentLayer.value !== \"satellite\") {\n        map.value.setLayers([satelliteLayer]);\n        currentLayer.value = \"satellite\";\n      }\n    };\n\n    // 获取并渲染多边形数据\n    const fetchPolygons = async () => {\n      try {\n        const response = await getRanderingSorted();\n        console.log(\"Polygons Response:\", response.data);\n        if (response.data.code === 0 && Array.isArray(response.data.data)) {\n          const formattedPolygons = response.data.data.map(item => {\n            const coordinates = item.coordinates;\n            console.log(coordinates);\n            const polygon = new AMap.Polygon({\n              path: coordinates,\n              fillColor: \"#efebe2\",\n              strokeOpacity: 1,\n              fillOpacity: 0.5,\n              strokeColor: \"#2b8cbe\",\n              strokeWeight: 1,\n              strokeStyle: \"dashed\",\n              strokeDasharray: [5, 5]\n            });\n            return polygon;\n          });\n          polygons.value = formattedPolygons;\n\n          // 延迟添加多边形到地图\n          setTimeout(() => {\n            addPolygonsToMap(polygons.value);\n          }, 500);\n        } else {\n          console.error(\"Invalid polygon data format\", response.data);\n        }\n      } catch (error) {\n        console.error(\"Error fetching polygons:\", error);\n      }\n    };\n\n    // 获取并渲染自行车点数据\n    const fetchBicyclePoints = async () => {\n      try {\n        const response = await getPointSorted();\n        console.log(\"Bicycles Response:\", response.data);\n        if (response.data.code === 0 && Array.isArray(response.data.data)) {\n          const bicycles = response.data.data;\n\n          // 延迟添加点到地图\n          setTimeout(() => {\n            addMarkersToMap(bicycles);\n          }, 500);\n        } else {\n          console.error(\"Invalid bicycle data format\", response.data);\n        }\n      } catch (error) {\n        console.error(\"Error fetching bicycles:\", error);\n      }\n    };\n\n    // 将多边形添加到地图\n    const addPolygonsToMap = polygons => {\n      polygons.forEach(polygon => map.value.add(polygon));\n    };\n\n    // 将自行车点添加到地图\n    const addMarkersToMap = bicycles => {\n      bicycles.forEach(bicycle => {\n        const {\n          id,\n          coordinates\n        } = bicycle;\n        const marker = new AMap.Marker({\n          position: new AMap.LngLat(coordinates[0], coordinates[1]),\n          title: `Bicycle ID: ${id}`\n        });\n        markers.value.push(marker);\n        map.value.add(marker);\n      });\n    };\n\n    // 功能按钮逻辑\n    const resetView = () => {\n      map.value.setZoomAndCenter(16.3, [113.266949, 35.188365]);\n    };\n    const clearPolygons = () => {\n      polygons.value.forEach(polygon => map.value.remove(polygon));\n      polygons.value = [];\n    };\n    const clearMarkers = () => {\n      markers.value.forEach(marker => map.value.remove(marker));\n      markers.value = [];\n    };\n\n    // 开始画线\n    const startDrawing = () => {\n      console.log(\"开始画线被点击\");\n      drawingMode.value = true;\n      linePath.value = []; // 清空之前的路径\n      if (polyline) {\n        map.value.remove(polyline);\n        polyline = null;\n      }\n      console.log(\"开始画线\");\n    };\n\n    // 计算路径长度\n    const calculateDistance = () => {\n      if (linePath.value.length < 2) {\n        console.log(\"路径点不足，无法计算距离\");\n        return;\n      }\n      const totalLength = AMap.GeometryUtil.distanceOfLine(linePath.value);\n      distanceInfo.value = `路径总长度：${totalLength.toFixed(2)} 米`; // 设置距离信息\n      isModalVisible.value = true; // 显示Modal\n    };\n    const handleOk = () => {\n      isModalVisible.value = false;\n    };\n    const handleCancel = () => {\n      isModalVisible.value = false;\n    };\n    const clearDrawing = () => {\n      if (polyline) {\n        polyline.setMap(null); // 从地图中移除线\n        polyline = null; // 清空对象\n        linePath.value = []; // 清空路径\n        console.log(\"已清除画线\");\n      }\n    };\n\n    // 初始化时加载地图\n    onMounted(() => {\n      loadAMapApi();\n    });\n    return {\n      currentLayer,\n      switchToVector,\n      switchToSatellite,\n      resetView,\n      clearPolygons,\n      clearMarkers,\n      toggleDropdown,\n      map,\n      isDropdownVisible,\n      handleOperationDropdown,\n      startDrawing,\n      calculateDistance,\n      isModalVisible,\n      distanceInfo,\n      handleOk,\n      handleCancel,\n      clearDrawing\n    };\n  }\n};","map":{"version":3,"names":["ref","onMounted","nextTick","getRanderingSorted","getPointSorted","name","setup","map","polygons","markers","currentLayer","isDropdownVisible","operationDropdownVisible","vectorLayer","satelliteLayer","overviewMap","overviewRect","rangingTool","polyline","linePath","drawingMode","isModalVisible","distanceInfo","loadAMapApi","script","document","createElement","type","src","head","appendChild","onload","initMap","AMap","console","error","createDefaultLayer","zooms","visible","opacity","zIndex","TileLayer","Satellite","value","Map","viewMode","zoom","center","layers","plugin","toolBarControl","ToolBar","addControl","RangingTool","on","event","log","turnOff","fetchPolygons","fetchBicyclePoints","initOverviewMap","e","lng","lat","lnglat","push","setPath","Polyline","path","strokeColor","strokeWeight","add","getCenter","Rectangle","bounds","getBounds","fillOpacity","fillColor","setCenter","updateOverviewRect","setBounds","toggleDropdown","undefined","handleOperationDropdown","switchToVector","setLayers","switchToSatellite","response","data","code","Array","isArray","formattedPolygons","item","coordinates","polygon","Polygon","strokeOpacity","strokeStyle","strokeDasharray","setTimeout","addPolygonsToMap","bicycles","addMarkersToMap","forEach","bicycle","id","marker","Marker","position","LngLat","title","resetView","setZoomAndCenter","clearPolygons","remove","clearMarkers","startDrawing","calculateDistance","length","totalLength","GeometryUtil","distanceOfLine","toFixed","handleOk","handleCancel","clearDrawing","setMap"],"sources":["E:\\code\\Django\\project\\front\\front\\src\\components\\NearbyTramsWindow.vue"],"sourcesContent":["<template>\r\n  <div id=\"container\" style=\"width: 100%; height: 100%\">\r\n    <!-- 地图容器 -->\r\n    <div id=\"map-container\"></div>\r\n\r\n    <!-- 左上角的图层切换按钮 -->\r\n    <div class=\"map-control\">\r\n      <a-dropdown\r\n        :visible=\"isDropdownVisible\"\r\n        @visibleChange=\"toggleDropdown\"\r\n        trigger=\"click\"\r\n      >\r\n        <!-- 触发按钮 -->\r\n        <a-button type=\"primary\" shape=\"round\" @click=\"toggleDropdown\">\r\n          图层切换\r\n        </a-button>\r\n\r\n        <!-- 下拉菜单 -->\r\n        <template #overlay>\r\n          <a-menu>\r\n            <a-menu-item key=\"vector\" @click=\"switchToVector\">\r\n              <span :class=\"{ active: currentLayer === 'vector' }\"\r\n                >矢量地图</span\r\n              >\r\n            </a-menu-item>\r\n            <a-menu-item key=\"satellite\" @click=\"switchToSatellite\">\r\n              <span :class=\"{ active: currentLayer === 'satellite' }\"\r\n                >卫星地图</span\r\n              >\r\n            </a-menu-item>\r\n          </a-menu>\r\n        </template>\r\n      </a-dropdown>\r\n\r\n      <!-- <button @click=\"startDrawing\" class=\"map-button\">开始画线</button>\r\n      <button @click=\"calculateDistance\" class=\"map-button\">计算距离</button>\r\n      <button @click=\"clearDrawing\" class=\"map-button\">清除线</button> -->\r\n\r\n      <a-dropdown\r\n        :visible=\"operationDropdownVisible\"\r\n        @visibleChange=\"handleOperationDropdown\"\r\n        trigger=\"click\"\r\n      >\r\n        <!-- 触发按钮 -->\r\n        <a-button type=\"primary\" shape=\"round\" @click=\"handleOperationDropdown\">\r\n          操作\r\n        </a-button>\r\n\r\n        <!-- 下拉菜单 -->\r\n        <template #overlay>\r\n          <a-menu>\r\n            <a-menu-item key=\"drawLine\" @click=\"handleDrawLine\">\r\n              <span>画线</span>\r\n            </a-menu-item>\r\n            <a-menu-item key=\"measureDistance\" @click=\"handleMeasureDistance\">\r\n              <span>测距</span>\r\n            </a-menu-item>\r\n            <a-menu-item key=\"clearLine\" @click=\"handleClearLine\">\r\n              <span>清除线</span>\r\n            </a-menu-item>\r\n          </a-menu>\r\n        </template>\r\n      </a-dropdown>\r\n    </div>\r\n    <!-- 小地图容器 -->\r\n    <div\r\n      id=\"overview-map\"\r\n      style=\"\r\n        position: absolute;\r\n        bottom: 10px;\r\n        right: 10px;\r\n        width: 200px;\r\n        height: 150px;\r\n        border: 1px solid #000;\r\n        z-index: 100;\r\n      \"\r\n    ></div>\r\n  </div>\r\n\r\n  <a-modal\r\n    v-model:visible=\"isModalVisible\"\r\n    title=\"距离信息\"\r\n    @ok=\"handleOk\"\r\n    @cancel=\"handleCancel\"\r\n  >\r\n    <p>{{ distanceInfo }}</p>\r\n  </a-modal>\r\n</template>\r\n\r\n<script>\r\nimport { ref, onMounted, nextTick } from \"vue\";\r\nimport { getRanderingSorted, getPointSorted } from \"@/api/rendering\";\r\n\r\nexport default {\r\n  name: \"MapWindow\",\r\n  setup() {\r\n    const map = ref(null);\r\n    const polygons = ref([]); // 存储多边形对象\r\n    const markers = ref([]); // 存储标记点对象\r\n    const currentLayer = ref(\"vector\"); // 当前图层（矢量或卫星）\r\n    const isDropdownVisible = ref(false); // 下拉菜单是否显示\r\n    const operationDropdownVisible = ref(false); // 操作下拉菜单是否显示\r\n    let vectorLayer = null;\r\n    let satelliteLayer = null;\r\n    let overviewMap = null; // 小地图变量\r\n    let overviewRect = null; // 用于小地图中的框\r\n    let rangingTool = null; // 定义测距工具变量\r\n\r\n    let polyline = null; // 声明画线对象\r\n    const linePath = ref([]); // 画线的路径\r\n    const drawingMode = ref(false); // 是否开启画线模式\r\n\r\n    const isModalVisible = ref(false); // 控制Modal显示\r\n    const distanceInfo = ref(\"\"); // 存储距离信息\r\n\r\n    // 加载并初始化地图\r\n    const loadAMapApi = () => {\r\n      const script = document.createElement(\"script\");\r\n      script.type = \"text/javascript\";\r\n      script.src =\r\n        \"https://webapi.amap.com/maps?v=2.0&key=a6042dfaa8137c1bd9f59034cd3021a3\";\r\n      document.head.appendChild(script);\r\n\r\n      script.onload = () => {\r\n        initMap();\r\n      };\r\n    };\r\n\r\n    const initMap = () => {\r\n      if (!AMap) {\r\n        console.error(\"AMap is not defined!\");\r\n        return;\r\n      }\r\n\r\n      // 初始化图层\r\n      vectorLayer = new AMap.createDefaultLayer({\r\n        zooms: [3, 20],\r\n        visible: true,\r\n        opacity: 1,\r\n        zIndex: 0,\r\n      }); // 矢量图层\r\n      satelliteLayer = new AMap.TileLayer.Satellite(); // 卫星图层\r\n\r\n      // 初始化地图\r\n      map.value = new AMap.Map(\"container\", {\r\n        viewMode: \"2D\",\r\n        zoom: 16.3,\r\n        center: [113.266949, 35.188365], // 地图中心\r\n        layers: [vectorLayer], // 默认加载矢量图层\r\n      });\r\n\r\n      // 加载工具条控件\r\n      AMap.plugin([\"AMap.ToolBar\"], () => {\r\n        const toolBarControl = new AMap.ToolBar();\r\n        map.value.addControl(toolBarControl);\r\n      });\r\n\r\n      // 加载测距工具插件\r\n      AMap.plugin(\"AMap.RangingTool\", () => {\r\n        rangingTool = new AMap.RangingTool(map.value); // 初始化测距工具\r\n        rangingTool.on(\"end\", (event) => {\r\n          console.log(\"测距结束:\", event);\r\n        });\r\n\r\n        // 点击右键时，停止测距工具\r\n        map.value.on(\"rightclick\", () => {\r\n          rangingTool.turnOff(); // 关闭测距工具\r\n        });\r\n      });\r\n\r\n      // 获取并渲染多边形和标记点数据\r\n      fetchPolygons();\r\n      fetchBicyclePoints();\r\n\r\n      // // 添加 Valid_area 范围的多边形\r\n      // const Valid_area = [\r\n      //   [\r\n      //     [\r\n      //       [113.256395, 35.190641],\r\n      //       [113.257839, 35.183192],\r\n      //       [113.258212, 35.182905],\r\n      //       [113.258597, 35.18288],\r\n      //       [113.276622, 35.185157],\r\n      //       [113.274351, 35.196294],\r\n      //       [113.274176, 35.196435],\r\n      //       [113.273903, 35.196433],\r\n      //       [113.27348, 35.196239],\r\n      //       [113.271625, 35.194724],\r\n      //       [113.270753, 35.193288],\r\n      //       [113.267986, 35.192422],\r\n      //       [113.261557, 35.191206],\r\n      //       [113.256395, 35.190641],\r\n      //     ],\r\n      //   ],\r\n      // ];\r\n\r\n      // const polygon = new AMap.Polygon({\r\n      //   path: Valid_area, // 多边形路径\r\n      //   fillColor: \"#ccebc5\", // 多边形填充颜色\r\n      //   strokeOpacity: 1, // 线条透明度\r\n      //   fillOpacity: 0.5, // 填充透明度\r\n      //   strokeColor: \"#ff0000\", // 线条颜色\r\n      //   strokeWeight: 3, // 线条宽度\r\n      //   strokeStyle: \"dashed\", // 线样式\r\n      //   strokeDasharray: [5, 5], // 虚线样式\r\n      // });\r\n\r\n      // // 鼠标移入多边形时改变填充色和透明度\r\n      // polygon.on(\"mouseover\", () => {\r\n      //   polygon.setOptions({\r\n      //     fillOpacity: 0.1, // 多边形填充透明度\r\n      //     fillColor: \"#7bccc4\",\r\n      //   });\r\n      // });\r\n\r\n      // // 将多边形添加到地图\r\n      // map.value.add(polygon);\r\n\r\n      // 初始化鹰眼图\r\n      nextTick(() => {\r\n        initOverviewMap();\r\n      });\r\n\r\n      // 监听地图点击事件以绘制路径\r\n      map.value.on(\"click\", (e) => {\r\n        if (!drawingMode.value) return;\r\n\r\n        const { lng, lat } = e.lnglat;\r\n        linePath.value.push([lng, lat]);\r\n        console.log(\"添加点到路径:\", [lng, lat]);\r\n\r\n        if (polyline) {\r\n          polyline.setPath(linePath.value);\r\n        } else {\r\n          polyline = new AMap.Polyline({\r\n            path: linePath.value,\r\n            strokeColor: \"#FF0000\",\r\n            strokeWeight: 3,\r\n          });\r\n          map.value.add(polyline);\r\n        }\r\n      });\r\n\r\n      map.value.on(\"dblclick\", () => {\r\n        console.log(\r\n          \"Double click event triggered, drawingMode:\",\r\n          drawingMode.value\r\n        );\r\n        if (drawingMode.value) {\r\n          drawingMode.value = false;\r\n          console.log(\"Ending drawing mode\");\r\n        } else {\r\n          console.log(\"Drawing mode is already false\");\r\n        }\r\n      });\r\n    };\r\n\r\n    // 初始化小地图（鹰眼图）\r\n    const initOverviewMap = () => {\r\n      overviewMap = new AMap.Map(\"overview-map\", {\r\n        zoom: 13.5, // 设置鹰眼图缩放级别\r\n        center: map.value.getCenter(), // 设置小地图中心点为大地图中心\r\n        viewMode: \"2D\", // 小地图模式\r\n        zooms: [3, 15], // 小地图缩放级别\r\n      });\r\n\r\n      // 小地图上的框，用于显示大地图的显示区域\r\n      overviewRect = new AMap.Rectangle({\r\n        bounds: map.value.getBounds(),\r\n        strokeColor: \"#F00\",\r\n        strokeWeight: 2,\r\n        fillOpacity: 0.3,\r\n        fillColor: \"#FF0\",\r\n      });\r\n      overviewMap.add(overviewRect);\r\n\r\n      // 监听大地图的移动事件，更新小地图视图\r\n      map.value.on(\"move\", () => {\r\n        const center = map.value.getCenter();\r\n        overviewMap.setCenter(center); // 更新小地图中心\r\n        updateOverviewRect(); // 更新小地图的显示框\r\n      });\r\n\r\n      // 监听大地图的缩放事件，更新小地图的框\r\n      map.value.on(\"zoomend\", () => {\r\n        updateOverviewRect(); // 更新显示框\r\n      });\r\n\r\n      // 监听鼠标的移动事件\r\n      map.value.on(\"mousemove\", () => {\r\n        updateOverviewRect(); // 鼠标移动时，更新小地图框\r\n      });\r\n    };\r\n\r\n    // 更新小地图上的显示框\r\n    const updateOverviewRect = () => {\r\n      const bounds = map.value.getBounds();\r\n      overviewRect.setBounds(bounds); // 设置小地图上的框为大地图当前显示区域\r\n    };\r\n\r\n    // 控制下拉菜单的显示状态\r\n    const toggleDropdown = (visible) => {\r\n      isDropdownVisible.value =\r\n        visible !== undefined ? visible : !isDropdownVisible.value;\r\n    };\r\n\r\n    const handleOperationDropdown = (visible) => {\r\n      operationDropdownVisible.value =\r\n        visible !== undefined ? visible : !operationDropdownVisible.value;\r\n    };\r\n\r\n    // 图层切换逻辑\r\n    const switchToVector = () => {\r\n      if (currentLayer.value !== \"vector\") {\r\n        map.value.setLayers([vectorLayer]);\r\n        currentLayer.value = \"vector\";\r\n      }\r\n    };\r\n\r\n    const switchToSatellite = () => {\r\n      if (currentLayer.value !== \"satellite\") {\r\n        map.value.setLayers([satelliteLayer]);\r\n        currentLayer.value = \"satellite\";\r\n      }\r\n    };\r\n\r\n    // 获取并渲染多边形数据\r\n    const fetchPolygons = async () => {\r\n      try {\r\n        const response = await getRanderingSorted();\r\n        console.log(\"Polygons Response:\", response.data);\r\n\r\n        if (response.data.code === 0 && Array.isArray(response.data.data)) {\r\n          const formattedPolygons = response.data.data.map((item) => {\r\n            const coordinates = item.coordinates;\r\n            console.log(coordinates);\r\n            const polygon = new AMap.Polygon({\r\n              path: coordinates,\r\n              fillColor: \"#efebe2\",\r\n              strokeOpacity: 1,\r\n              fillOpacity: 0.5,\r\n              strokeColor: \"#2b8cbe\",\r\n              strokeWeight: 1,\r\n              strokeStyle: \"dashed\",\r\n              strokeDasharray: [5, 5],\r\n            });\r\n            return polygon;\r\n          });\r\n\r\n          polygons.value = formattedPolygons;\r\n\r\n          // 延迟添加多边形到地图\r\n          setTimeout(() => {\r\n            addPolygonsToMap(polygons.value);\r\n          }, 500);\r\n        } else {\r\n          console.error(\"Invalid polygon data format\", response.data);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error fetching polygons:\", error);\r\n      }\r\n    };\r\n\r\n    // 获取并渲染自行车点数据\r\n    const fetchBicyclePoints = async () => {\r\n      try {\r\n        const response = await getPointSorted();\r\n        console.log(\"Bicycles Response:\", response.data);\r\n\r\n        if (response.data.code === 0 && Array.isArray(response.data.data)) {\r\n          const bicycles = response.data.data;\r\n\r\n          // 延迟添加点到地图\r\n          setTimeout(() => {\r\n            addMarkersToMap(bicycles);\r\n          }, 500);\r\n        } else {\r\n          console.error(\"Invalid bicycle data format\", response.data);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error fetching bicycles:\", error);\r\n      }\r\n    };\r\n\r\n    // 将多边形添加到地图\r\n    const addPolygonsToMap = (polygons) => {\r\n      polygons.forEach((polygon) => map.value.add(polygon));\r\n    };\r\n\r\n    // 将自行车点添加到地图\r\n    const addMarkersToMap = (bicycles) => {\r\n      bicycles.forEach((bicycle) => {\r\n        const { id, coordinates } = bicycle;\r\n        const marker = new AMap.Marker({\r\n          position: new AMap.LngLat(coordinates[0], coordinates[1]),\r\n          title: `Bicycle ID: ${id}`,\r\n        });\r\n        markers.value.push(marker);\r\n        map.value.add(marker);\r\n      });\r\n    };\r\n\r\n    // 功能按钮逻辑\r\n    const resetView = () => {\r\n      map.value.setZoomAndCenter(16.3, [113.266949, 35.188365]);\r\n    };\r\n\r\n    const clearPolygons = () => {\r\n      polygons.value.forEach((polygon) => map.value.remove(polygon));\r\n      polygons.value = [];\r\n    };\r\n\r\n    const clearMarkers = () => {\r\n      markers.value.forEach((marker) => map.value.remove(marker));\r\n      markers.value = [];\r\n    };\r\n\r\n    // 开始画线\r\n    const startDrawing = () => {\r\n      console.log(\"开始画线被点击\");\r\n      drawingMode.value = true;\r\n      linePath.value = []; // 清空之前的路径\r\n      if (polyline) {\r\n        map.value.remove(polyline);\r\n        polyline = null;\r\n      }\r\n      console.log(\"开始画线\");\r\n    };\r\n\r\n    // 计算路径长度\r\n    const calculateDistance = () => {\r\n      if (linePath.value.length < 2) {\r\n        console.log(\"路径点不足，无法计算距离\");\r\n        return;\r\n      }\r\n      const totalLength = AMap.GeometryUtil.distanceOfLine(linePath.value);\r\n      distanceInfo.value = `路径总长度：${totalLength.toFixed(2)} 米`; // 设置距离信息\r\n      isModalVisible.value = true; // 显示Modal\r\n    };\r\n\r\n    const handleOk = () => {\r\n      isModalVisible.value = false;\r\n    };\r\n\r\n    const handleCancel = () => {\r\n      isModalVisible.value = false;\r\n    };\r\n\r\n    const clearDrawing = () => {\r\n      if (polyline) {\r\n        polyline.setMap(null); // 从地图中移除线\r\n        polyline = null; // 清空对象\r\n        linePath.value = []; // 清空路径\r\n        console.log(\"已清除画线\");\r\n      }\r\n    };\r\n\r\n    // 初始化时加载地图\r\n    onMounted(() => {\r\n      loadAMapApi();\r\n    });\r\n\r\n    return {\r\n      currentLayer,\r\n      switchToVector,\r\n      switchToSatellite,\r\n      resetView,\r\n      clearPolygons,\r\n      clearMarkers,\r\n      toggleDropdown,\r\n      map,\r\n      isDropdownVisible,\r\n      handleOperationDropdown,\r\n      startDrawing,\r\n      calculateDistance,\r\n      isModalVisible,\r\n      distanceInfo,\r\n      handleOk,\r\n      handleCancel,\r\n      clearDrawing,\r\n    };\r\n  },\r\n};\r\n</script>\r\n\r\n<style>\r\nhtml,\r\nbody,\r\n#container {\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n\r\n.map-control {\r\n  position: absolute;\r\n  top: 10px;\r\n  right: 10px;\r\n  z-index: 1000;\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 5px;\r\n}\r\n\r\n.map-control button {\r\n  background-color: #fff;\r\n  border: 1px solid #ccc;\r\n  padding: 8px 12px;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  font-size: 14px;\r\n  transition: background-color 0.3s;\r\n  color: #000;\r\n}\r\n\r\n.map-control button:hover {\r\n  background-color: #f0f0f0;\r\n}\r\n\r\n.map-control button.active {\r\n  background-color: #2b8cbe;\r\n  color: #fff;\r\n  border-color: #2b8cbe;\r\n}\r\n\r\n.map-functions {\r\n  position: absolute;\r\n  bottom: 10px;\r\n  right: 10px;\r\n  z-index: 1000;\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 5px;\r\n}\r\n\r\n.map-functions button {\r\n  background-color: #fff;\r\n  border: 1px solid #ccc;\r\n  padding: 8px 12px;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  font-size: 14px;\r\n  transition: background-color 0.3s;\r\n}\r\n\r\n.map-functions button:hover {\r\n  background-color: #f0f0f0;\r\n}\r\n\r\n.map-control-container {\r\n  position: absolute;\r\n  top: 10px;\r\n  left: 10px;\r\n  z-index: 1000;\r\n  width: 160px;\r\n  background: #fff;\r\n  border: 1px solid #ccc;\r\n  border-radius: 6px;\r\n  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.2);\r\n  font-family: Arial, sans-serif;\r\n  overflow: hidden;\r\n}\r\n\r\n.map-control-header {\r\n  background: #2b8cbe;\r\n  color: #fff;\r\n  padding: 8px;\r\n  text-align: center;\r\n  font-weight: bold;\r\n  border-bottom: 1px solid #ccc;\r\n}\r\n\r\n.map-control-buttons {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 5px;\r\n  padding: 8px;\r\n}\r\n\r\n.map-control-buttons button {\r\n  background-color: #fff;\r\n  border: 1px solid #ccc;\r\n  padding: 8px 12px;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  font-size: 14px;\r\n  text-align: center;\r\n  transition: background-color 0.3s, color 0.3s;\r\n}\r\n\r\n.map-control-buttons button:hover {\r\n  background-color: #f0f0f0;\r\n}\r\n\r\n.map-control-buttons button.active {\r\n  background-color: #2b8cbe;\r\n  color: #fff;\r\n  border-color: #2b8cbe;\r\n}\r\n\r\n#overview-map {\r\n  position: absolute;\r\n  top: 10px;\r\n  left: 10px; /* 放在左上角 */\r\n  width: 200px;\r\n  height: 150px;\r\n  border: 1px solid #000;\r\n  z-index: 100;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
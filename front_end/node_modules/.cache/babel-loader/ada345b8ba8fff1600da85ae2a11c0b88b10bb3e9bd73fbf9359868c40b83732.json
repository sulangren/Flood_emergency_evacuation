{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.find.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport { ref, onMounted, computed } from \"vue\";\nimport { getRanderingSorted } from \"@/api/rendering\";\nimport { getCenterPointRegister, topPathRegister } from \"@/api/function\";\nimport { Form, Input, Row } from \"ant-design-vue\";\nexport default {\n  name: \"MapWindow\",\n  components: {\n    \"a-form-item\": Form.Item,\n    Form,\n    Input,\n    Row\n  },\n  setup() {\n    const map = ref(null);\n    const polygons = ref([]);\n    const tableData = ref([]); // 存储表格数据\n    const dispatchRoutes = ref([]); // 新增：存储调度路线数据\n\n    // 分页参数\n    const currentPage = ref(1); // 当前页\n    const pageSize = ref(5); // 每页显示的数量\n\n    // 初始化表单对象\n    const form = ref({\n      vehicleCount: \"\" // 表单中的运输车辆容量\n    });\n\n    // 加载并初始化地图\n    const loadAMapApi = () => {\n      const script = document.createElement(\"script\");\n      script.type = \"text/javascript\";\n      script.src = \"https://webapi.amap.com/maps?v=2.0&key=a6042dfaa8137c1bd9f59034cd3021a3\"; // 请替换为有效的高德地图API Key\n      document.head.appendChild(script);\n      script.onload = () => {\n        initMap();\n      };\n    };\n    const initMap = () => {\n      const layer = new AMap.createDefaultLayer({\n        zooms: [3, 20],\n        visible: true,\n        opacity: 1,\n        zIndex: 0\n      });\n      map.value = new AMap.Map(\"container\", {\n        viewMode: \"2D\",\n        zoom: 16.3,\n        center: [113.266949, 35.188365],\n        layer: [layer]\n      });\n    };\n\n    // 获取并渲染数据\n    onMounted(async () => {\n      try {\n        const response = await getRanderingSorted();\n        if (response.data.code === 0 && Array.isArray(response.data.data)) {\n          const formattedPolygons = response.data.data.map(item => {\n            const coordinates = item.coordinates;\n            const polygon = new AMap.Polygon({\n              path: coordinates,\n              fillColor: \"#ccebc5\",\n              strokeOpacity: 1,\n              fillOpacity: 0.5,\n              strokeColor: \"#2b8cbe\",\n              strokeWeight: 1,\n              strokeStyle: \"dashed\",\n              strokeDasharray: [5, 5]\n            });\n            return polygon;\n          });\n          polygons.value = formattedPolygons;\n\n          // 延迟添加多边形到地图\n          setTimeout(() => {\n            addPolygonsToMap(polygons.value);\n          }, 500);\n        } else {\n          console.error(\"Invalid data format\", response.data);\n        }\n      } catch (error) {\n        console.error(\"Error fetching polygons:\", error);\n      }\n    });\n\n    // 将多边形添加到地图\n    const addPolygonsToMap = polygons => {\n      if (Array.isArray(polygons)) {\n        polygons.forEach(polygon => {\n          if (polygon instanceof AMap.Polygon) {\n            map.value.add(polygon);\n          } else {\n            console.error(\"Invalid polygon item\", polygon);\n          }\n        });\n      } else {\n        console.error(\"Polygons is not an array:\", polygons);\n      }\n    };\n    const handleButtonClick = async () => {\n      try {\n        const response = await topPathRegister({\n          capacity: form.value.vehicleCount // 从表单获取车辆容量\n        });\n        console.log(\"API Response:\", response.data); // 打印返回的数据\n\n        // 检查 response.data.data 是否是数组\n        if (response.data && Array.isArray(response.data.data)) {\n          const allData = response.data.data;\n\n          // 更新表格数据并存储调度路线\n          tableData.value = allData.map(item => {\n            // 存储到 dispatchRoutes 数组\n            dispatchRoutes.value.push({\n              dispatchId: item.dispatch_count,\n              startPoint: item.from_coordinates,\n              // 起始坐标\n              endPoint: item.to_coordinates // 终止坐标\n            });\n            return {\n              dispatchId: item.dispatch_count,\n              // 调度 ID\n              startPoint: item.from,\n              // 起始点\n              endPoint: item.to,\n              // 终点\n              scheduleAmount: item.transfer_amount // 调度数量\n            };\n          });\n        } else {\n          console.error(\"response.data.data is not an array:\", response.data);\n        }\n      } catch (error) {\n        console.error(\"Error fetching schedule data:\", error);\n      }\n    };\n\n    // 开始调度\n    const startDispatch = async dispatchId => {\n      try {\n        // 查找匹配的调度路线\n        const route = dispatchRoutes.value.find(item => item.dispatchId === dispatchId);\n        if (!route) {\n          console.error(`未找到匹配的调度路线: ${dispatchId}`);\n          return;\n        }\n\n        // 使用高德地图骑行导航 API 显示路线\n        const riding = new AMap.Riding({\n          map: map.value\n        });\n        riding.search(route.startPoint, route.endPoint, (status, result) => {\n          if (status === \"complete\") {\n            console.log(\"骑行路线规划成功:\", result);\n          } else {\n            console.error(\"骑行路线规划失败:\", result);\n          }\n        });\n      } catch (error) {\n        console.error(\"调度启动失败\", error);\n      }\n    };\n\n    // 分页：计算当前页的数据\n    const currentPageData = computed(() => {\n      const start = (currentPage.value - 1) * pageSize.value;\n      const end = currentPage.value * pageSize.value;\n      return tableData.value.slice(start, end);\n    });\n\n    // 计算总页数\n    const totalPages = computed(() => {\n      return Math.ceil(tableData.value.length / pageSize.value);\n    });\n\n    // 改变页面\n    const changePage = newPage => {\n      if (newPage >= 1 && newPage <= totalPages.value) {\n        currentPage.value = newPage;\n      }\n    };\n\n    // 加载并初始化地图 API\n    onMounted(() => {\n      loadAMapApi();\n    });\n    return {\n      map,\n      polygons,\n      tableData,\n      // 表格数据\n      handleButtonClick,\n      startDispatch,\n      form,\n      currentPageData,\n      currentPage,\n      totalPages,\n      changePage\n    };\n  }\n};","map":{"version":3,"names":["ref","onMounted","computed","getRanderingSorted","getCenterPointRegister","topPathRegister","Form","Input","Row","name","components","Item","setup","map","polygons","tableData","dispatchRoutes","currentPage","pageSize","form","vehicleCount","loadAMapApi","script","document","createElement","type","src","head","appendChild","onload","initMap","layer","AMap","createDefaultLayer","zooms","visible","opacity","zIndex","value","Map","viewMode","zoom","center","response","data","code","Array","isArray","formattedPolygons","item","coordinates","polygon","Polygon","path","fillColor","strokeOpacity","fillOpacity","strokeColor","strokeWeight","strokeStyle","strokeDasharray","setTimeout","addPolygonsToMap","console","error","forEach","add","handleButtonClick","capacity","log","allData","push","dispatchId","dispatch_count","startPoint","from_coordinates","endPoint","to_coordinates","from","to","scheduleAmount","transfer_amount","startDispatch","route","find","riding","Riding","search","status","result","currentPageData","start","end","slice","totalPages","Math","ceil","length","changePage","newPage"],"sources":["E:\\code\\Django\\project\\front\\front\\src\\components\\LocationWindow.vue"],"sourcesContent":["<template>\r\n  <div class=\"map-container\">\r\n    <!-- 地图容器 -->\r\n    <div id=\"container\" class=\"map\"></div>\r\n\r\n    <!-- 右侧面板容器 -->\r\n    <div class=\"right-sidebar\">\r\n      <Form :model=\"form\" @finish=\"handleButtonClick\">\r\n        <Row :gutter=\"16\">\r\n          <a-form-item label=\"运输车辆容量\" name=\"vehicleCount\" hasFeedback>\r\n            <Input\r\n              v-model:value=\"form.vehicleCount\"\r\n              placeholder=\"输入大于5的整数\"\r\n            />\r\n          </a-form-item>\r\n        </Row>\r\n        <Row>\r\n          <a-form-item>\r\n            <button class=\"action-button\">生成运输方案</button>\r\n          </a-form-item>\r\n        </Row>\r\n      </Form>\r\n\r\n      <!-- 表格展示调度数据 -->\r\n      <table class=\"data-table\">\r\n        <thead>\r\n          <tr>\r\n            <th>调度ID</th>\r\n            <th>起始点</th>\r\n            <th>终点</th>\r\n            <th>调度数量</th>\r\n            <th>开始调度</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <!-- 动态渲染表格数据 -->\r\n          <tr v-for=\"(row, index) in currentPageData\" :key=\"index\">\r\n            <td>{{ row.dispatchId }}</td>\r\n            <td>{{ row.startPoint }}</td>\r\n            <td>{{ row.endPoint }}</td>\r\n            <td>{{ row.scheduleAmount }}</td>\r\n            <td>\r\n              <button\r\n                @click=\"startDispatch(row.dispatchId)\"\r\n                class=\"start-dispatch-button\"\r\n              >\r\n                开始调度\r\n              </button>\r\n            </td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n\r\n      <!-- 分页控件 -->\r\n      <div class=\"pagination\">\r\n        <button\r\n          @click=\"changePage(currentPage - 1)\"\r\n          :disabled=\"currentPage <= 1\"\r\n        >\r\n          上一页\r\n        </button>\r\n        <span>第 {{ currentPage }} 页</span>\r\n        <button\r\n          @click=\"changePage(currentPage + 1)\"\r\n          :disabled=\"currentPage >= totalPages\"\r\n        >\r\n          下一页\r\n        </button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, onMounted, computed } from \"vue\";\r\nimport { getRanderingSorted } from \"@/api/rendering\";\r\nimport { getCenterPointRegister, topPathRegister } from \"@/api/function\";\r\nimport { Form, Input, Row } from \"ant-design-vue\";\r\n\r\nexport default {\r\n  name: \"MapWindow\",\r\n  components: {\r\n    \"a-form-item\": Form.Item,\r\n    Form,\r\n    Input,\r\n    Row,\r\n  },\r\n\r\n  setup() {\r\n    const map = ref(null);\r\n    const polygons = ref([]);\r\n    const tableData = ref([]); // 存储表格数据\r\n    const dispatchRoutes = ref([]); // 新增：存储调度路线数据\r\n\r\n    // 分页参数\r\n    const currentPage = ref(1); // 当前页\r\n    const pageSize = ref(5); // 每页显示的数量\r\n\r\n    // 初始化表单对象\r\n    const form = ref({\r\n      vehicleCount: \"\", // 表单中的运输车辆容量\r\n    });\r\n\r\n    // 加载并初始化地图\r\n    const loadAMapApi = () => {\r\n      const script = document.createElement(\"script\");\r\n      script.type = \"text/javascript\";\r\n      script.src =\r\n        \"https://webapi.amap.com/maps?v=2.0&key=a6042dfaa8137c1bd9f59034cd3021a3\"; // 请替换为有效的高德地图API Key\r\n      document.head.appendChild(script);\r\n\r\n      script.onload = () => {\r\n        initMap();\r\n      };\r\n    };\r\n\r\n    const initMap = () => {\r\n      const layer = new AMap.createDefaultLayer({\r\n        zooms: [3, 20],\r\n        visible: true,\r\n        opacity: 1,\r\n        zIndex: 0,\r\n      });\r\n\r\n      map.value = new AMap.Map(\"container\", {\r\n        viewMode: \"2D\",\r\n        zoom: 16.3,\r\n        center: [113.266949, 35.188365],\r\n        layer: [layer],\r\n      });\r\n    };\r\n\r\n    // 获取并渲染数据\r\n    onMounted(async () => {\r\n      try {\r\n        const response = await getRanderingSorted();\r\n        if (response.data.code === 0 && Array.isArray(response.data.data)) {\r\n          const formattedPolygons = response.data.data.map((item) => {\r\n            const coordinates = item.coordinates;\r\n            const polygon = new AMap.Polygon({\r\n              path: coordinates,\r\n              fillColor: \"#ccebc5\",\r\n              strokeOpacity: 1,\r\n              fillOpacity: 0.5,\r\n              strokeColor: \"#2b8cbe\",\r\n              strokeWeight: 1,\r\n              strokeStyle: \"dashed\",\r\n              strokeDasharray: [5, 5],\r\n            });\r\n            return polygon;\r\n          });\r\n\r\n          polygons.value = formattedPolygons;\r\n\r\n          // 延迟添加多边形到地图\r\n          setTimeout(() => {\r\n            addPolygonsToMap(polygons.value);\r\n          }, 500);\r\n        } else {\r\n          console.error(\"Invalid data format\", response.data);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error fetching polygons:\", error);\r\n      }\r\n    });\r\n\r\n    // 将多边形添加到地图\r\n    const addPolygonsToMap = (polygons) => {\r\n      if (Array.isArray(polygons)) {\r\n        polygons.forEach((polygon) => {\r\n          if (polygon instanceof AMap.Polygon) {\r\n            map.value.add(polygon);\r\n          } else {\r\n            console.error(\"Invalid polygon item\", polygon);\r\n          }\r\n        });\r\n      } else {\r\n        console.error(\"Polygons is not an array:\", polygons);\r\n      }\r\n    };\r\n\r\n    const handleButtonClick = async () => {\r\n      try {\r\n        const response = await topPathRegister({\r\n          capacity: form.value.vehicleCount, // 从表单获取车辆容量\r\n        });\r\n\r\n        console.log(\"API Response:\", response.data); // 打印返回的数据\r\n\r\n        // 检查 response.data.data 是否是数组\r\n        if (response.data && Array.isArray(response.data.data)) {\r\n          const allData = response.data.data;\r\n\r\n          // 更新表格数据并存储调度路线\r\n          tableData.value = allData.map((item) => {\r\n            // 存储到 dispatchRoutes 数组\r\n            dispatchRoutes.value.push({\r\n              dispatchId: item.dispatch_count,\r\n              startPoint: item.from_coordinates, // 起始坐标\r\n              endPoint: item.to_coordinates, // 终止坐标\r\n            });\r\n\r\n            return {\r\n              dispatchId: item.dispatch_count, // 调度 ID\r\n              startPoint: item.from, // 起始点\r\n              endPoint: item.to, // 终点\r\n              scheduleAmount: item.transfer_amount, // 调度数量\r\n            };\r\n          });\r\n        } else {\r\n          console.error(\"response.data.data is not an array:\", response.data);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error fetching schedule data:\", error);\r\n      }\r\n    };\r\n\r\n    // 开始调度\r\n    const startDispatch = async (dispatchId) => {\r\n      try {\r\n        // 查找匹配的调度路线\r\n        const route = dispatchRoutes.value.find(\r\n          (item) => item.dispatchId === dispatchId\r\n        );\r\n\r\n        if (!route) {\r\n          console.error(`未找到匹配的调度路线: ${dispatchId}`);\r\n          return;\r\n        }\r\n\r\n        // 使用高德地图骑行导航 API 显示路线\r\n        const riding = new AMap.Riding({\r\n          map: map.value,\r\n        });\r\n\r\n        riding.search(route.startPoint, route.endPoint, (status, result) => {\r\n          if (status === \"complete\") {\r\n            console.log(\"骑行路线规划成功:\", result);\r\n          } else {\r\n            console.error(\"骑行路线规划失败:\", result);\r\n          }\r\n        });\r\n      } catch (error) {\r\n        console.error(\"调度启动失败\", error);\r\n      }\r\n    };\r\n\r\n    // 分页：计算当前页的数据\r\n    const currentPageData = computed(() => {\r\n      const start = (currentPage.value - 1) * pageSize.value;\r\n      const end = currentPage.value * pageSize.value;\r\n      return tableData.value.slice(start, end);\r\n    });\r\n\r\n    // 计算总页数\r\n    const totalPages = computed(() => {\r\n      return Math.ceil(tableData.value.length / pageSize.value);\r\n    });\r\n\r\n    // 改变页面\r\n    const changePage = (newPage) => {\r\n      if (newPage >= 1 && newPage <= totalPages.value) {\r\n        currentPage.value = newPage;\r\n      }\r\n    };\r\n\r\n    // 加载并初始化地图 API\r\n    onMounted(() => {\r\n      loadAMapApi();\r\n    });\r\n\r\n    return {\r\n      map,\r\n      polygons,\r\n      tableData, // 表格数据\r\n      handleButtonClick,\r\n      startDispatch,\r\n      form,\r\n      currentPageData,\r\n      currentPage,\r\n      totalPages,\r\n      changePage,\r\n    };\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\nhtml,\r\nbody,\r\n#container {\r\n  margin: 0;\r\n  padding: 0;\r\n  height: 100%;\r\n}\r\n\r\n.map-container {\r\n  display: flex;\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n\r\n.map {\r\n  flex-grow: 1;\r\n  height: 100%;\r\n}\r\n\r\n.right-sidebar {\r\n  width: 450px;\r\n  background-color: #fff;\r\n  padding: 20px;\r\n  border-radius: 10px;\r\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);\r\n  overflow-y: auto;\r\n}\r\n\r\n.action-button {\r\n  width: 100%;\r\n  padding: 10px;\r\n  background-color: #4caf50;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 5px;\r\n  font-size: 16px;\r\n  cursor: pointer;\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.action-button:hover {\r\n  background-color: #45a049;\r\n}\r\n\r\n.data-table {\r\n  width: 100%;\r\n  border-collapse: collapse;\r\n}\r\n\r\n.data-table th,\r\n.data-table td {\r\n  border: 1px solid #ddd;\r\n  padding: 8px;\r\n  text-align: left;\r\n}\r\n\r\n.data-table th {\r\n  background-color: #f2f2f2;\r\n}\r\n\r\n.start-dispatch-button {\r\n  padding: 5px 10px;\r\n  background-color: #008cba;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n}\r\n\r\n.start-dispatch-button:hover {\r\n  background-color: #007b9f;\r\n}\r\n\r\n/* 分页器样式 */\r\n.pagination {\r\n  display: flex;\r\n  justify-content: center;\r\n  margin-top: 10px;\r\n}\r\n\r\n.pagination button {\r\n  padding: 5px 10px;\r\n  margin: 0 10px;\r\n  background-color: #007b9f;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n}\r\n\r\n.pagination button[disabled] {\r\n  background-color: #d3d3d3;\r\n  cursor: not-allowed;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
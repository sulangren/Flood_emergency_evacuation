{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.find.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport { ref, onMounted, computed, nextTick } from \"vue\";\nimport { getRanderingSorted } from \"@/api/rendering\"; // 假设你的接口方法\nimport { getCenterPointRegister, topPathRegister } from \"@/api/function\";\nimport { Form, Input, Row } from \"ant-design-vue\";\nexport default {\n  name: \"MapWindow\",\n  components: {\n    \"a-form-item\": Form.Item,\n    Form,\n    Input,\n    Row\n  },\n  setup() {\n    const map = ref(null);\n    const polygons = ref([]); // 存储多边形\n    const tableData = ref([]); // 存储表格数据\n    const markers = ref([]); // 存储标记\n    const navigationData = ref([]); // 存储导航数据\n    const one = ref([]);\n    let overviewMap = null; // 小地图变量\n    let overviewRect = null; // 用于小地图中的框\n\n    // 分页参数\n    const currentPage = ref(1); // 当前页\n    const pageSize = ref(5); // 每页显示的数量\n\n    // 初始化表单对象\n    const form = ref({\n      vehicleCount: \"\" // 表单中的运输车辆容量\n    });\n    let polyline = null; // 声明画线对象\n    const linePath = ref([]); // 画线的路径\n    let drawingMode = false; // 是否开启画线模式\n\n    // 加载并初始化地图\n    const loadAMapApi = () => {\n      window._AMapSecurityConfig = {\n        securityJsCode: \"e81516c693797208565e290f0cc83b6e\" // 替换为你的安全密钥\n      };\n      const script = document.createElement(\"script\");\n      script.type = \"text/javascript\";\n      script.src = \"https://webapi.amap.com/maps?v=2.0&key=a6042dfaa8137c1bd9f59034cd3021a3\"; // 请替换为有效的高德地图API Key\n      document.head.appendChild(script);\n      script.onload = () => {\n        initMap();\n      };\n    };\n    const initMap = () => {\n      const layer = new AMap.createDefaultLayer({\n        zooms: [3, 20],\n        visible: true,\n        opacity: 1,\n        zIndex: 0\n      });\n      map.value = new AMap.Map(\"container\", {\n        viewMode: \"2D\",\n        zoom: 16.3,\n        center: [113.266949, 35.188365],\n        layer: [layer]\n      });\n\n      // 加载驾车插件\n      AMap.plugin([\"AMap.Driving\"], () => {\n        console.log(\"Driving plugin loaded successfully\");\n      });\n      initOverviewMap();\n\n      // 监听地图点击事件以绘制路径\n      map.value.on(\"click\", e => {\n        if (!drawingMode.value) return;\n        const {\n          lng,\n          lat\n        } = e.lnglat;\n        linePath.value.push([lng, lat]);\n        console.log(\"添加点到路径:\", [lng, lat]);\n        if (polyline) {\n          polyline.setPath(linePath.value);\n        } else {\n          polyline = new AMap.Polyline({\n            path: linePath.value,\n            strokeColor: \"#FF0000\",\n            strokeWeight: 3\n          });\n          map.value.add(polyline);\n        }\n      });\n\n      // 监听双击事件以结束画线\n      map.value.on(\"dblclick\", () => {\n        if (drawingMode.value) {\n          drawingMode.value = false;\n          console.log(\"结束画线\");\n        }\n      });\n    };\n\n    // 获取并渲染数据\n    onMounted(async () => {\n      try {\n        const response = await getRanderingSorted();\n        if (response.data.code === 0 && Array.isArray(response.data.data)) {\n          const formattedPolygons = response.data.data.map(item => {\n            const coordinates = item.coordinates;\n            const polygon = new AMap.Polygon({\n              path: coordinates,\n              fillColor: \"#ccebc5\",\n              strokeOpacity: 1,\n              fillOpacity: 0.5,\n              strokeColor: \"#2b8cbe\",\n              strokeWeight: 1,\n              strokeStyle: \"dashed\",\n              strokeDasharray: [5, 5]\n            });\n            return polygon;\n          });\n          polygons.value = formattedPolygons;\n\n          // 延迟添加多边形到地图\n          setTimeout(() => {\n            addPolygonsToMap(polygons.value);\n          }, 500);\n\n          // // 初始化鹰眼图\n          // nextTick(() => {\n          //   initOverviewMap();\n          // });\n        } else {\n          console.error(\"Invalid data format\", response.data);\n        }\n      } catch (error) {\n        console.error(\"Error fetching polygons:\", error);\n      }\n    });\n\n    // 初始化小地图（鹰眼图）\n    const initOverviewMap = () => {\n      overviewMap = new AMap.Map(\"overview-map\", {\n        zoom: 13.5,\n        // 设置鹰眼图缩放级别\n        center: map.value.getCenter(),\n        // 设置小地图中心点为大地图中心\n        viewMode: \"2D\",\n        // 小地图模式\n        zooms: [3, 15] // 小地图缩放级别\n      });\n\n      // 小地图上的框，用于显示大地图的显示区域\n      overviewRect = new AMap.Rectangle({\n        bounds: map.value.getBounds(),\n        strokeColor: \"#F00\",\n        strokeWeight: 2,\n        fillOpacity: 0.3,\n        fillColor: \"#FF0\"\n      });\n      overviewMap.add(overviewRect);\n\n      // 监听大地图的移动事件，更新小地图视图\n      map.value.on(\"move\", () => {\n        const center = map.value.getCenter();\n        overviewMap.setCenter(center); // 更新小地图中心\n        updateOverviewRect(); // 更新小地图的显示框\n      });\n\n      // 监听大地图的缩放事件，更新小地图的框\n      map.value.on(\"zoomend\", () => {\n        updateOverviewRect(); // 更新显示框\n      });\n\n      // 监听鼠标的移动事件\n      map.value.on(\"mousemove\", () => {\n        updateOverviewRect(); // 鼠标移动时，更新小地图框\n      });\n    };\n\n    // 更新小地图上的显示框\n    const updateOverviewRect = () => {\n      const bounds = map.value.getBounds();\n      overviewRect.setBounds(bounds); // 设置小地图上的框为大地图当前显示区域\n    };\n    const centerPointRegisters = async () => {\n      try {\n        const response = await getCenterPointRegister();\n        if (response.data.code === 0 && Array.isArray(response.data.data)) {\n          const bicycles = response.data.data;\n          setTimeout(() => {\n            addMarkersToMap(bicycles);\n          }, 500);\n        } else {\n          console.error(\"Invalid bicycle data format\", response.data);\n        }\n      } catch (error) {\n        console.error(\"Error fetching bicycles:\", error);\n      }\n    };\n\n    // 将多边形添加到地图\n    const addPolygonsToMap = polygons => {\n      if (Array.isArray(polygons)) {\n        polygons.forEach(polygon => {\n          if (polygon instanceof AMap.Polygon) {\n            map.value.add(polygon);\n          } else {\n            console.error(\"Invalid polygon item\", polygon);\n          }\n        });\n      } else {\n        console.error(\"Polygons is not an array:\", polygons);\n      }\n    };\n\n    // 将自行车点添加到地图\n    const addMarkersToMap = bicycles => {\n      if (Array.isArray(bicycles)) {\n        bicycles.forEach(bicycle => {\n          const {\n            id,\n            polygon_center\n          } = bicycle;\n          const marker = new AMap.Marker({\n            position: new AMap.LngLat(polygon_center[0], polygon_center[1]),\n            // 设置点的坐标\n            title: `Bicycle ID: ${id}` // 设置点的标题为 ID\n          });\n          markers.value.push(marker); // 将每个点标记保存到 markers 数组\n          map.value.add(marker); // 添加标记到地图\n        });\n      }\n    };\n    const handleButtonClick = async () => {\n      try {\n        const response = await topPathRegister({\n          capacity: form.value.vehicleCount // 从表单获取车辆容量\n        });\n        console.log(\"API Response:\", response.data); // 打印返回的数据\n\n        // 检查 response.data.data 是否是数组\n        if (response.data && Array.isArray(response.data.data)) {\n          const allData = response.data.data;\n\n          // 更新表格数据\n          tableData.value = allData.map(item => ({\n            dispatchId: item.dispatch_count,\n            // 调度数量\n            startPoint: item.from,\n            // 起始点\n            endPoint: item.to,\n            // 终点\n            scheduleAmount: item.transfer_amount // 调度数量\n          }));\n\n          // 更新导航数据\n          navigationData.value = allData.map(item => ({\n            dispatchId: item.dispatch_count,\n            startCoords: item.fromPoint,\n            // 起始点坐标\n            endCoords: item.toPoint // 终止点坐标\n          }));\n        } else {\n          console.error(\"response.data.data is not an array:\", response.data);\n        }\n      } catch (error) {\n        console.error(\"Error fetching schedule data:\", error);\n      }\n    };\n\n    // 开始调度\n    const startDispatch = async dispatchId => {\n      try {\n        console.log(\"dispatchId:\", dispatchId);\n        console.log(\"navigationData.value:\", navigationData.value); // 打印导航数据\n\n        // 清除上一次的路线和标记\n        clearLastRoute();\n\n        // 找到对应的导航数据\n        const navigation = navigationData.value.find(item => item.dispatchId === dispatchId);\n        if (navigation) {\n          const {\n            startCoords,\n            endCoords\n          } = navigation;\n\n          // 检查坐标是否有效\n          if (!startCoords || !endCoords) {\n            console.error(\"起点或终点坐标无效:\", navigation);\n            return;\n          }\n\n          // 确保坐标为有效的 [longitude, latitude] 数组\n          if (!Array.isArray(startCoords) || !Array.isArray(endCoords) || startCoords.length !== 2 || endCoords.length !== 2) {\n            console.error(\"坐标数据无效:\", navigation);\n            return;\n          }\n          const startLngLat = new AMap.LngLat(startCoords[0], startCoords[1]);\n          const endLngLat = new AMap.LngLat(endCoords[0], endCoords[1]);\n\n          // 确保高德地图插件已加载\n          if (window.AMap && window.AMap.Driving) {\n            const driving = new AMap.Driving({\n              map: map.value,\n              // 地图对象\n              panel: null,\n              // 可以设置为显示信息的面板\n              policy: AMap.DrivingPolicy.LEAST_TIME // 选择最短时间路线\n            });\n\n            // 设置起点和终点\n            driving.search(startLngLat, endLngLat, (status, result) => {\n              if (status === \"complete\") {\n                console.log(\"导航成功:\", result);\n                one.value.push(driving);\n                console.log(one.value);\n              } else {\n                console.error(\"导航失败:\", result);\n              }\n            });\n          } else {\n            console.error(\"AMap.Driving 插件未加载.\");\n          }\n        } else {\n          console.error(\"未找到对应的导航数据:\", dispatchId);\n        }\n      } catch (error) {\n        console.error(\"调度启动失败\", error);\n      }\n    };\n\n    // 分页：计算当前页的数据\n    const currentPageData = computed(() => {\n      const start = (currentPage.value - 1) * pageSize.value;\n      const end = currentPage.value * pageSize.value;\n      return tableData.value.slice(start, end);\n    });\n\n    // 计算总页数\n    const totalPages = computed(() => {\n      return Math.ceil(tableData.value.length / pageSize.value);\n    });\n\n    // 改变页面\n    const changePage = newPage => {\n      if (newPage >= 1 && newPage <= totalPages.value) {\n        currentPage.value = newPage;\n      }\n    };\n\n    // 清除上一次的导航路径和标记\n    function clearLastRoute() {\n      if (Array.isArray(one.value) && one.value.length > 0) {\n        one.value.forEach(driving => {\n          if (driving && map.value) {\n            driving.clear(); // 清理路线\n            console.log(\"Cleared route:\", driving);\n          }\n        });\n      }\n      one.value = []; // 清理完毕后再重置\n    }\n\n    // 开始画线\n    const startDrawing = () => {\n      drawingMode.value = true;\n      linePath.value = []; // 清空之前的路径\n      if (polyline) {\n        map.value.remove(polyline);\n        polyline = null;\n      }\n      console.log(\"开始画线\");\n    };\n\n    // 计算路径长度\n    const calculateDistance = () => {\n      if (linePath.value.length < 2) {\n        console.log(\"路径点不足，无法计算距离\");\n        return;\n      }\n      const totalLength = AMap.GeometryUtil.distanceOfLine(linePath.value);\n      console.log(`路径总长度：${totalLength.toFixed(2)} 米`);\n    };\n\n    // 加载并初始化地图 API\n    onMounted(() => {\n      loadAMapApi();\n      centerPointRegisters();\n      initOverviewMap();\n    });\n    return {\n      map,\n      polygons,\n      tableData,\n      // 表格数据\n      handleButtonClick,\n      startDispatch,\n      form,\n      currentPageData,\n      currentPage,\n      totalPages,\n      changePage,\n      startDrawing,\n      calculateDistance\n    };\n  }\n};","map":{"version":3,"names":["ref","onMounted","computed","nextTick","getRanderingSorted","getCenterPointRegister","topPathRegister","Form","Input","Row","name","components","Item","setup","map","polygons","tableData","markers","navigationData","one","overviewMap","overviewRect","currentPage","pageSize","form","vehicleCount","polyline","linePath","drawingMode","loadAMapApi","window","_AMapSecurityConfig","securityJsCode","script","document","createElement","type","src","head","appendChild","onload","initMap","layer","AMap","createDefaultLayer","zooms","visible","opacity","zIndex","value","Map","viewMode","zoom","center","plugin","console","log","initOverviewMap","on","e","lng","lat","lnglat","push","setPath","Polyline","path","strokeColor","strokeWeight","add","response","data","code","Array","isArray","formattedPolygons","item","coordinates","polygon","Polygon","fillColor","strokeOpacity","fillOpacity","strokeStyle","strokeDasharray","setTimeout","addPolygonsToMap","error","getCenter","Rectangle","bounds","getBounds","setCenter","updateOverviewRect","setBounds","centerPointRegisters","bicycles","addMarkersToMap","forEach","bicycle","id","polygon_center","marker","Marker","position","LngLat","title","handleButtonClick","capacity","allData","dispatchId","dispatch_count","startPoint","from","endPoint","to","scheduleAmount","transfer_amount","startCoords","fromPoint","endCoords","toPoint","startDispatch","clearLastRoute","navigation","find","length","startLngLat","endLngLat","Driving","driving","panel","policy","DrivingPolicy","LEAST_TIME","search","status","result","currentPageData","start","end","slice","totalPages","Math","ceil","changePage","newPage","clear","startDrawing","remove","calculateDistance","totalLength","GeometryUtil","distanceOfLine","toFixed"],"sources":["E:\\code\\Django\\project\\front\\front\\src\\components\\LocationWindow.vue"],"sourcesContent":["<template>\r\n  <div class=\"map-container\">\r\n    <!-- 地图容器 -->\r\n    <div id=\"container\" class=\"map\"></div>\r\n\r\n    <!-- 地图上的按钮 -->\r\n    <div class=\"map-controls\">\r\n      <button @click=\"startDrawing\" class=\"map-button\">开始画线</button>\r\n      <button @click=\"calculateDistance\" class=\"map-button\">计算距离</button>\r\n    </div>\r\n\r\n    <!-- 右侧面板容器 -->\r\n    <div class=\"right-sidebar\">\r\n      <Form :model=\"form\" @finish=\"handleButtonClick\">\r\n        <Row :gutter=\"16\">\r\n          <a-form-item label=\"运输车辆容量\" name=\"vehicleCount\" hasFeedback>\r\n            <Input\r\n              v-model:value=\"form.vehicleCount\"\r\n              placeholder=\"输入大于5的整数\"\r\n            />\r\n          </a-form-item>\r\n        </Row>\r\n        <Row>\r\n          <a-form-item>\r\n            <button class=\"action-button\">生成运输方案</button>\r\n          </a-form-item>\r\n        </Row>\r\n      </Form>\r\n\r\n      <!-- 表格展示调度数据 -->\r\n      <table class=\"data-table\">\r\n        <thead>\r\n          <tr>\r\n            <th>调度ID</th>\r\n            <th>起始点</th>\r\n            <th>终点</th>\r\n            <th>调度数量</th>\r\n            <th>开始调度</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <!-- 动态渲染表格数据 -->\r\n          <tr v-for=\"(row, index) in currentPageData\" :key=\"index\">\r\n            <td>{{ row.dispatchId }}</td>\r\n            <td>{{ row.startPoint }}</td>\r\n            <td>{{ row.endPoint }}</td>\r\n            <td>{{ row.scheduleAmount }}</td>\r\n            <td>\r\n              <button\r\n                @click=\"startDispatch(row.dispatchId)\"\r\n                class=\"start-dispatch-button\"\r\n              >\r\n                开始调度\r\n              </button>\r\n            </td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n\r\n      <!-- 分页控件 -->\r\n      <div class=\"pagination\">\r\n        <button\r\n          @click=\"changePage(currentPage - 1)\"\r\n          :disabled=\"currentPage <= 1\"\r\n        >\r\n          上一页\r\n        </button>\r\n        <span>第 {{ currentPage }} 页</span>\r\n        <button\r\n          @click=\"changePage(currentPage + 1)\"\r\n          :disabled=\"currentPage >= totalPages\"\r\n        >\r\n          下一页\r\n        </button>\r\n      </div>\r\n    </div>\r\n    <!-- 小地图容器 -->\r\n    <div\r\n      id=\"overview-map\"\r\n      style=\"\r\n        position: absolute;\r\n        bottom: 10px;\r\n        right: 10px;\r\n        width: 200px;\r\n        height: 150px;\r\n        border: 1px solid #000;\r\n        z-index: 100;\r\n      \"\r\n    ></div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, onMounted, computed, nextTick } from \"vue\";\r\nimport { getRanderingSorted } from \"@/api/rendering\"; // 假设你的接口方法\r\nimport { getCenterPointRegister, topPathRegister } from \"@/api/function\";\r\nimport { Form, Input, Row } from \"ant-design-vue\";\r\n\r\nexport default {\r\n  name: \"MapWindow\",\r\n  components: {\r\n    \"a-form-item\": Form.Item,\r\n    Form,\r\n    Input,\r\n    Row,\r\n  },\r\n\r\n  setup() {\r\n    const map = ref(null);\r\n    const polygons = ref([]); // 存储多边形\r\n    const tableData = ref([]); // 存储表格数据\r\n    const markers = ref([]); // 存储标记\r\n    const navigationData = ref([]); // 存储导航数据\r\n    const one = ref([]);\r\n    let overviewMap = null; // 小地图变量\r\n    let overviewRect = null; // 用于小地图中的框\r\n\r\n    // 分页参数\r\n    const currentPage = ref(1); // 当前页\r\n    const pageSize = ref(5); // 每页显示的数量\r\n\r\n    // 初始化表单对象\r\n    const form = ref({\r\n      vehicleCount: \"\", // 表单中的运输车辆容量\r\n    });\r\n\r\n    let polyline = null; // 声明画线对象\r\n    const linePath = ref([]); // 画线的路径\r\n    let drawingMode = false; // 是否开启画线模式\r\n\r\n    // 加载并初始化地图\r\n    const loadAMapApi = () => {\r\n      window._AMapSecurityConfig = {\r\n        securityJsCode: \"e81516c693797208565e290f0cc83b6e\", // 替换为你的安全密钥\r\n      };\r\n      const script = document.createElement(\"script\");\r\n      script.type = \"text/javascript\";\r\n      script.src =\r\n        \"https://webapi.amap.com/maps?v=2.0&key=a6042dfaa8137c1bd9f59034cd3021a3\"; // 请替换为有效的高德地图API Key\r\n      document.head.appendChild(script);\r\n\r\n      script.onload = () => {\r\n        initMap();\r\n      };\r\n    };\r\n\r\n    const initMap = () => {\r\n      const layer = new AMap.createDefaultLayer({\r\n        zooms: [3, 20],\r\n        visible: true,\r\n        opacity: 1,\r\n        zIndex: 0,\r\n      });\r\n\r\n      map.value = new AMap.Map(\"container\", {\r\n        viewMode: \"2D\",\r\n        zoom: 16.3,\r\n        center: [113.266949, 35.188365],\r\n        layer: [layer],\r\n      });\r\n\r\n      // 加载驾车插件\r\n      AMap.plugin([\"AMap.Driving\"], () => {\r\n        console.log(\"Driving plugin loaded successfully\");\r\n      });\r\n\r\n      initOverviewMap();\r\n\r\n      // 监听地图点击事件以绘制路径\r\n      map.value.on(\"click\", (e) => {\r\n        if (!drawingMode.value) return;\r\n\r\n        const { lng, lat } = e.lnglat;\r\n        linePath.value.push([lng, lat]);\r\n        console.log(\"添加点到路径:\", [lng, lat]);\r\n\r\n        if (polyline) {\r\n          polyline.setPath(linePath.value);\r\n        } else {\r\n          polyline = new AMap.Polyline({\r\n            path: linePath.value,\r\n            strokeColor: \"#FF0000\",\r\n            strokeWeight: 3,\r\n          });\r\n          map.value.add(polyline);\r\n        }\r\n      });\r\n\r\n      // 监听双击事件以结束画线\r\n      map.value.on(\"dblclick\", () => {\r\n        if (drawingMode.value) {\r\n          drawingMode.value = false;\r\n          console.log(\"结束画线\");\r\n        }\r\n      });\r\n    };\r\n\r\n    // 获取并渲染数据\r\n    onMounted(async () => {\r\n      try {\r\n        const response = await getRanderingSorted();\r\n        if (response.data.code === 0 && Array.isArray(response.data.data)) {\r\n          const formattedPolygons = response.data.data.map((item) => {\r\n            const coordinates = item.coordinates;\r\n            const polygon = new AMap.Polygon({\r\n              path: coordinates,\r\n              fillColor: \"#ccebc5\",\r\n              strokeOpacity: 1,\r\n              fillOpacity: 0.5,\r\n              strokeColor: \"#2b8cbe\",\r\n              strokeWeight: 1,\r\n              strokeStyle: \"dashed\",\r\n              strokeDasharray: [5, 5],\r\n            });\r\n            return polygon;\r\n          });\r\n\r\n          polygons.value = formattedPolygons;\r\n\r\n          // 延迟添加多边形到地图\r\n          setTimeout(() => {\r\n            addPolygonsToMap(polygons.value);\r\n          }, 500);\r\n\r\n          // // 初始化鹰眼图\r\n          // nextTick(() => {\r\n          //   initOverviewMap();\r\n          // });\r\n        } else {\r\n          console.error(\"Invalid data format\", response.data);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error fetching polygons:\", error);\r\n      }\r\n    });\r\n\r\n    // 初始化小地图（鹰眼图）\r\n    const initOverviewMap = () => {\r\n      overviewMap = new AMap.Map(\"overview-map\", {\r\n        zoom: 13.5, // 设置鹰眼图缩放级别\r\n        center: map.value.getCenter(), // 设置小地图中心点为大地图中心\r\n        viewMode: \"2D\", // 小地图模式\r\n        zooms: [3, 15], // 小地图缩放级别\r\n      });\r\n\r\n      // 小地图上的框，用于显示大地图的显示区域\r\n      overviewRect = new AMap.Rectangle({\r\n        bounds: map.value.getBounds(),\r\n        strokeColor: \"#F00\",\r\n        strokeWeight: 2,\r\n        fillOpacity: 0.3,\r\n        fillColor: \"#FF0\",\r\n      });\r\n      overviewMap.add(overviewRect);\r\n\r\n      // 监听大地图的移动事件，更新小地图视图\r\n      map.value.on(\"move\", () => {\r\n        const center = map.value.getCenter();\r\n        overviewMap.setCenter(center); // 更新小地图中心\r\n        updateOverviewRect(); // 更新小地图的显示框\r\n      });\r\n\r\n      // 监听大地图的缩放事件，更新小地图的框\r\n      map.value.on(\"zoomend\", () => {\r\n        updateOverviewRect(); // 更新显示框\r\n      });\r\n\r\n      // 监听鼠标的移动事件\r\n      map.value.on(\"mousemove\", () => {\r\n        updateOverviewRect(); // 鼠标移动时，更新小地图框\r\n      });\r\n    };\r\n\r\n    // 更新小地图上的显示框\r\n    const updateOverviewRect = () => {\r\n      const bounds = map.value.getBounds();\r\n      overviewRect.setBounds(bounds); // 设置小地图上的框为大地图当前显示区域\r\n    };\r\n\r\n    const centerPointRegisters = async () => {\r\n      try {\r\n        const response = await getCenterPointRegister();\r\n        if (response.data.code === 0 && Array.isArray(response.data.data)) {\r\n          const bicycles = response.data.data;\r\n          setTimeout(() => {\r\n            addMarkersToMap(bicycles);\r\n          }, 500);\r\n        } else {\r\n          console.error(\"Invalid bicycle data format\", response.data);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error fetching bicycles:\", error);\r\n      }\r\n    };\r\n\r\n    // 将多边形添加到地图\r\n    const addPolygonsToMap = (polygons) => {\r\n      if (Array.isArray(polygons)) {\r\n        polygons.forEach((polygon) => {\r\n          if (polygon instanceof AMap.Polygon) {\r\n            map.value.add(polygon);\r\n          } else {\r\n            console.error(\"Invalid polygon item\", polygon);\r\n          }\r\n        });\r\n      } else {\r\n        console.error(\"Polygons is not an array:\", polygons);\r\n      }\r\n    };\r\n\r\n    // 将自行车点添加到地图\r\n    const addMarkersToMap = (bicycles) => {\r\n      if (Array.isArray(bicycles)) {\r\n        bicycles.forEach((bicycle) => {\r\n          const { id, polygon_center } = bicycle;\r\n          const marker = new AMap.Marker({\r\n            position: new AMap.LngLat(polygon_center[0], polygon_center[1]), // 设置点的坐标\r\n            title: `Bicycle ID: ${id}`, // 设置点的标题为 ID\r\n          });\r\n          markers.value.push(marker); // 将每个点标记保存到 markers 数组\r\n          map.value.add(marker); // 添加标记到地图\r\n        });\r\n      }\r\n    };\r\n\r\n    const handleButtonClick = async () => {\r\n      try {\r\n        const response = await topPathRegister({\r\n          capacity: form.value.vehicleCount, // 从表单获取车辆容量\r\n        });\r\n\r\n        console.log(\"API Response:\", response.data); // 打印返回的数据\r\n\r\n        // 检查 response.data.data 是否是数组\r\n        if (response.data && Array.isArray(response.data.data)) {\r\n          const allData = response.data.data;\r\n\r\n          // 更新表格数据\r\n          tableData.value = allData.map((item) => ({\r\n            dispatchId: item.dispatch_count, // 调度数量\r\n            startPoint: item.from, // 起始点\r\n            endPoint: item.to, // 终点\r\n            scheduleAmount: item.transfer_amount, // 调度数量\r\n          }));\r\n\r\n          // 更新导航数据\r\n          navigationData.value = allData.map((item) => ({\r\n            dispatchId: item.dispatch_count,\r\n            startCoords: item.fromPoint, // 起始点坐标\r\n            endCoords: item.toPoint, // 终止点坐标\r\n          }));\r\n        } else {\r\n          console.error(\"response.data.data is not an array:\", response.data);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error fetching schedule data:\", error);\r\n      }\r\n    };\r\n\r\n    // 开始调度\r\n    const startDispatch = async (dispatchId) => {\r\n      try {\r\n        console.log(\"dispatchId:\", dispatchId);\r\n        console.log(\"navigationData.value:\", navigationData.value); // 打印导航数据\r\n\r\n        // 清除上一次的路线和标记\r\n        clearLastRoute();\r\n\r\n        // 找到对应的导航数据\r\n        const navigation = navigationData.value.find(\r\n          (item) => item.dispatchId === dispatchId\r\n        );\r\n\r\n        if (navigation) {\r\n          const { startCoords, endCoords } = navigation;\r\n\r\n          // 检查坐标是否有效\r\n          if (!startCoords || !endCoords) {\r\n            console.error(\"起点或终点坐标无效:\", navigation);\r\n            return;\r\n          }\r\n\r\n          // 确保坐标为有效的 [longitude, latitude] 数组\r\n          if (\r\n            !Array.isArray(startCoords) ||\r\n            !Array.isArray(endCoords) ||\r\n            startCoords.length !== 2 ||\r\n            endCoords.length !== 2\r\n          ) {\r\n            console.error(\"坐标数据无效:\", navigation);\r\n            return;\r\n          }\r\n\r\n          const startLngLat = new AMap.LngLat(startCoords[0], startCoords[1]);\r\n          const endLngLat = new AMap.LngLat(endCoords[0], endCoords[1]);\r\n\r\n          // 确保高德地图插件已加载\r\n          if (window.AMap && window.AMap.Driving) {\r\n            const driving = new AMap.Driving({\r\n              map: map.value, // 地图对象\r\n              panel: null, // 可以设置为显示信息的面板\r\n              policy: AMap.DrivingPolicy.LEAST_TIME, // 选择最短时间路线\r\n            });\r\n\r\n            // 设置起点和终点\r\n            driving.search(startLngLat, endLngLat, (status, result) => {\r\n              if (status === \"complete\") {\r\n                console.log(\"导航成功:\", result);\r\n                one.value.push(driving);\r\n                console.log(one.value);\r\n              } else {\r\n                console.error(\"导航失败:\", result);\r\n              }\r\n            });\r\n          } else {\r\n            console.error(\"AMap.Driving 插件未加载.\");\r\n          }\r\n        } else {\r\n          console.error(\"未找到对应的导航数据:\", dispatchId);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"调度启动失败\", error);\r\n      }\r\n    };\r\n\r\n    // 分页：计算当前页的数据\r\n    const currentPageData = computed(() => {\r\n      const start = (currentPage.value - 1) * pageSize.value;\r\n      const end = currentPage.value * pageSize.value;\r\n      return tableData.value.slice(start, end);\r\n    });\r\n\r\n    // 计算总页数\r\n    const totalPages = computed(() => {\r\n      return Math.ceil(tableData.value.length / pageSize.value);\r\n    });\r\n\r\n    // 改变页面\r\n    const changePage = (newPage) => {\r\n      if (newPage >= 1 && newPage <= totalPages.value) {\r\n        currentPage.value = newPage;\r\n      }\r\n    };\r\n\r\n    // 清除上一次的导航路径和标记\r\n    function clearLastRoute() {\r\n      if (Array.isArray(one.value) && one.value.length > 0) {\r\n        one.value.forEach((driving) => {\r\n          if (driving && map.value) {\r\n            driving.clear(); // 清理路线\r\n            console.log(\"Cleared route:\", driving);\r\n          }\r\n        });\r\n      }\r\n      one.value = []; // 清理完毕后再重置\r\n    }\r\n\r\n    // 开始画线\r\n    const startDrawing = () => {\r\n      drawingMode.value = true;\r\n      linePath.value = []; // 清空之前的路径\r\n      if (polyline) {\r\n        map.value.remove(polyline);\r\n        polyline = null;\r\n      }\r\n      console.log(\"开始画线\");\r\n    };\r\n\r\n    // 计算路径长度\r\n    const calculateDistance = () => {\r\n      if (linePath.value.length < 2) {\r\n        console.log(\"路径点不足，无法计算距离\");\r\n        return;\r\n      }\r\n      const totalLength = AMap.GeometryUtil.distanceOfLine(linePath.value);\r\n      console.log(`路径总长度：${totalLength.toFixed(2)} 米`);\r\n    };\r\n\r\n    // 加载并初始化地图 API\r\n    onMounted(() => {\r\n      loadAMapApi();\r\n      centerPointRegisters();\r\n      initOverviewMap();\r\n    });\r\n\r\n    return {\r\n      map,\r\n      polygons,\r\n      tableData, // 表格数据\r\n      handleButtonClick,\r\n      startDispatch,\r\n      form,\r\n      currentPageData,\r\n      currentPage,\r\n      totalPages,\r\n      changePage,\r\n      startDrawing,\r\n      calculateDistance,\r\n    };\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\nhtml,\r\nbody,\r\n#container {\r\n  margin: 0;\r\n  padding: 0;\r\n  height: 100%;\r\n  position: relative; /* 确保父容器是相对定位 */\r\n}\r\n\r\n.map-container {\r\n  display: flex;\r\n  width: 100%;\r\n  height: 100%;\r\n  position: relative; /* 将整个地图容器设置为相对定位 */\r\n}\r\n\r\n.map {\r\n  flex-grow: 1;\r\n  height: 100%;\r\n}\r\n\r\n.right-sidebar {\r\n  width: 450px;\r\n  background-color: #fff;\r\n  padding: 20px;\r\n  border-radius: 10px;\r\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);\r\n  overflow-y: auto;\r\n}\r\n\r\n.action-button {\r\n  width: 100%;\r\n  padding: 10px;\r\n  background-color: #4caf50;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 5px;\r\n  font-size: 16px;\r\n  cursor: pointer;\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.action-button:hover {\r\n  background-color: #45a049;\r\n}\r\n\r\n.data-table {\r\n  width: 100%;\r\n  border-collapse: collapse;\r\n}\r\n\r\n.data-table th,\r\n.data-table td {\r\n  border: 1px solid #ddd;\r\n  padding: 8px;\r\n  text-align: left;\r\n}\r\n\r\n.data-table th {\r\n  background-color: #f2f2f2;\r\n}\r\n\r\n.start-dispatch-button {\r\n  padding: 5px 10px;\r\n  background-color: #008cba;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n}\r\n\r\n.start-dispatch-button:hover {\r\n  background-color: #007b9f;\r\n}\r\n\r\n/* 分页器样式 */\r\n.pagination {\r\n  display: flex;\r\n  justify-content: center;\r\n  margin-top: 10px;\r\n}\r\n\r\n.pagination button {\r\n  padding: 5px 10px;\r\n  margin: 0 10px;\r\n  background-color: #007b9f;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n}\r\n\r\n.pagination button[disabled] {\r\n  background-color: #d3d3d3;\r\n  cursor: not-allowed;\r\n}\r\n\r\n.map-control button {\r\n  background-color: #fff;\r\n  border: 1px solid #ccc;\r\n  padding: 8px 12px;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  font-size: 14px;\r\n  transition: background-color 0.3s;\r\n  color: #000;\r\n}\r\n\r\n.map-control button:hover {\r\n  background-color: #f0f0f0;\r\n}\r\n\r\n.map-control button.active {\r\n  background-color: #2b8cbe;\r\n  color: #fff;\r\n  border-color: #2b8cbe;\r\n}\r\n\r\n#overview-map {\r\n  position: absolute;\r\n  top: 10px;\r\n  right: 10px; /* 保持右上角 */\r\n  width: 200px;\r\n  height: 150px;\r\n  border: 1px solid #000;\r\n  z-index: 100;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
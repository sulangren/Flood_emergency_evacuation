{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport { ref, onMounted } from \"vue\";\nimport { getRanderingSorted, getPointSorted } from \"@/api/rendering\";\nexport default {\n  name: \"MapWindow\",\n  setup() {\n    const map = ref(null);\n    const polygons = ref([]);\n    const markers = ref([]);\n\n    // 加载并初始化地图\n    const loadAMapApi = () => {\n      const script = document.createElement(\"script\");\n      script.type = \"text/javascript\";\n      script.src = \"https://webapi.amap.com/maps?v=2.0&key=a6042dfaa8137c1bd9f59034cd3021a3\";\n      document.head.appendChild(script);\n      script.onload = () => {\n        initMap();\n      };\n    };\n    const initMap = () => {\n      // 先确保高德地图 API 加载完成\n      if (!AMap) {\n        console.error(\"AMap is not defined!\");\n        return;\n      }\n      const layer = new AMap.createDefaultLayer({\n        zooms: [3, 20],\n        visible: true,\n        opacity: 1,\n        zIndex: 0\n      });\n      map.value = new AMap.Map(\"container\", {\n        viewMode: \"2D\",\n        zoom: 16.3,\n        center: [113.266949, 35.188365],\n        // 初始地图中心\n        layer: [layer]\n      });\n\n      // 使用 AMap.plugin 来加载 Scale 控件\n      AMap.plugin([\"AMap.Scale\", \"AMap.ToolBar\"], () => {\n        // 使用 Scale 控件\n        const scaleControl = new AMap.Scale({\n          position: new AMap.Pixel(10, 10) // 控件位置\n        });\n        map.value.addControl(scaleControl);\n\n        // 使用 ToolBar 控件\n        const toolBarControl = new AMap.ToolBar({\n          position: new AMap.Pixel(10, 50) // 控件位置\n        });\n        map.value.addControl(toolBarControl);\n      });\n    };\n\n    // 获取并渲染多边形数据\n    const fetchPolygons = async () => {\n      try {\n        const response = await getRanderingSorted();\n        console.log(\"Polygons Response:\", response.data);\n        if (response.data.code === 0 && Array.isArray(response.data.data)) {\n          const formattedPolygons = response.data.data.map(item => {\n            const coordinates = item.coordinates;\n            console.log(coordinates);\n            // 创建 AMap.Polygon 实例\n            const polygon = new AMap.Polygon({\n              path: coordinates,\n              fillColor: \"#efebe2\",\n              strokeOpacity: 1,\n              fillOpacity: 0.5,\n              strokeColor: \"#2b8cbe\",\n              strokeWeight: 1,\n              strokeStyle: \"dashed\",\n              strokeDasharray: [5, 5]\n            });\n            return polygon;\n          });\n          polygons.value = formattedPolygons; // 更新 polygons\n\n          // 延迟添加多边形到地图\n          setTimeout(() => {\n            addPolygonsToMap(polygons.value);\n          }, 500);\n        } else {\n          console.error(\"Invalid polygon data format\", response.data);\n        }\n      } catch (error) {\n        console.error(\"Error fetching polygons:\", error);\n      }\n    };\n\n    // 获取并渲染自行车点数据\n    const fetchBicyclePoints = async () => {\n      try {\n        const response = await getPointSorted();\n        console.log(\"Bicycles Response:\", response.data);\n        if (response.data.code === 0 && Array.isArray(response.data.data)) {\n          const bicycles = response.data.data;\n\n          // 延迟添加点到地图\n          setTimeout(() => {\n            addMarkersToMap(bicycles);\n          }, 500);\n        } else {\n          console.error(\"Invalid bicycle data format\", response.data);\n        }\n      } catch (error) {\n        console.error(\"Error fetching bicycles:\", error);\n      }\n    };\n\n    // 将多边形添加到地图\n    const addPolygonsToMap = polygons => {\n      if (Array.isArray(polygons)) {\n        polygons.forEach(polygon => {\n          if (polygon instanceof AMap.Polygon) {\n            map.value.add(polygon); // 添加有效的 AMap.Polygon 实例到地图\n          } else {\n            console.error(\"Invalid polygon item\", polygon);\n          }\n        });\n      } else {\n        console.error(\"Polygons is not an array:\", polygons);\n      }\n    };\n\n    // 将自行车点添加到地图\n    const addMarkersToMap = bicycles => {\n      if (Array.isArray(bicycles)) {\n        bicycles.forEach(bicycle => {\n          const {\n            id,\n            coordinates\n          } = bicycle;\n          const marker = new AMap.Marker({\n            position: new AMap.LngLat(coordinates[0], coordinates[1]),\n            // 设置点的坐标\n            title: `Bicycle ID: ${id}` // 设置点的标题为 ID\n          });\n          markers.value.push(marker); // 将每个点标记保存到 markers 数组\n          map.value.add(marker); // 添加标记到地图\n        });\n      }\n    };\n\n    // 初始化时加载地图和数据\n    onMounted(() => {\n      loadAMapApi(); // 加载高德地图 API\n      fetchPolygons(); // 获取并渲染多边形数据\n      fetchBicyclePoints(); // 获取并渲染自行车点数据\n    });\n    return {\n      map,\n      polygons,\n      markers\n    };\n  }\n};","map":{"version":3,"names":["ref","onMounted","getRanderingSorted","getPointSorted","name","setup","map","polygons","markers","loadAMapApi","script","document","createElement","type","src","head","appendChild","onload","initMap","AMap","console","error","layer","createDefaultLayer","zooms","visible","opacity","zIndex","value","Map","viewMode","zoom","center","plugin","scaleControl","Scale","position","Pixel","addControl","toolBarControl","ToolBar","fetchPolygons","response","log","data","code","Array","isArray","formattedPolygons","item","coordinates","polygon","Polygon","path","fillColor","strokeOpacity","fillOpacity","strokeColor","strokeWeight","strokeStyle","strokeDasharray","setTimeout","addPolygonsToMap","fetchBicyclePoints","bicycles","addMarkersToMap","forEach","add","bicycle","id","marker","Marker","LngLat","title","push"],"sources":["E:\\code\\Django\\project\\front\\front\\src\\components\\NearbyTramsWindow.vue"],"sourcesContent":["<template>\r\n  <div id=\"container\" style=\"width: 100%; height: 100%\"></div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, onMounted } from \"vue\";\r\nimport { getRanderingSorted, getPointSorted } from \"@/api/rendering\";\r\n\r\nexport default {\r\n  name: \"MapWindow\",\r\n  setup() {\r\n    const map = ref(null);\r\n    const polygons = ref([]);\r\n    const markers = ref([]);\r\n\r\n    // 加载并初始化地图\r\n    const loadAMapApi = () => {\r\n      const script = document.createElement(\"script\");\r\n      script.type = \"text/javascript\";\r\n      script.src =\r\n        \"https://webapi.amap.com/maps?v=2.0&key=a6042dfaa8137c1bd9f59034cd3021a3\";\r\n      document.head.appendChild(script);\r\n\r\n      script.onload = () => {\r\n        initMap();\r\n      };\r\n    };\r\n\r\n    const initMap = () => {\r\n      // 先确保高德地图 API 加载完成\r\n      if (!AMap) {\r\n        console.error(\"AMap is not defined!\");\r\n        return;\r\n      }\r\n\r\n      const layer = new AMap.createDefaultLayer({\r\n        zooms: [3, 20],\r\n        visible: true,\r\n        opacity: 1,\r\n        zIndex: 0,\r\n      });\r\n\r\n      map.value = new AMap.Map(\"container\", {\r\n        viewMode: \"2D\",\r\n        zoom: 16.3,\r\n        center: [113.266949, 35.188365], // 初始地图中心\r\n        layer: [layer],\r\n      });\r\n\r\n      // 使用 AMap.plugin 来加载 Scale 控件\r\n      AMap.plugin([\"AMap.Scale\", \"AMap.ToolBar\"], () => {\r\n        // 使用 Scale 控件\r\n        const scaleControl = new AMap.Scale({\r\n          position: new AMap.Pixel(10, 10), // 控件位置\r\n        });\r\n        map.value.addControl(scaleControl);\r\n\r\n        // 使用 ToolBar 控件\r\n        const toolBarControl = new AMap.ToolBar({\r\n          position: new AMap.Pixel(10, 50), // 控件位置\r\n        });\r\n        map.value.addControl(toolBarControl);\r\n      });\r\n    };\r\n\r\n    // 获取并渲染多边形数据\r\n    const fetchPolygons = async () => {\r\n      try {\r\n        const response = await getRanderingSorted();\r\n        console.log(\"Polygons Response:\", response.data);\r\n\r\n        if (response.data.code === 0 && Array.isArray(response.data.data)) {\r\n          const formattedPolygons = response.data.data.map((item) => {\r\n            const coordinates = item.coordinates;\r\n            console.log(coordinates);\r\n            // 创建 AMap.Polygon 实例\r\n            const polygon = new AMap.Polygon({\r\n              path: coordinates,\r\n              fillColor: \"#efebe2\",\r\n              strokeOpacity: 1,\r\n              fillOpacity: 0.5,\r\n              strokeColor: \"#2b8cbe\",\r\n              strokeWeight: 1,\r\n              strokeStyle: \"dashed\",\r\n              strokeDasharray: [5, 5],\r\n            });\r\n\r\n            return polygon;\r\n          });\r\n\r\n          polygons.value = formattedPolygons; // 更新 polygons\r\n\r\n          // 延迟添加多边形到地图\r\n          setTimeout(() => {\r\n            addPolygonsToMap(polygons.value);\r\n          }, 500);\r\n        } else {\r\n          console.error(\"Invalid polygon data format\", response.data);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error fetching polygons:\", error);\r\n      }\r\n    };\r\n\r\n    // 获取并渲染自行车点数据\r\n    const fetchBicyclePoints = async () => {\r\n      try {\r\n        const response = await getPointSorted();\r\n        console.log(\"Bicycles Response:\", response.data);\r\n\r\n        if (response.data.code === 0 && Array.isArray(response.data.data)) {\r\n          const bicycles = response.data.data;\r\n\r\n          // 延迟添加点到地图\r\n          setTimeout(() => {\r\n            addMarkersToMap(bicycles);\r\n          }, 500);\r\n        } else {\r\n          console.error(\"Invalid bicycle data format\", response.data);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error fetching bicycles:\", error);\r\n      }\r\n    };\r\n\r\n    // 将多边形添加到地图\r\n    const addPolygonsToMap = (polygons) => {\r\n      if (Array.isArray(polygons)) {\r\n        polygons.forEach((polygon) => {\r\n          if (polygon instanceof AMap.Polygon) {\r\n            map.value.add(polygon); // 添加有效的 AMap.Polygon 实例到地图\r\n          } else {\r\n            console.error(\"Invalid polygon item\", polygon);\r\n          }\r\n        });\r\n      } else {\r\n        console.error(\"Polygons is not an array:\", polygons);\r\n      }\r\n    };\r\n\r\n    // 将自行车点添加到地图\r\n    const addMarkersToMap = (bicycles) => {\r\n      if (Array.isArray(bicycles)) {\r\n        bicycles.forEach((bicycle) => {\r\n          const { id, coordinates } = bicycle;\r\n          const marker = new AMap.Marker({\r\n            position: new AMap.LngLat(coordinates[0], coordinates[1]), // 设置点的坐标\r\n            title: `Bicycle ID: ${id}`, // 设置点的标题为 ID\r\n          });\r\n          markers.value.push(marker); // 将每个点标记保存到 markers 数组\r\n          map.value.add(marker); // 添加标记到地图\r\n        });\r\n      }\r\n    };\r\n\r\n    // 初始化时加载地图和数据\r\n    onMounted(() => {\r\n      loadAMapApi(); // 加载高德地图 API\r\n      fetchPolygons(); // 获取并渲染多边形数据\r\n      fetchBicyclePoints(); // 获取并渲染自行车点数据\r\n    });\r\n\r\n    return {\r\n      map,\r\n      polygons,\r\n      markers,\r\n    };\r\n  },\r\n};\r\n</script>\r\n\r\n<style>\r\nhtml,\r\nbody,\r\n#container {\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n\r\n.amap-logo {\r\n  display: none !important;\r\n}\r\n\r\n.amap-copyright {\r\n  opacity: 0 !important;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
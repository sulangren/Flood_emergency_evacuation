{"ast":null,"code":"import \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport { ref, onMounted } from \"vue\";\nimport { getRanderingSorted, getPointSorted } from \"@/api/rendering\";\nexport default {\n  name: \"MapWindow\",\n  setup() {\n    const map = ref(null);\n    const polygons = ref([]);\n    const markerList = ref([]);\n\n    // 加载并初始化地图\n    const loadAMapApi = () => {\n      const script = document.createElement(\"script\");\n      script.type = \"text/javascript\";\n      script.src = \"https://webapi.amap.com/maps?v=2.0&key=a6042dfaa8137c1bd9f59034cd3021a3\";\n      document.head.appendChild(script);\n      script.onload = () => {\n        initMap();\n      };\n    };\n    const initMap = () => {\n      const layer = new AMap.createDefaultLayer({\n        zooms: [3, 20],\n        visible: true,\n        opacity: 1,\n        zIndex: 0\n      });\n      map.value = new AMap.Map(\"container\", {\n        viewMode: \"2D\",\n        zoom: 16.3,\n        center: [113.266949, 35.188365],\n        layer: [layer]\n      });\n    };\n\n    // 获取并渲染数据\n    onMounted(async () => {\n      try {\n        const response = await getRanderingSorted();\n        const response_tow = await getPointSorted();\n        console.log(\"Response:\", response.data);\n        console.log(\"Point:\", response_tow.data);\n        if (response.data.code === 0 && Array.isArray(response.data.data) && response_tow.data.code === 0) {\n          const formattedPolygons = response.data.data.map(item => {\n            const coordinates = item.parking_area;\n            console.log(coordinates);\n            // 创建 AMap.Polygon 实例时，确保它没有被响应式包裹\n            const polygon = new AMap.Polygon({\n              path: coordinates,\n              fillColor: \"#ccebc5\",\n              strokeOpacity: 1,\n              fillOpacity: 0.5,\n              strokeColor: \"#2b8cbe\",\n              strokeWeight: 1,\n              strokeStyle: \"dashed\",\n              strokeDasharray: [5, 5]\n            });\n            return polygon;\n          });\n          const formattedPoint = response_tow.data.data.map(item => {\n            const coordinates_tow = item.coordinates;\n            const id = item.id;\n            console.log(coordinates_tow);\n            console.log(id);\n\n            // 检查坐标是否有效\n            if (Array.isArray(coordinates_tow) && coordinates_tow.length === 2) {\n              const [lng, lat] = coordinates_tow;\n              if (!isNaN(lng) && !isNaN(lat)) {\n                const marker = new AMap.Marker({\n                  position: new AMap.LngLat(lng, lat),\n                  // 经度、纬度\n                  title: id\n                });\n                return marker;\n              } else {\n                console.error(`Invalid coordinates for marker ${id}:`, coordinates_tow);\n              }\n            }\n            return null;\n          }).filter(marker => marker !== null); // 过滤掉无效的 marker\n\n          polygons.value = formattedPolygons; // 更新 polygons\n          markerList.value = formattedPoint;\n\n          // 延迟添加多边形到地图\n          setTimeout(() => {\n            addPolygonsToMap(polygons.value);\n            addPolygonsToMap(markerList.value);\n          }, 500);\n        } else {\n          console.error(\"Invalid data format\", response.data);\n        }\n      } catch (error) {\n        console.error(\"Error fetching polygons:\", error);\n      }\n    });\n\n    // 将多边形添加到地图\n    const addPolygonsToMap = (polygons, markerList) => {\n      if (Array.isArray(polygons)) {\n        polygons.forEach(polygon => {\n          // 确保每个 polygon 是 AMap.Polygon 实例\n          if (polygon instanceof AMap.Polygon) {\n            map.value.add(polygon); // 添加有效的 AMap.Polygon 实例到地图\n          } else {\n            console.error(\"Invalid polygon item\", polygon);\n          }\n        });\n      } else {\n        console.error(\"Polygons is not an array:\", polygons);\n      }\n\n      // 确保 markerList 是一个数组\n      if (Array.isArray(markerList)) {\n        markerList.forEach(marker => {\n          // 确保每个 marker 是 AMap.Marker 实例\n          if (marker instanceof AMap.Marker) {\n            map.value.add(marker); // 添加有效的 AMap.Marker 实例到地图\n          } else {\n            console.error(\"Invalid marker item\", marker);\n          }\n        });\n      } else {\n        console.error(\"markerList is not an array:\", markerList);\n      }\n    };\n\n    // 加载并初始化地图 API\n    onMounted(() => {\n      loadAMapApi();\n    });\n    return {\n      map,\n      polygons\n    };\n  }\n};","map":{"version":3,"names":["ref","onMounted","getRanderingSorted","getPointSorted","name","setup","map","polygons","markerList","loadAMapApi","script","document","createElement","type","src","head","appendChild","onload","initMap","layer","AMap","createDefaultLayer","zooms","visible","opacity","zIndex","value","Map","viewMode","zoom","center","response","response_tow","console","log","data","code","Array","isArray","formattedPolygons","item","coordinates","parking_area","polygon","Polygon","path","fillColor","strokeOpacity","fillOpacity","strokeColor","strokeWeight","strokeStyle","strokeDasharray","formattedPoint","coordinates_tow","id","length","lng","lat","isNaN","marker","Marker","position","LngLat","title","error","filter","setTimeout","addPolygonsToMap","forEach","add"],"sources":["E:\\code\\Django\\project\\front\\front\\src\\components\\NearbyTramsWindow.vue"],"sourcesContent":["<template>\r\n  <div id=\"container\" style=\"width: 100%; height: 100%\"></div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, onMounted } from \"vue\";\r\nimport { getRanderingSorted, getPointSorted } from \"@/api/rendering\";\r\n\r\nexport default {\r\n  name: \"MapWindow\",\r\n  setup() {\r\n    const map = ref(null);\r\n    const polygons = ref([]);\r\n    const markerList = ref([]);\r\n\r\n    // 加载并初始化地图\r\n    const loadAMapApi = () => {\r\n      const script = document.createElement(\"script\");\r\n      script.type = \"text/javascript\";\r\n      script.src =\r\n        \"https://webapi.amap.com/maps?v=2.0&key=a6042dfaa8137c1bd9f59034cd3021a3\";\r\n      document.head.appendChild(script);\r\n\r\n      script.onload = () => {\r\n        initMap();\r\n      };\r\n    };\r\n\r\n    const initMap = () => {\r\n      const layer = new AMap.createDefaultLayer({\r\n        zooms: [3, 20],\r\n        visible: true,\r\n        opacity: 1,\r\n        zIndex: 0,\r\n      });\r\n\r\n      map.value = new AMap.Map(\"container\", {\r\n        viewMode: \"2D\",\r\n        zoom: 16.3,\r\n        center: [113.266949, 35.188365],\r\n        layer: [layer],\r\n      });\r\n    };\r\n\r\n    // 获取并渲染数据\r\n    onMounted(async () => {\r\n      try {\r\n        const response = await getRanderingSorted();\r\n        const response_tow = await getPointSorted();\r\n        console.log(\"Response:\", response.data);\r\n        console.log(\"Point:\", response_tow.data);\r\n\r\n        if (\r\n          response.data.code === 0 &&\r\n          Array.isArray(response.data.data) &&\r\n          response_tow.data.code === 0\r\n        ) {\r\n          const formattedPolygons = response.data.data.map((item) => {\r\n            const coordinates = item.parking_area;\r\n            console.log(coordinates);\r\n            // 创建 AMap.Polygon 实例时，确保它没有被响应式包裹\r\n            const polygon = new AMap.Polygon({\r\n              path: coordinates,\r\n              fillColor: \"#ccebc5\",\r\n              strokeOpacity: 1,\r\n              fillOpacity: 0.5,\r\n              strokeColor: \"#2b8cbe\",\r\n              strokeWeight: 1,\r\n              strokeStyle: \"dashed\",\r\n              strokeDasharray: [5, 5],\r\n            });\r\n\r\n            return polygon;\r\n          });\r\n\r\n          const formattedPoint = response_tow.data.data\r\n            .map((item) => {\r\n              const coordinates_tow = item.coordinates;\r\n              const id = item.id;\r\n              console.log(coordinates_tow);\r\n              console.log(id);\r\n\r\n              // 检查坐标是否有效\r\n              if (\r\n                Array.isArray(coordinates_tow) &&\r\n                coordinates_tow.length === 2\r\n              ) {\r\n                const [lng, lat] = coordinates_tow;\r\n                if (!isNaN(lng) && !isNaN(lat)) {\r\n                  const marker = new AMap.Marker({\r\n                    position: new AMap.LngLat(lng, lat), // 经度、纬度\r\n                    title: id,\r\n                  });\r\n                  return marker;\r\n                } else {\r\n                  console.error(\r\n                    `Invalid coordinates for marker ${id}:`,\r\n                    coordinates_tow\r\n                  );\r\n                }\r\n              }\r\n              return null;\r\n            })\r\n            .filter((marker) => marker !== null); // 过滤掉无效的 marker\r\n\r\n          polygons.value = formattedPolygons; // 更新 polygons\r\n          markerList.value = formattedPoint;\r\n\r\n          // 延迟添加多边形到地图\r\n          setTimeout(() => {\r\n            addPolygonsToMap(polygons.value);\r\n            addPolygonsToMap(markerList.value);\r\n          }, 500);\r\n        } else {\r\n          console.error(\"Invalid data format\", response.data);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error fetching polygons:\", error);\r\n      }\r\n    });\r\n\r\n    // 将多边形添加到地图\r\n    const addPolygonsToMap = (polygons, markerList) => {\r\n      if (Array.isArray(polygons)) {\r\n        polygons.forEach((polygon) => {\r\n          // 确保每个 polygon 是 AMap.Polygon 实例\r\n          if (polygon instanceof AMap.Polygon) {\r\n            map.value.add(polygon); // 添加有效的 AMap.Polygon 实例到地图\r\n          } else {\r\n            console.error(\"Invalid polygon item\", polygon);\r\n          }\r\n        });\r\n      } else {\r\n        console.error(\"Polygons is not an array:\", polygons);\r\n      }\r\n\r\n      // 确保 markerList 是一个数组\r\n      if (Array.isArray(markerList)) {\r\n        markerList.forEach((marker) => {\r\n          // 确保每个 marker 是 AMap.Marker 实例\r\n          if (marker instanceof AMap.Marker) {\r\n            map.value.add(marker); // 添加有效的 AMap.Marker 实例到地图\r\n          } else {\r\n            console.error(\"Invalid marker item\", marker);\r\n          }\r\n        });\r\n      } else {\r\n        console.error(\"markerList is not an array:\", markerList);\r\n      }\r\n    };\r\n\r\n    // 加载并初始化地图 API\r\n    onMounted(() => {\r\n      loadAMapApi();\r\n    });\r\n\r\n    return {\r\n      map,\r\n      polygons,\r\n    };\r\n  },\r\n};\r\n</script>\r\n\r\n<style>\r\nhtml,\r\nbody,\r\n#container {\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n\r\n.amap-logo {\r\n  display: none !important;\r\n}\r\n\r\n.amap-copyright {\r\n  opacity: 0 !important;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
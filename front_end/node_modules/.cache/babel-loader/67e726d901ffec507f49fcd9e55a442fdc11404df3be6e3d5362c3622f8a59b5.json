{"ast":null,"code":"import \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport { ref, onMounted } from \"vue\";\nimport { getRanderingSorted } from \"@/api/rendering\"; // 假设你的接口方法\n\nexport default {\n  name: \"MapWindow\",\n  setup() {\n    const map = ref(null);\n    const polygons = ref([]);\n    const tableData = ref([]); // 存储表格数据\n\n    // 加载并初始化地图\n    const loadAMapApi = () => {\n      const script = document.createElement(\"script\");\n      script.type = \"text/javascript\";\n      script.src = \"https://webapi.amap.com/maps?v=2.0&key=a6042dfaa8137c1bd9f59034cd3021a3\";\n      document.head.appendChild(script);\n      script.onload = () => {\n        initMap();\n      };\n    };\n    const initMap = () => {\n      const layer = new AMap.createDefaultLayer({\n        zooms: [3, 20],\n        visible: true,\n        opacity: 1,\n        zIndex: 0\n      });\n      map.value = new AMap.Map(\"container\", {\n        viewMode: \"2D\",\n        zoom: 16.3,\n        center: [113.266949, 35.188365],\n        layer: [layer]\n      });\n    };\n\n    // 获取并渲染数据\n    onMounted(async () => {\n      try {\n        const response = await getRanderingSorted();\n        if (response.data.code === 0 && Array.isArray(response.data.data)) {\n          const formattedPolygons = response.data.data.map(item => {\n            const coordinates = item.coordinates;\n            const polygon = new AMap.Polygon({\n              path: coordinates,\n              fillColor: \"#ccebc5\",\n              strokeOpacity: 1,\n              fillOpacity: 0.5,\n              strokeColor: \"#2b8cbe\",\n              strokeWeight: 1,\n              strokeStyle: \"dashed\",\n              strokeDasharray: [5, 5]\n            });\n            return polygon;\n          });\n          polygons.value = formattedPolygons;\n\n          // 延迟添加多边形到地图\n          setTimeout(() => {\n            addPolygonsToMap(polygons.value);\n          }, 500);\n        } else {\n          console.error(\"Invalid data format\", response.data);\n        }\n      } catch (error) {\n        console.error(\"Error fetching polygons:\", error);\n      }\n    });\n\n    // 将多边形添加到地图\n    const addPolygonsToMap = polygons => {\n      if (Array.isArray(polygons)) {\n        polygons.forEach(polygon => {\n          if (polygon instanceof AMap.Polygon) {\n            map.value.add(polygon);\n          } else {\n            console.error(\"Invalid polygon item\", polygon);\n          }\n        });\n      } else {\n        console.error(\"Polygons is not an array:\", polygons);\n      }\n    };\n\n    // 请求并更新表格数据\n    const handleButtonClick = async () => {\n      try {\n        const response = await fetchScheduleData();\n        if (response.data.code === 0 && Array.isArray(response.data.data)) {\n          // 更新表格数据\n          tableData.value = response.data.data.map(item => ({\n            dispatchId: item.dispatchId,\n            startPoint: item.startPoint,\n            endPoint: item.endPoint,\n            scheduleAmount: item.scheduleAmount\n          }));\n        } else {\n          console.error(\"Invalid data format\", response.data);\n        }\n      } catch (error) {\n        console.error(\"Error fetching schedule data:\", error);\n      }\n    };\n\n    // 假设这是向后端请求数据的 API 方法\n    const fetchScheduleData = async () => {\n      // 调用后端接口（假设此接口返回调度数据）\n      const response = await fetch(\"/api/get-schedule-data\");\n      return response.json();\n    };\n\n    // 开始调度\n    const startDispatch = async dispatchId => {\n      try {\n        // 发起调度请求\n        const response = await fetch(`/api/start-dispatch/${dispatchId}`, {\n          method: \"POST\"\n        });\n        const data = await response.json();\n        if (data.success) {\n          alert(`调度 ${dispatchId} 已成功启动！`);\n        } else {\n          alert(`调度 ${dispatchId} 启动失败，请重试！`);\n        }\n      } catch (error) {\n        console.error(\"调度启动失败\", error);\n      }\n    };\n\n    // 加载并初始化地图 API\n    onMounted(() => {\n      loadAMapApi();\n    });\n    return {\n      map,\n      polygons,\n      tableData,\n      handleButtonClick,\n      startDispatch\n    };\n  }\n};","map":{"version":3,"names":["ref","onMounted","getRanderingSorted","name","setup","map","polygons","tableData","loadAMapApi","script","document","createElement","type","src","head","appendChild","onload","initMap","layer","AMap","createDefaultLayer","zooms","visible","opacity","zIndex","value","Map","viewMode","zoom","center","response","data","code","Array","isArray","formattedPolygons","item","coordinates","polygon","Polygon","path","fillColor","strokeOpacity","fillOpacity","strokeColor","strokeWeight","strokeStyle","strokeDasharray","setTimeout","addPolygonsToMap","console","error","forEach","add","handleButtonClick","fetchScheduleData","dispatchId","startPoint","endPoint","scheduleAmount","fetch","json","startDispatch","method","success","alert"],"sources":["E:\\code\\Django\\project\\front\\front\\src\\components\\LocationWindow.vue"],"sourcesContent":["<template>\r\n  <div class=\"map-container\">\r\n    <!-- 地图容器 -->\r\n    <div id=\"container\" class=\"map\"></div>\r\n\r\n    <!-- 右侧面板容器 -->\r\n    <div class=\"right-sidebar\">\r\n      <button @click=\"handleButtonClick\" class=\"action-button\">\r\n        请求调度数据\r\n      </button>\r\n\r\n      <!-- 表格展示调度数据 -->\r\n      <table class=\"data-table\">\r\n        <thead>\r\n          <tr>\r\n            <th>调度ID</th>\r\n            <th>起始点</th>\r\n            <th>终点</th>\r\n            <th>调度数量</th>\r\n            <th>开始调度</th>\r\n            <!-- 新增的列 -->\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <!-- 动态渲染表格数据 -->\r\n          <tr v-for=\"(row, index) in tableData\" :key=\"index\">\r\n            <td>{{ row.dispatchId }}</td>\r\n            <td>{{ row.startPoint }}</td>\r\n            <td>{{ row.endPoint }}</td>\r\n            <td>{{ row.scheduleAmount }}</td>\r\n            <td>\r\n              <button\r\n                @click=\"startDispatch(row.dispatchId)\"\r\n                class=\"start-dispatch-button\"\r\n              >\r\n                开始调度\r\n              </button>\r\n            </td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, onMounted } from \"vue\";\r\nimport { getRanderingSorted } from \"@/api/rendering\"; // 假设你的接口方法\r\n\r\nexport default {\r\n  name: \"MapWindow\",\r\n  setup() {\r\n    const map = ref(null);\r\n    const polygons = ref([]);\r\n    const tableData = ref([]); // 存储表格数据\r\n\r\n    // 加载并初始化地图\r\n    const loadAMapApi = () => {\r\n      const script = document.createElement(\"script\");\r\n      script.type = \"text/javascript\";\r\n      script.src =\r\n        \"https://webapi.amap.com/maps?v=2.0&key=a6042dfaa8137c1bd9f59034cd3021a3\";\r\n      document.head.appendChild(script);\r\n\r\n      script.onload = () => {\r\n        initMap();\r\n      };\r\n    };\r\n\r\n    const initMap = () => {\r\n      const layer = new AMap.createDefaultLayer({\r\n        zooms: [3, 20],\r\n        visible: true,\r\n        opacity: 1,\r\n        zIndex: 0,\r\n      });\r\n\r\n      map.value = new AMap.Map(\"container\", {\r\n        viewMode: \"2D\",\r\n        zoom: 16.3,\r\n        center: [113.266949, 35.188365],\r\n        layer: [layer],\r\n      });\r\n    };\r\n\r\n    // 获取并渲染数据\r\n    onMounted(async () => {\r\n      try {\r\n        const response = await getRanderingSorted();\r\n        if (response.data.code === 0 && Array.isArray(response.data.data)) {\r\n          const formattedPolygons = response.data.data.map((item) => {\r\n            const coordinates = item.coordinates;\r\n            const polygon = new AMap.Polygon({\r\n              path: coordinates,\r\n              fillColor: \"#ccebc5\",\r\n              strokeOpacity: 1,\r\n              fillOpacity: 0.5,\r\n              strokeColor: \"#2b8cbe\",\r\n              strokeWeight: 1,\r\n              strokeStyle: \"dashed\",\r\n              strokeDasharray: [5, 5],\r\n            });\r\n            return polygon;\r\n          });\r\n\r\n          polygons.value = formattedPolygons;\r\n\r\n          // 延迟添加多边形到地图\r\n          setTimeout(() => {\r\n            addPolygonsToMap(polygons.value);\r\n          }, 500);\r\n        } else {\r\n          console.error(\"Invalid data format\", response.data);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error fetching polygons:\", error);\r\n      }\r\n    });\r\n\r\n    // 将多边形添加到地图\r\n    const addPolygonsToMap = (polygons) => {\r\n      if (Array.isArray(polygons)) {\r\n        polygons.forEach((polygon) => {\r\n          if (polygon instanceof AMap.Polygon) {\r\n            map.value.add(polygon);\r\n          } else {\r\n            console.error(\"Invalid polygon item\", polygon);\r\n          }\r\n        });\r\n      } else {\r\n        console.error(\"Polygons is not an array:\", polygons);\r\n      }\r\n    };\r\n\r\n    // 请求并更新表格数据\r\n    const handleButtonClick = async () => {\r\n      try {\r\n        const response = await fetchScheduleData();\r\n        if (response.data.code === 0 && Array.isArray(response.data.data)) {\r\n          // 更新表格数据\r\n          tableData.value = response.data.data.map((item) => ({\r\n            dispatchId: item.dispatchId,\r\n            startPoint: item.startPoint,\r\n            endPoint: item.endPoint,\r\n            scheduleAmount: item.scheduleAmount,\r\n          }));\r\n        } else {\r\n          console.error(\"Invalid data format\", response.data);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error fetching schedule data:\", error);\r\n      }\r\n    };\r\n\r\n    // 假设这是向后端请求数据的 API 方法\r\n    const fetchScheduleData = async () => {\r\n      // 调用后端接口（假设此接口返回调度数据）\r\n      const response = await fetch(\"/api/get-schedule-data\");\r\n      return response.json();\r\n    };\r\n\r\n    // 开始调度\r\n    const startDispatch = async (dispatchId) => {\r\n      try {\r\n        // 发起调度请求\r\n        const response = await fetch(`/api/start-dispatch/${dispatchId}`, {\r\n          method: \"POST\",\r\n        });\r\n        const data = await response.json();\r\n        if (data.success) {\r\n          alert(`调度 ${dispatchId} 已成功启动！`);\r\n        } else {\r\n          alert(`调度 ${dispatchId} 启动失败，请重试！`);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"调度启动失败\", error);\r\n      }\r\n    };\r\n\r\n    // 加载并初始化地图 API\r\n    onMounted(() => {\r\n      loadAMapApi();\r\n    });\r\n\r\n    return {\r\n      map,\r\n      polygons,\r\n      tableData,\r\n      handleButtonClick,\r\n      startDispatch,\r\n    };\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\nhtml,\r\nbody,\r\n#container {\r\n  margin: 0;\r\n  padding: 0;\r\n  height: 100%;\r\n}\r\n\r\n.map-container {\r\n  display: flex;\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n\r\n.map {\r\n  flex-grow: 1;\r\n  height: 100%;\r\n}\r\n\r\n.right-sidebar {\r\n  width: 450px; /* 固定宽度的右侧面板 */\r\n  background-color: #fff;\r\n  padding: 20px;\r\n  border-radius: 10px;\r\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);\r\n  overflow-y: auto;\r\n}\r\n\r\n.action-button {\r\n  width: 100%;\r\n  padding: 10px;\r\n  background-color: #4caf50;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 5px;\r\n  font-size: 16px;\r\n  cursor: pointer;\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.action-button:hover {\r\n  background-color: #45a049;\r\n}\r\n\r\n.data-table {\r\n  width: 100%;\r\n  border-collapse: collapse;\r\n}\r\n\r\n.data-table th,\r\n.data-table td {\r\n  border: 1px solid #ddd;\r\n  padding: 8px;\r\n  text-align: left;\r\n}\r\n\r\n.data-table th {\r\n  background-color: #f2f2f2;\r\n}\r\n\r\n.start-dispatch-button {\r\n  padding: 5px 10px;\r\n  background-color: #008cba;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n}\r\n\r\n.start-dispatch-button:hover {\r\n  background-color: #007b9f;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
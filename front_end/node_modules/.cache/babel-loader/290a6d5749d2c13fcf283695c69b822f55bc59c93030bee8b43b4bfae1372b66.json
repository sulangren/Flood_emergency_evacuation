{"ast":null,"code":"import { createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, normalizeClass as _normalizeClass, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  id: \"layer-switch\",\n  class: \"map-control-container\"\n};\nconst _hoisted_2 = {\n  class: \"map-control-buttons\"\n};\nconst _hoisted_3 = {\n  id: \"map-functions\",\n  class: \"map-functions\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(_Fragment, null, [_cache[6] || (_cache[6] = _createElementVNode(\"div\", {\n    id: \"container\",\n    style: {\n      \"width\": \"100%\",\n      \"height\": \"100%\"\n    }\n  }, null, -1 /* HOISTED */)), _createCommentVNode(\" 右上角图层切换控件 \"), _createElementVNode(\"div\", _hoisted_1, [_cache[5] || (_cache[5] = _createElementVNode(\"div\", {\n    class: \"map-control-header\"\n  }, \"图层切换\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"button\", {\n    class: _normalizeClass({\n      active: $setup.currentLayer === 'vector'\n    }),\n    onClick: _cache[0] || (_cache[0] = (...args) => $setup.switchToVector && $setup.switchToVector(...args))\n  }, \" 矢量地图 \", 2 /* CLASS */), _createElementVNode(\"button\", {\n    class: _normalizeClass({\n      active: $setup.currentLayer === 'satellite'\n    }),\n    onClick: _cache[1] || (_cache[1] = (...args) => $setup.switchToSatellite && $setup.switchToSatellite(...args))\n  }, \" 卫星地图 \", 2 /* CLASS */)])]), _createCommentVNode(\" 右下角功能按钮 \"), _createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"button\", {\n    onClick: _cache[2] || (_cache[2] = (...args) => $setup.resetView && $setup.resetView(...args))\n  }, \"重置视图\"), _createElementVNode(\"button\", {\n    onClick: _cache[3] || (_cache[3] = (...args) => $setup.clearPolygons && $setup.clearPolygons(...args))\n  }, \"清除多边形\"), _createElementVNode(\"button\", {\n    onClick: _cache[4] || (_cache[4] = (...args) => $setup.clearMarkers && $setup.clearMarkers(...args))\n  }, \"清除标记\")])], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"names":["id","class","_createElementBlock","_Fragment","_createElementVNode","style","_createCommentVNode","_hoisted_1","_hoisted_2","_normalizeClass","active","$setup","currentLayer","onClick","_cache","args","switchToVector","switchToSatellite","_hoisted_3","resetView","clearPolygons","clearMarkers"],"sources":["E:\\code\\Django\\project\\front\\front\\src\\components\\NearbyTramsWindow.vue"],"sourcesContent":["<template>\r\n  <div id=\"container\" style=\"width: 100%; height: 100%\"></div>\r\n  <!-- 右上角图层切换控件 -->\r\n  <div id=\"layer-switch\" class=\"map-control-container\">\r\n    <div class=\"map-control-header\">图层切换</div>\r\n    <div class=\"map-control-buttons\">\r\n      <button\r\n        :class=\"{ active: currentLayer === 'vector' }\"\r\n        @click=\"switchToVector\"\r\n      >\r\n        矢量地图\r\n      </button>\r\n      <button\r\n        :class=\"{ active: currentLayer === 'satellite' }\"\r\n        @click=\"switchToSatellite\"\r\n      >\r\n        卫星地图\r\n      </button>\r\n    </div>\r\n  </div>\r\n  <!-- 右下角功能按钮 -->\r\n  <div id=\"map-functions\" class=\"map-functions\">\r\n    <button @click=\"resetView\">重置视图</button>\r\n    <button @click=\"clearPolygons\">清除多边形</button>\r\n    <button @click=\"clearMarkers\">清除标记</button>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, onMounted } from \"vue\";\r\nimport { getRanderingSorted, getPointSorted } from \"@/api/rendering\";\r\n\r\nexport default {\r\n  name: \"MapWindow\",\r\n  setup() {\r\n    const map = ref(null);\r\n    const polygons = ref([]); // 存储多边形对象\r\n    const markers = ref([]); // 存储标记点对象\r\n    const currentLayer = ref(\"vector\"); // 当前图层（矢量或卫星）\r\n    let vectorLayer = null;\r\n    let satelliteLayer = null;\r\n\r\n    // 加载并初始化地图\r\n    const loadAMapApi = () => {\r\n      const script = document.createElement(\"script\");\r\n      script.type = \"text/javascript\";\r\n      script.src =\r\n        \"https://webapi.amap.com/maps?v=2.0&key=a6042dfaa8137c1bd9f59034cd3021a3\";\r\n      document.head.appendChild(script);\r\n\r\n      script.onload = () => {\r\n        initMap();\r\n      };\r\n    };\r\n\r\n    const initMap = () => {\r\n      if (!AMap) {\r\n        console.error(\"AMap is not defined!\");\r\n        return;\r\n      }\r\n\r\n      // 初始化图层\r\n      vectorLayer = new AMap.createDefaultLayer({\r\n        zooms: [3, 20],\r\n        visible: true,\r\n        opacity: 1,\r\n        zIndex: 0,\r\n      }); // 矢量图层\r\n      satelliteLayer = new AMap.TileLayer.Satellite(); // 卫星图层\r\n\r\n      // 初始化地图\r\n      map.value = new AMap.Map(\"container\", {\r\n        viewMode: \"2D\",\r\n        zoom: 16.3,\r\n        center: [113.266949, 35.188365], // 地图中心\r\n        layers: [vectorLayer], // 默认加载矢量图层\r\n      });\r\n\r\n      // 加载工具条控件\r\n      AMap.plugin([\"AMap.ToolBar\"], () => {\r\n        const toolBarControl = new AMap.ToolBar();\r\n        map.value.addControl(toolBarControl);\r\n      });\r\n\r\n      // 获取并渲染多边形和标记点数据\r\n      fetchPolygons();\r\n      fetchBicyclePoints();\r\n    };\r\n\r\n    // 图层切换逻辑\r\n    const switchToVector = () => {\r\n      if (currentLayer.value !== \"vector\") {\r\n        map.value.setLayers([vectorLayer]);\r\n        currentLayer.value = \"vector\";\r\n      }\r\n    };\r\n\r\n    const switchToSatellite = () => {\r\n      if (currentLayer.value !== \"satellite\") {\r\n        map.value.setLayers([satelliteLayer]);\r\n        currentLayer.value = \"satellite\";\r\n      }\r\n    };\r\n\r\n    // 获取并渲染多边形数据\r\n    const fetchPolygons = async () => {\r\n      try {\r\n        const response = await getRanderingSorted();\r\n        console.log(\"Polygons Response:\", response.data);\r\n\r\n        if (response.data.code === 0 && Array.isArray(response.data.data)) {\r\n          const formattedPolygons = response.data.data.map((item) => {\r\n            const coordinates = item.coordinates;\r\n            console.log(coordinates);\r\n            const polygon = new AMap.Polygon({\r\n              path: coordinates,\r\n              fillColor: \"#efebe2\",\r\n              strokeOpacity: 1,\r\n              fillOpacity: 0.5,\r\n              strokeColor: \"#2b8cbe\",\r\n              strokeWeight: 1,\r\n              strokeStyle: \"dashed\",\r\n              strokeDasharray: [5, 5],\r\n            });\r\n            return polygon;\r\n          });\r\n\r\n          polygons.value = formattedPolygons;\r\n\r\n          // 延迟添加多边形到地图\r\n          setTimeout(() => {\r\n            addPolygonsToMap(polygons.value);\r\n          }, 500);\r\n        } else {\r\n          console.error(\"Invalid polygon data format\", response.data);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error fetching polygons:\", error);\r\n      }\r\n    };\r\n\r\n    // 获取并渲染自行车点数据\r\n    const fetchBicyclePoints = async () => {\r\n      try {\r\n        const response = await getPointSorted();\r\n        console.log(\"Bicycles Response:\", response.data);\r\n\r\n        if (response.data.code === 0 && Array.isArray(response.data.data)) {\r\n          const bicycles = response.data.data;\r\n\r\n          // 延迟添加点到地图\r\n          setTimeout(() => {\r\n            addMarkersToMap(bicycles);\r\n          }, 500);\r\n        } else {\r\n          console.error(\"Invalid bicycle data format\", response.data);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error fetching bicycles:\", error);\r\n      }\r\n    };\r\n\r\n    // 将多边形添加到地图\r\n    const addPolygonsToMap = (polygons) => {\r\n      polygons.forEach((polygon) => map.value.add(polygon));\r\n    };\r\n\r\n    // 将自行车点添加到地图\r\n    const addMarkersToMap = (bicycles) => {\r\n      bicycles.forEach((bicycle) => {\r\n        const { id, coordinates } = bicycle;\r\n        const marker = new AMap.Marker({\r\n          position: new AMap.LngLat(coordinates[0], coordinates[1]),\r\n          title: `Bicycle ID: ${id}`,\r\n        });\r\n        markers.value.push(marker);\r\n        map.value.add(marker);\r\n      });\r\n    };\r\n\r\n    // 功能按钮逻辑\r\n    const resetView = () => {\r\n      map.value.setZoomAndCenter(16.3, [113.266949, 35.188365]);\r\n    };\r\n\r\n    const clearPolygons = () => {\r\n      polygons.value.forEach((polygon) => map.value.remove(polygon));\r\n      polygons.value = [];\r\n    };\r\n\r\n    const clearMarkers = () => {\r\n      markers.value.forEach((marker) => map.value.remove(marker));\r\n      markers.value = [];\r\n    };\r\n\r\n    // 初始化时加载地图\r\n    onMounted(() => {\r\n      loadAMapApi();\r\n    });\r\n\r\n    return {\r\n      currentLayer,\r\n      switchToVector,\r\n      switchToSatellite,\r\n      resetView,\r\n      clearPolygons,\r\n      clearMarkers,\r\n    };\r\n  },\r\n};\r\n</script>\r\n\r\n<style>\r\nhtml,\r\nbody,\r\n#container {\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n\r\n.map-control {\r\n  position: absolute;\r\n  top: 10px;\r\n  right: 10px;\r\n  z-index: 1000;\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 5px;\r\n}\r\n\r\n.map-control button {\r\n  background-color: #fff;\r\n  border: 1px solid #ccc;\r\n  padding: 8px 12px;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  font-size: 14px;\r\n  transition: background-color 0.3s;\r\n}\r\n\r\n.map-control button:hover {\r\n  background-color: #f0f0f0;\r\n}\r\n\r\n.map-control button.active {\r\n  background-color: #2b8cbe;\r\n  color: #fff;\r\n  border-color: #2b8cbe;\r\n}\r\n\r\n.map-functions {\r\n  position: absolute;\r\n  bottom: 10px;\r\n  right: 10px;\r\n  z-index: 1000;\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 5px;\r\n}\r\n\r\n.map-functions button {\r\n  background-color: #fff;\r\n  border: 1px solid #ccc;\r\n  padding: 8px 12px;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  font-size: 14px;\r\n  transition: background-color 0.3s;\r\n}\r\n\r\n.map-functions button:hover {\r\n  background-color: #f0f0f0;\r\n}\r\n\r\n.map-control-container {\r\n  position: absolute;\r\n  top: 10px;\r\n  left: 10px;\r\n  z-index: 1000;\r\n  width: 160px;\r\n  background: #fff;\r\n  border: 1px solid #ccc;\r\n  border-radius: 6px;\r\n  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.2);\r\n  font-family: Arial, sans-serif;\r\n  overflow: hidden;\r\n}\r\n\r\n.map-control-header {\r\n  background: #2b8cbe;\r\n  color: #fff;\r\n  padding: 8px;\r\n  text-align: center;\r\n  font-weight: bold;\r\n  border-bottom: 1px solid #ccc;\r\n}\r\n\r\n.map-control-buttons {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 5px;\r\n  padding: 8px;\r\n}\r\n\r\n.map-control-buttons button {\r\n  background-color: #fff;\r\n  border: 1px solid #ccc;\r\n  padding: 8px 12px;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  font-size: 14px;\r\n  text-align: center;\r\n  transition: background-color 0.3s, color 0.3s;\r\n}\r\n\r\n.map-control-buttons button:hover {\r\n  background-color: #f0f0f0;\r\n}\r\n\r\n.map-control-buttons button.active {\r\n  background-color: #2b8cbe;\r\n  color: #fff;\r\n  border-color: #2b8cbe;\r\n}\r\n</style>\r\n"],"mappings":";;EAGOA,EAAE,EAAC,cAAc;EAACC,KAAK,EAAC;;;EAEtBA,KAAK,EAAC;AAAqB;;EAgB7BD,EAAE,EAAC,eAAe;EAACC,KAAK,EAAC;;;uBArBhCC,mBAAA,CAAAC,SAAA,S,0BACEC,mBAAA,CAA4D;IAAvDJ,EAAE,EAAC,WAAW;IAACK,KAAiC,EAAjC;MAAA;MAAA;IAAA;+BACpBC,mBAAA,eAAkB,EAClBF,mBAAA,CAgBM,OAhBNG,UAgBM,G,0BAfJH,mBAAA,CAA0C;IAArCH,KAAK,EAAC;EAAoB,GAAC,MAAI,sBACpCG,mBAAA,CAaM,OAbNI,UAaM,GAZJJ,mBAAA,CAKS;IAJNH,KAAK,EAPdQ,eAAA;MAAAC,MAAA,EAO0BC,MAAA,CAAAC,YAAY;IAAA;IAC7BC,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEJ,MAAA,CAAAK,cAAA,IAAAL,MAAA,CAAAK,cAAA,IAAAD,IAAA,CAAc;KACvB,QAED,kBACAX,mBAAA,CAKS;IAJNH,KAAK,EAbdQ,eAAA;MAAAC,MAAA,EAa0BC,MAAA,CAAAC,YAAY;IAAA;IAC7BC,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEJ,MAAA,CAAAM,iBAAA,IAAAN,MAAA,CAAAM,iBAAA,IAAAF,IAAA,CAAiB;KAC1B,QAED,iB,KAGJT,mBAAA,aAAgB,EAChBF,mBAAA,CAIM,OAJNc,UAIM,GAHJd,mBAAA,CAAwC;IAA/BS,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEJ,MAAA,CAAAQ,SAAA,IAAAR,MAAA,CAAAQ,SAAA,IAAAJ,IAAA,CAAS;KAAE,MAAI,GAC/BX,mBAAA,CAA6C;IAApCS,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEJ,MAAA,CAAAS,aAAA,IAAAT,MAAA,CAAAS,aAAA,IAAAL,IAAA,CAAa;KAAE,OAAK,GACpCX,mBAAA,CAA2C;IAAlCS,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEJ,MAAA,CAAAU,YAAA,IAAAV,MAAA,CAAAU,YAAA,IAAAN,IAAA,CAAY;KAAE,MAAI,E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
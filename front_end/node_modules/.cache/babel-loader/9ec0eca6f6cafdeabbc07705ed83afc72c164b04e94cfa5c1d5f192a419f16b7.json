{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport { ref, onMounted, nextTick } from \"vue\";\nimport { getRanderingSorted, getPointSorted } from \"@/api/rendering\";\nexport default {\n  name: \"MapWindow\",\n  setup() {\n    const map = ref(null);\n    const polygons = ref([]); // 存储多边形对象\n    const markers = ref([]); // 存储标记点对象\n    const currentLayer = ref(\"vector\"); // 当前图层（矢量或卫星）\n    const isDropdownVisible = ref(false); // 下拉菜单是否显示\n    let vectorLayer = null;\n    let satelliteLayer = null;\n    let overviewMap = null; // 小地图变量\n    let overviewRect = null; // 用于小地图中的框\n    const lastMarker = ref(null); // 使用 ref 来定义 lastMarker\n\n    // 距离测量相关\n    let measurementMode = false; // 是否处于测量模式\n    let points = []; // 存储点击的点\n    let lines = []; // 存储连线对象\n    let totalDistance = 0; // 总距离\n\n    // 加载并初始化地图\n    const loadAMapApi = () => {\n      const script = document.createElement(\"script\");\n      script.type = \"text/javascript\";\n      script.src = \"https://webapi.amap.com/maps?v=2.0&key=a6042dfaa8137c1bd9f59034cd3021a3\";\n      document.head.appendChild(script);\n      script.onload = () => {\n        initMap();\n      };\n    };\n\n    // 初始化地图\n    const initMap = () => {\n      if (!AMap) {\n        console.error(\"AMap is not defined!\");\n        return;\n      }\n\n      // 初始化图层\n      vectorLayer = new AMap.createDefaultLayer({\n        zooms: [3, 20],\n        visible: true,\n        opacity: 1,\n        zIndex: 0\n      }); // 矢量图层\n      satelliteLayer = new AMap.TileLayer.Satellite(); // 卫星图层\n\n      // 初始化地图\n      map.value = new AMap.Map(\"container\", {\n        viewMode: \"2D\",\n        zoom: 16.3,\n        center: [113.266949, 35.188365],\n        // 地图中心\n        layers: [vectorLayer] // 默认加载矢量图层\n      });\n\n      // 加载工具条控件\n      AMap.plugin([\"AMap.ToolBar\"], () => {\n        const toolBarControl = new AMap.ToolBar();\n        map.value.addControl(toolBarControl);\n      });\n\n      // 在地图初始化完成后绑定事件\n      nextTick(() => {\n        if (map.value) {\n          map.value.on(\"click\", addPoint); // 绑定点击事件\n          fetchPolygons();\n          fetchBicyclePoints();\n        }\n      });\n\n      // 在地图初始化完成后绑定事件\n      map.value.on(\"click\", addPoint); // 在地图初始化时绑定点击事件\n\n      // 获取并渲染多边形和标记点数据\n      fetchPolygons();\n      fetchBicyclePoints();\n\n      // 添加 Valid_area 范围的多边形\n      const Valid_area = [[[[113.256395, 35.190641], [113.257839, 35.183192], [113.258212, 35.182905], [113.258597, 35.18288], [113.276622, 35.185157], [113.274351, 35.196294], [113.274176, 35.196435], [113.273903, 35.196433], [113.27348, 35.196239], [113.271625, 35.194724], [113.270753, 35.193288], [113.267986, 35.192422], [113.261557, 35.191206], [113.256395, 35.190641]]]];\n      const polygon = new AMap.Polygon({\n        path: Valid_area,\n        // 多边形路径\n        fillColor: \"#ccebc5\",\n        // 多边形填充颜色\n        strokeOpacity: 1,\n        // 线条透明度\n        fillOpacity: 0.5,\n        // 填充透明度\n        strokeColor: \"#ff0000\",\n        // 线条颜色\n        strokeWeight: 3,\n        // 线条宽度\n        strokeStyle: \"dashed\",\n        // 线样式\n        strokeDasharray: [5, 5] // 虚线样式\n      });\n\n      // 鼠标移入多边形时改变填充色和透明度\n      polygon.on(\"mouseover\", () => {\n        polygon.setOptions({\n          fillOpacity: 0.1,\n          // 多边形填充透明度\n          fillColor: \"#7bccc4\"\n        });\n      });\n\n      // 将多边形添加到地图\n      map.value.add(polygon);\n\n      // 初始化鹰眼图\n      nextTick(() => {\n        initOverviewMap();\n      });\n    };\n\n    // 初始化小地图（鹰眼图）\n    const initOverviewMap = () => {\n      overviewMap = new AMap.Map(\"overview-map\", {\n        zoom: 13.5,\n        // 设置鹰眼图缩放级别\n        center: map.value.getCenter(),\n        // 设置小地图中心点为大地图中心\n        viewMode: \"2D\",\n        // 小地图模式\n        zooms: [3, 15] // 小地图缩放级别\n      });\n\n      // 小地图上的框，用于显示大地图的显示区域\n      overviewRect = new AMap.Rectangle({\n        bounds: map.value.getBounds(),\n        strokeColor: \"#F00\",\n        strokeWeight: 2,\n        fillOpacity: 0.3,\n        fillColor: \"#FF0\"\n      });\n      overviewMap.add(overviewRect);\n\n      // 监听大地图的移动事件，更新小地图视图\n      map.value.on(\"move\", () => {\n        const center = map.value.getCenter();\n        overviewMap.setCenter(center); // 更新小地图中心\n        updateOverviewRect(); // 更新小地图的显示框\n      });\n\n      // 监听大地图的缩放事件，更新小地图的框\n      map.value.on(\"zoomend\", () => {\n        updateOverviewRect(); // 更新显示框\n      });\n\n      // 监听鼠标的移动事件\n      map.value.on(\"mousemove\", () => {\n        updateOverviewRect(); // 鼠标移动时，更新小地图框\n      });\n    };\n\n    // 更新小地图上的显示框\n    const updateOverviewRect = () => {\n      const bounds = map.value.getBounds();\n      overviewRect.setBounds(bounds); // 设置小地图上的框为大地图当前显示区域\n    };\n    const startMeasurement = () => {\n      measurementMode = !measurementMode;\n      if (measurementMode) {\n        points = []; // 清空已标记的点\n        lines = []; // 清空已绘制的线\n        totalDistance = 0; // 重置总距离\n      }\n    };\n    const addPoint = e => {\n      if (!measurementMode) return; // 不处于测量模式时不执行\n\n      const {\n        lnglat\n      } = e;\n      const marker = new AMap.Marker({\n        position: lnglat,\n        icon: new AMap.Icon({\n          size: new AMap.Size(30, 30),\n          image: \"https://webapi.amap.com/theme/v1.3/markers/n/mark_b.png\"\n        })\n      });\n\n      // 记录第一个点为起点\n      if (points.length === 0) {\n        marker.setLabel({\n          content: \"起点\"\n        });\n      }\n\n      // 计算与上一个点的距离\n      if (points.length > 0) {\n        const lastLngLat = points[points.length - 1];\n        const distance = AMap.Util.distance(lastLngLat, lnglat);\n        totalDistance += distance;\n        const line = new AMap.Line({\n          path: [lastLngLat, lnglat],\n          strokeColor: \"#00A9FF\",\n          strokeWeight: 3\n        });\n        lines.push(line);\n        map.value.add(line);\n      }\n      points.push(lnglat);\n      map.value.add(marker);\n\n      // 更新 lastMarker 为当前的 marker\n      lastMarker.value = marker; // 使用 ref 来更新 lastMarker\n\n      // 显示总距离\n      updateDistanceLabel();\n      marker.on(\"dblclick\", () => {\n        if (points.length > 1) {\n          marker.setLabel({\n            content: \"终点\"\n          });\n          measurementMode = false; // 双击终点后停止量测\n        }\n      });\n    };\n    const updateDistanceLabel = () => {\n      console.log(`当前总距离: ${totalDistance.toFixed(2)}米`);\n    };\n    const clearAll = () => {\n      points.forEach((point, index) => {\n        if (index > 0) {\n          lines[index - 1].setMap(null);\n        }\n      });\n      points = [];\n      lines = [];\n      totalDistance = 0;\n      updateDistanceLabel();\n    };\n\n    // 控制下拉菜单的显示状态\n    const toggleDropdown = visible => {\n      isDropdownVisible.value = visible !== undefined ? visible : !isDropdownVisible.value;\n    };\n\n    // 图层切换逻辑\n    const switchToVector = () => {\n      if (currentLayer.value !== \"vector\") {\n        map.value.setLayers([vectorLayer]);\n        currentLayer.value = \"vector\";\n      }\n    };\n    const switchToSatellite = () => {\n      if (currentLayer.value !== \"satellite\") {\n        map.value.setLayers([satelliteLayer]);\n        currentLayer.value = \"satellite\";\n      }\n    };\n\n    // 获取并渲染多边形数据\n    const fetchPolygons = async () => {\n      try {\n        const response = await getRanderingSorted();\n        console.log(\"Polygons Response:\", response.data);\n        if (response.data.code === 0 && Array.isArray(response.data.data)) {\n          const formattedPolygons = response.data.data.map(item => {\n            const coordinates = item.coordinates;\n            console.log(coordinates);\n            const polygon = new AMap.Polygon({\n              path: coordinates,\n              fillColor: \"#efebe2\",\n              strokeOpacity: 1,\n              fillOpacity: 0.5,\n              strokeColor: \"#2b8cbe\",\n              strokeWeight: 1,\n              strokeStyle: \"dashed\",\n              strokeDasharray: [5, 5]\n            });\n            return polygon;\n          });\n          polygons.value = formattedPolygons;\n\n          // 延迟添加多边形到地图\n          setTimeout(() => {\n            // addPolygonsToMap(polygons.value);\n            markers.value.forEach(marker => {\n              marker.setMap(map.value);\n            });\n          }, 500);\n        } else {\n          console.error(\"Invalid polygon data format\", response.data);\n        }\n      } catch (error) {\n        console.error(\"Error fetching polygons:\", error);\n      }\n    };\n\n    // 获取并渲染自行车点数据\n    const fetchBicyclePoints = async () => {\n      try {\n        const response = await getPointSorted();\n        console.log(\"Bicycles Response:\", response.data);\n        if (response.data.code === 0 && Array.isArray(response.data.data)) {\n          const bicycles = response.data.data;\n\n          // 延迟添加点到地图\n          setTimeout(() => {\n            addMarkersToMap(bicycles);\n          }, 500);\n        } else {\n          console.error(\"Invalid bicycle data format\", response.data);\n        }\n      } catch (error) {\n        console.error(\"Error fetching bicycles:\", error);\n      }\n    };\n\n    // 将多边形添加到地图\n    const addPolygonsToMap = polygons => {\n      polygons.forEach(polygon => map.value.add(polygon));\n    };\n\n    // 将自行车点添加到地图\n    const addMarkersToMap = bicycles => {\n      bicycles.forEach(bicycle => {\n        const {\n          id,\n          coordinates\n        } = bicycle;\n        const marker = new AMap.Marker({\n          position: new AMap.LngLat(coordinates[0], coordinates[1]),\n          title: `Bicycle ID: ${id}`\n        });\n        markers.value.push(marker);\n        map.value.add(marker);\n      });\n    };\n\n    // 功能按钮逻辑\n    const resetView = () => {\n      map.value.setZoomAndCenter(16.3, [113.266949, 35.188365]);\n    };\n    const clearPolygons = () => {\n      polygons.value.forEach(polygon => map.value.remove(polygon));\n      polygons.value = [];\n    };\n    const clearMarkers = () => {\n      markers.value.forEach(marker => map.value.remove(marker));\n      markers.value = [];\n    };\n\n    // 初始化时加载地图\n    onMounted(() => {\n      loadAMapApi();\n      map.value.on(\"click\", addPoint); // 在地图初始化时绑定点击事件\n    });\n    return {\n      currentLayer,\n      switchToVector,\n      switchToSatellite,\n      resetView,\n      clearPolygons,\n      clearMarkers,\n      toggleDropdown,\n      map,\n      isDropdownVisible,\n      startMeasurement,\n      clearAll,\n      lastMarker,\n      // 返回 lastMarker 以供模板使用\n      addPolygonsToMap\n    };\n  }\n};","map":{"version":3,"names":["ref","onMounted","nextTick","getRanderingSorted","getPointSorted","name","setup","map","polygons","markers","currentLayer","isDropdownVisible","vectorLayer","satelliteLayer","overviewMap","overviewRect","lastMarker","measurementMode","points","lines","totalDistance","loadAMapApi","script","document","createElement","type","src","head","appendChild","onload","initMap","AMap","console","error","createDefaultLayer","zooms","visible","opacity","zIndex","TileLayer","Satellite","value","Map","viewMode","zoom","center","layers","plugin","toolBarControl","ToolBar","addControl","on","addPoint","fetchPolygons","fetchBicyclePoints","Valid_area","polygon","Polygon","path","fillColor","strokeOpacity","fillOpacity","strokeColor","strokeWeight","strokeStyle","strokeDasharray","setOptions","add","initOverviewMap","getCenter","Rectangle","bounds","getBounds","setCenter","updateOverviewRect","setBounds","startMeasurement","e","lnglat","marker","Marker","position","icon","Icon","size","Size","image","length","setLabel","content","lastLngLat","distance","Util","line","Line","push","updateDistanceLabel","log","toFixed","clearAll","forEach","point","index","setMap","toggleDropdown","undefined","switchToVector","setLayers","switchToSatellite","response","data","code","Array","isArray","formattedPolygons","item","coordinates","setTimeout","bicycles","addMarkersToMap","addPolygonsToMap","bicycle","id","LngLat","title","resetView","setZoomAndCenter","clearPolygons","remove","clearMarkers"],"sources":["E:\\code\\Django\\project\\front\\front\\src\\components\\NearbyTramsWindow.vue"],"sourcesContent":["<template>\r\n  <div id=\"container\" style=\"width: 100%; height: 100%\">\r\n    <!-- 地图容器 -->\r\n    <div id=\"map-container\"></div>\r\n\r\n    <!-- 左上角的图层切换按钮 -->\r\n    <div class=\"map-control\">\r\n      <a-dropdown\r\n        :visible=\"isDropdownVisible\"\r\n        @visibleChange=\"toggleDropdown\"\r\n        trigger=\"click\"\r\n      >\r\n        <!-- 触发按钮 -->\r\n        <a-button type=\"primary\" shape=\"round\" @click=\"toggleDropdown\">\r\n          图层切换\r\n        </a-button>\r\n\r\n        <!-- 下拉菜单 -->\r\n        <template #overlay>\r\n          <a-menu>\r\n            <a-menu-item key=\"vector\" @click=\"switchToVector\">\r\n              <span :class=\"{ active: currentLayer === 'vector' }\"\r\n                >矢量地图</span\r\n              >\r\n            </a-menu-item>\r\n            <a-menu-item key=\"satellite\" @click=\"switchToSatellite\">\r\n              <span :class=\"{ active: currentLayer === 'satellite' }\"\r\n                >卫星地图</span\r\n              >\r\n            </a-menu-item>\r\n          </a-menu>\r\n        </template>\r\n      </a-dropdown>\r\n    </div>\r\n\r\n    <!-- 距离测量按钮和清空按钮 -->\r\n    <div class=\"map-functions\">\r\n      <a-button @click=\"startMeasurement\" type=\"primary\">开始量测</a-button>\r\n      <a-button @click=\"clearAll\" type=\"danger\">清空</a-button>\r\n    </div>\r\n\r\n    <!-- 小地图容器 -->\r\n    <div\r\n      id=\"overview-map\"\r\n      style=\"\r\n        position: absolute;\r\n        bottom: 10px;\r\n        right: 10px;\r\n        width: 200px;\r\n        height: 150px;\r\n        border: 1px solid #000;\r\n        z-index: 100;\r\n      \"\r\n    ></div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, onMounted, nextTick } from \"vue\";\r\nimport { getRanderingSorted, getPointSorted } from \"@/api/rendering\";\r\n\r\nexport default {\r\n  name: \"MapWindow\",\r\n  setup() {\r\n    const map = ref(null);\r\n    const polygons = ref([]); // 存储多边形对象\r\n    const markers = ref([]); // 存储标记点对象\r\n    const currentLayer = ref(\"vector\"); // 当前图层（矢量或卫星）\r\n    const isDropdownVisible = ref(false); // 下拉菜单是否显示\r\n    let vectorLayer = null;\r\n    let satelliteLayer = null;\r\n    let overviewMap = null; // 小地图变量\r\n    let overviewRect = null; // 用于小地图中的框\r\n    const lastMarker = ref(null); // 使用 ref 来定义 lastMarker\r\n\r\n    // 距离测量相关\r\n    let measurementMode = false; // 是否处于测量模式\r\n    let points = []; // 存储点击的点\r\n    let lines = []; // 存储连线对象\r\n    let totalDistance = 0; // 总距离\r\n\r\n    // 加载并初始化地图\r\n    const loadAMapApi = () => {\r\n      const script = document.createElement(\"script\");\r\n      script.type = \"text/javascript\";\r\n      script.src =\r\n        \"https://webapi.amap.com/maps?v=2.0&key=a6042dfaa8137c1bd9f59034cd3021a3\";\r\n      document.head.appendChild(script);\r\n\r\n      script.onload = () => {\r\n        initMap();\r\n      };\r\n    };\r\n\r\n    // 初始化地图\r\n    const initMap = () => {\r\n      if (!AMap) {\r\n        console.error(\"AMap is not defined!\");\r\n        return;\r\n      }\r\n\r\n      // 初始化图层\r\n      vectorLayer = new AMap.createDefaultLayer({\r\n        zooms: [3, 20],\r\n        visible: true,\r\n        opacity: 1,\r\n        zIndex: 0,\r\n      }); // 矢量图层\r\n      satelliteLayer = new AMap.TileLayer.Satellite(); // 卫星图层\r\n\r\n      // 初始化地图\r\n      map.value = new AMap.Map(\"container\", {\r\n        viewMode: \"2D\",\r\n        zoom: 16.3,\r\n        center: [113.266949, 35.188365], // 地图中心\r\n        layers: [vectorLayer], // 默认加载矢量图层\r\n      });\r\n\r\n      // 加载工具条控件\r\n      AMap.plugin([\"AMap.ToolBar\"], () => {\r\n        const toolBarControl = new AMap.ToolBar();\r\n        map.value.addControl(toolBarControl);\r\n      });\r\n\r\n      // 在地图初始化完成后绑定事件\r\n      nextTick(() => {\r\n        if (map.value) {\r\n          map.value.on(\"click\", addPoint); // 绑定点击事件\r\n          fetchPolygons();\r\n          fetchBicyclePoints();\r\n        }\r\n      });\r\n\r\n      // 在地图初始化完成后绑定事件\r\n      map.value.on(\"click\", addPoint); // 在地图初始化时绑定点击事件\r\n\r\n      // 获取并渲染多边形和标记点数据\r\n      fetchPolygons();\r\n      fetchBicyclePoints();\r\n\r\n      // 添加 Valid_area 范围的多边形\r\n      const Valid_area = [\r\n        [\r\n          [\r\n            [113.256395, 35.190641],\r\n            [113.257839, 35.183192],\r\n            [113.258212, 35.182905],\r\n            [113.258597, 35.18288],\r\n            [113.276622, 35.185157],\r\n            [113.274351, 35.196294],\r\n            [113.274176, 35.196435],\r\n            [113.273903, 35.196433],\r\n            [113.27348, 35.196239],\r\n            [113.271625, 35.194724],\r\n            [113.270753, 35.193288],\r\n            [113.267986, 35.192422],\r\n            [113.261557, 35.191206],\r\n            [113.256395, 35.190641],\r\n          ],\r\n        ],\r\n      ];\r\n\r\n      const polygon = new AMap.Polygon({\r\n        path: Valid_area, // 多边形路径\r\n        fillColor: \"#ccebc5\", // 多边形填充颜色\r\n        strokeOpacity: 1, // 线条透明度\r\n        fillOpacity: 0.5, // 填充透明度\r\n        strokeColor: \"#ff0000\", // 线条颜色\r\n        strokeWeight: 3, // 线条宽度\r\n        strokeStyle: \"dashed\", // 线样式\r\n        strokeDasharray: [5, 5], // 虚线样式\r\n      });\r\n\r\n      // 鼠标移入多边形时改变填充色和透明度\r\n      polygon.on(\"mouseover\", () => {\r\n        polygon.setOptions({\r\n          fillOpacity: 0.1, // 多边形填充透明度\r\n          fillColor: \"#7bccc4\",\r\n        });\r\n      });\r\n\r\n      // 将多边形添加到地图\r\n      map.value.add(polygon);\r\n\r\n      // 初始化鹰眼图\r\n      nextTick(() => {\r\n        initOverviewMap();\r\n      });\r\n    };\r\n\r\n    // 初始化小地图（鹰眼图）\r\n    const initOverviewMap = () => {\r\n      overviewMap = new AMap.Map(\"overview-map\", {\r\n        zoom: 13.5, // 设置鹰眼图缩放级别\r\n        center: map.value.getCenter(), // 设置小地图中心点为大地图中心\r\n        viewMode: \"2D\", // 小地图模式\r\n        zooms: [3, 15], // 小地图缩放级别\r\n      });\r\n\r\n      // 小地图上的框，用于显示大地图的显示区域\r\n      overviewRect = new AMap.Rectangle({\r\n        bounds: map.value.getBounds(),\r\n        strokeColor: \"#F00\",\r\n        strokeWeight: 2,\r\n        fillOpacity: 0.3,\r\n        fillColor: \"#FF0\",\r\n      });\r\n      overviewMap.add(overviewRect);\r\n\r\n      // 监听大地图的移动事件，更新小地图视图\r\n      map.value.on(\"move\", () => {\r\n        const center = map.value.getCenter();\r\n        overviewMap.setCenter(center); // 更新小地图中心\r\n        updateOverviewRect(); // 更新小地图的显示框\r\n      });\r\n\r\n      // 监听大地图的缩放事件，更新小地图的框\r\n      map.value.on(\"zoomend\", () => {\r\n        updateOverviewRect(); // 更新显示框\r\n      });\r\n\r\n      // 监听鼠标的移动事件\r\n      map.value.on(\"mousemove\", () => {\r\n        updateOverviewRect(); // 鼠标移动时，更新小地图框\r\n      });\r\n    };\r\n\r\n    // 更新小地图上的显示框\r\n    const updateOverviewRect = () => {\r\n      const bounds = map.value.getBounds();\r\n      overviewRect.setBounds(bounds); // 设置小地图上的框为大地图当前显示区域\r\n    };\r\n\r\n    const startMeasurement = () => {\r\n      measurementMode = !measurementMode;\r\n      if (measurementMode) {\r\n        points = []; // 清空已标记的点\r\n        lines = []; // 清空已绘制的线\r\n        totalDistance = 0; // 重置总距离\r\n      }\r\n    };\r\n\r\n    const addPoint = (e) => {\r\n      if (!measurementMode) return; // 不处于测量模式时不执行\r\n\r\n      const { lnglat } = e;\r\n      const marker = new AMap.Marker({\r\n        position: lnglat,\r\n        icon: new AMap.Icon({\r\n          size: new AMap.Size(30, 30),\r\n          image: \"https://webapi.amap.com/theme/v1.3/markers/n/mark_b.png\",\r\n        }),\r\n      });\r\n\r\n      // 记录第一个点为起点\r\n      if (points.length === 0) {\r\n        marker.setLabel({\r\n          content: \"起点\",\r\n        });\r\n      }\r\n\r\n      // 计算与上一个点的距离\r\n      if (points.length > 0) {\r\n        const lastLngLat = points[points.length - 1];\r\n        const distance = AMap.Util.distance(lastLngLat, lnglat);\r\n        totalDistance += distance;\r\n\r\n        const line = new AMap.Line({\r\n          path: [lastLngLat, lnglat],\r\n          strokeColor: \"#00A9FF\",\r\n          strokeWeight: 3,\r\n        });\r\n\r\n        lines.push(line);\r\n        map.value.add(line);\r\n      }\r\n\r\n      points.push(lnglat);\r\n      map.value.add(marker);\r\n\r\n      // 更新 lastMarker 为当前的 marker\r\n      lastMarker.value = marker; // 使用 ref 来更新 lastMarker\r\n\r\n      // 显示总距离\r\n      updateDistanceLabel();\r\n\r\n      marker.on(\"dblclick\", () => {\r\n        if (points.length > 1) {\r\n          marker.setLabel({ content: \"终点\" });\r\n          measurementMode = false; // 双击终点后停止量测\r\n        }\r\n      });\r\n    };\r\n\r\n    const updateDistanceLabel = () => {\r\n      console.log(`当前总距离: ${totalDistance.toFixed(2)}米`);\r\n    };\r\n\r\n    const clearAll = () => {\r\n      points.forEach((point, index) => {\r\n        if (index > 0) {\r\n          lines[index - 1].setMap(null);\r\n        }\r\n      });\r\n      points = [];\r\n      lines = [];\r\n      totalDistance = 0;\r\n      updateDistanceLabel();\r\n    };\r\n\r\n    // 控制下拉菜单的显示状态\r\n    const toggleDropdown = (visible) => {\r\n      isDropdownVisible.value =\r\n        visible !== undefined ? visible : !isDropdownVisible.value;\r\n    };\r\n\r\n    // 图层切换逻辑\r\n    const switchToVector = () => {\r\n      if (currentLayer.value !== \"vector\") {\r\n        map.value.setLayers([vectorLayer]);\r\n        currentLayer.value = \"vector\";\r\n      }\r\n    };\r\n\r\n    const switchToSatellite = () => {\r\n      if (currentLayer.value !== \"satellite\") {\r\n        map.value.setLayers([satelliteLayer]);\r\n        currentLayer.value = \"satellite\";\r\n      }\r\n    };\r\n\r\n    // 获取并渲染多边形数据\r\n    const fetchPolygons = async () => {\r\n      try {\r\n        const response = await getRanderingSorted();\r\n        console.log(\"Polygons Response:\", response.data);\r\n\r\n        if (response.data.code === 0 && Array.isArray(response.data.data)) {\r\n          const formattedPolygons = response.data.data.map((item) => {\r\n            const coordinates = item.coordinates;\r\n            console.log(coordinates);\r\n            const polygon = new AMap.Polygon({\r\n              path: coordinates,\r\n              fillColor: \"#efebe2\",\r\n              strokeOpacity: 1,\r\n              fillOpacity: 0.5,\r\n              strokeColor: \"#2b8cbe\",\r\n              strokeWeight: 1,\r\n              strokeStyle: \"dashed\",\r\n              strokeDasharray: [5, 5],\r\n            });\r\n            return polygon;\r\n          });\r\n\r\n          polygons.value = formattedPolygons;\r\n\r\n          // 延迟添加多边形到地图\r\n          setTimeout(() => {\r\n            // addPolygonsToMap(polygons.value);\r\n            markers.value.forEach((marker) => {\r\n              marker.setMap(map.value);\r\n            });\r\n          }, 500);\r\n        } else {\r\n          console.error(\"Invalid polygon data format\", response.data);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error fetching polygons:\", error);\r\n      }\r\n    };\r\n\r\n    // 获取并渲染自行车点数据\r\n    const fetchBicyclePoints = async () => {\r\n      try {\r\n        const response = await getPointSorted();\r\n        console.log(\"Bicycles Response:\", response.data);\r\n\r\n        if (response.data.code === 0 && Array.isArray(response.data.data)) {\r\n          const bicycles = response.data.data;\r\n\r\n          // 延迟添加点到地图\r\n          setTimeout(() => {\r\n            addMarkersToMap(bicycles);\r\n          }, 500);\r\n        } else {\r\n          console.error(\"Invalid bicycle data format\", response.data);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error fetching bicycles:\", error);\r\n      }\r\n    };\r\n\r\n    // 将多边形添加到地图\r\n    const addPolygonsToMap = (polygons) => {\r\n      polygons.forEach((polygon) => map.value.add(polygon));\r\n    };\r\n\r\n    // 将自行车点添加到地图\r\n    const addMarkersToMap = (bicycles) => {\r\n      bicycles.forEach((bicycle) => {\r\n        const { id, coordinates } = bicycle;\r\n        const marker = new AMap.Marker({\r\n          position: new AMap.LngLat(coordinates[0], coordinates[1]),\r\n          title: `Bicycle ID: ${id}`,\r\n        });\r\n        markers.value.push(marker);\r\n        map.value.add(marker);\r\n      });\r\n    };\r\n\r\n    // 功能按钮逻辑\r\n    const resetView = () => {\r\n      map.value.setZoomAndCenter(16.3, [113.266949, 35.188365]);\r\n    };\r\n\r\n    const clearPolygons = () => {\r\n      polygons.value.forEach((polygon) => map.value.remove(polygon));\r\n      polygons.value = [];\r\n    };\r\n\r\n    const clearMarkers = () => {\r\n      markers.value.forEach((marker) => map.value.remove(marker));\r\n      markers.value = [];\r\n    };\r\n\r\n    // 初始化时加载地图\r\n    onMounted(() => {\r\n      loadAMapApi();\r\n      map.value.on(\"click\", addPoint); // 在地图初始化时绑定点击事件\r\n    });\r\n\r\n    return {\r\n      currentLayer,\r\n      switchToVector,\r\n      switchToSatellite,\r\n      resetView,\r\n      clearPolygons,\r\n      clearMarkers,\r\n      toggleDropdown,\r\n      map,\r\n      isDropdownVisible,\r\n      startMeasurement,\r\n      clearAll,\r\n      lastMarker, // 返回 lastMarker 以供模板使用\r\n      addPolygonsToMap,\r\n    };\r\n  },\r\n};\r\n</script>\r\n\r\n<style>\r\nhtml,\r\nbody,\r\n#container {\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n\r\n.map-control {\r\n  position: absolute;\r\n  top: 10px;\r\n  right: 10px;\r\n  z-index: 1000;\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 5px;\r\n}\r\n\r\n.map-control button {\r\n  background-color: #fff;\r\n  border: 1px solid #ccc;\r\n  padding: 8px 12px;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  font-size: 14px;\r\n  transition: background-color 0.3s;\r\n  color: #000;\r\n}\r\n\r\n.map-control button:hover {\r\n  background-color: #f0f0f0;\r\n}\r\n\r\n.map-control button.active {\r\n  background-color: #2b8cbe;\r\n  color: #fff;\r\n  border-color: #2b8cbe;\r\n}\r\n\r\n.map-functions {\r\n  position: absolute;\r\n  bottom: 10px;\r\n  right: 10px;\r\n  z-index: 1000;\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 5px;\r\n}\r\n\r\n.map-functions button {\r\n  background-color: #fff;\r\n  border: 1px solid #ccc;\r\n  padding: 8px 12px;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  font-size: 14px;\r\n  transition: background-color 0.3s;\r\n}\r\n\r\n.map-functions button:hover {\r\n  background-color: #f0f0f0;\r\n}\r\n\r\n.map-control-container {\r\n  position: absolute;\r\n  top: 10px;\r\n  left: 10px;\r\n  z-index: 1000;\r\n  width: 160px;\r\n  background: #fff;\r\n  border: 1px solid #ccc;\r\n  border-radius: 6px;\r\n  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.2);\r\n  font-family: Arial, sans-serif;\r\n  overflow: hidden;\r\n}\r\n\r\n.map-control-header {\r\n  background: #2b8cbe;\r\n  color: #fff;\r\n  padding: 8px;\r\n  text-align: center;\r\n  font-weight: bold;\r\n  border-bottom: 1px solid #ccc;\r\n}\r\n\r\n.map-control-buttons {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 5px;\r\n  padding: 8px;\r\n}\r\n\r\n.map-control-buttons button {\r\n  background-color: #fff;\r\n  border: 1px solid #ccc;\r\n  padding: 8px 12px;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  font-size: 14px;\r\n  text-align: center;\r\n  transition: background-color 0.3s, color 0.3s;\r\n}\r\n\r\n.map-control-buttons button:hover {\r\n  background-color: #f0f0f0;\r\n}\r\n\r\n.map-control-buttons button.active {\r\n  background-color: #2b8cbe;\r\n  color: #fff;\r\n  border-color: #2b8cbe;\r\n}\r\n\r\n#overview-map {\r\n  position: absolute;\r\n  top: 10px;\r\n  left: 10px; /* 放在左上角 */\r\n  width: 200px;\r\n  height: 150px;\r\n  border: 1px solid #000;\r\n  z-index: 100;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
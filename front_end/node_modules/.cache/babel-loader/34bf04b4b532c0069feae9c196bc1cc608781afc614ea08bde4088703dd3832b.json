{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/esnext.iterator.some.js\";\nimport { createVNode as _createVNode } from \"vue\";\nimport { createApp } from 'vue';\nimport { styleToString } from '../vc-util/Dom/css';\n// We only handle element & text node.\nconst TEXT_NODE = 3;\nconst COMMENT_NODE = 8;\nlet ellipsisContainer;\nconst wrapperStyle = {\n  padding: 0,\n  margin: 0,\n  display: 'inline',\n  lineHeight: 'inherit'\n};\nfunction resetDomStyles(target, origin) {\n  target.setAttribute('aria-hidden', 'true');\n  const originStyle = window.getComputedStyle(origin);\n  const originCSS = styleToString(originStyle);\n  // Set shadow\n  target.setAttribute('style', originCSS);\n  target.style.position = 'fixed';\n  target.style.left = '0';\n  target.style.height = 'auto';\n  target.style.minHeight = 'auto';\n  target.style.maxHeight = 'auto';\n  target.style.paddingTop = '0';\n  target.style.paddingBottom = '0';\n  target.style.borderTopWidth = '0';\n  target.style.borderBottomWidth = '0';\n  target.style.top = '-999999px';\n  target.style.zIndex = '-1000';\n  // clean up css overflow\n  target.style.textOverflow = 'clip';\n  target.style.whiteSpace = 'normal';\n  target.style.webkitLineClamp = 'none';\n}\nfunction getRealLineHeight(originElement) {\n  const heightContainer = document.createElement('div');\n  resetDomStyles(heightContainer, originElement);\n  heightContainer.appendChild(document.createTextNode('text'));\n  document.body.appendChild(heightContainer);\n  // The element real height is always less than multiple of line-height\n  // Use getBoundingClientRect to get actual single row height of the element\n  const realHeight = heightContainer.getBoundingClientRect().height;\n  document.body.removeChild(heightContainer);\n  return realHeight;\n}\nexport default (originElement, option, content, fixedContent, ellipsisStr) => {\n  if (!ellipsisContainer) {\n    ellipsisContainer = document.createElement('div');\n    ellipsisContainer.setAttribute('aria-hidden', 'true');\n    document.body.appendChild(ellipsisContainer);\n  }\n  const {\n    rows,\n    suffix = ''\n  } = option;\n  const lineHeight = getRealLineHeight(originElement);\n  const maxHeight = Math.round(lineHeight * rows * 100) / 100;\n  resetDomStyles(ellipsisContainer, originElement);\n  // Render in the fake container\n  const vm = createApp({\n    render() {\n      return _createVNode(\"div\", {\n        \"style\": wrapperStyle\n      }, [_createVNode(\"span\", {\n        \"style\": wrapperStyle\n      }, [content, suffix]), _createVNode(\"span\", {\n        \"style\": wrapperStyle\n      }, [fixedContent])]);\n    }\n  });\n  vm.mount(ellipsisContainer);\n  // Check if ellipsis in measure div is height enough for content\n  function inRange() {\n    const currentHeight = Math.round(ellipsisContainer.getBoundingClientRect().height * 100) / 100;\n    return currentHeight - 0.1 <= maxHeight; // -.1 for firefox\n  }\n  // Skip ellipsis if already match\n  if (inRange()) {\n    vm.unmount();\n    return {\n      content,\n      text: ellipsisContainer.innerHTML,\n      ellipsis: false\n    };\n  }\n  const childNodes = Array.prototype.slice.apply(ellipsisContainer.childNodes[0].childNodes[0].cloneNode(true).childNodes).filter(_ref => {\n    let {\n      nodeType,\n      data\n    } = _ref;\n    return nodeType !== COMMENT_NODE && data !== '';\n  });\n  const fixedNodes = Array.prototype.slice.apply(ellipsisContainer.childNodes[0].childNodes[1].cloneNode(true).childNodes);\n  vm.unmount();\n  // ========================= Find match ellipsis content =========================\n  const ellipsisChildren = [];\n  ellipsisContainer.innerHTML = '';\n  // Create origin content holder\n  const ellipsisContentHolder = document.createElement('span');\n  ellipsisContainer.appendChild(ellipsisContentHolder);\n  const ellipsisTextNode = document.createTextNode(ellipsisStr + suffix);\n  ellipsisContentHolder.appendChild(ellipsisTextNode);\n  fixedNodes.forEach(childNode => {\n    ellipsisContainer.appendChild(childNode);\n  });\n  // Append before fixed nodes\n  function appendChildNode(node) {\n    ellipsisContentHolder.insertBefore(node, ellipsisTextNode);\n  }\n  // Get maximum text\n  function measureText(textNode, fullText) {\n    let startLoc = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    let endLoc = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : fullText.length;\n    let lastSuccessLoc = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n    const midLoc = Math.floor((startLoc + endLoc) / 2);\n    const currentText = fullText.slice(0, midLoc);\n    textNode.textContent = currentText;\n    if (startLoc >= endLoc - 1) {\n      // Loop when step is small\n      for (let step = endLoc; step >= startLoc; step -= 1) {\n        const currentStepText = fullText.slice(0, step);\n        textNode.textContent = currentStepText;\n        if (inRange() || !currentStepText) {\n          return step === fullText.length ? {\n            finished: false,\n            vNode: fullText\n          } : {\n            finished: true,\n            vNode: currentStepText\n          };\n        }\n      }\n    }\n    if (inRange()) {\n      return measureText(textNode, fullText, midLoc, endLoc, midLoc);\n    }\n    return measureText(textNode, fullText, startLoc, midLoc, lastSuccessLoc);\n  }\n  function measureNode(childNode) {\n    const type = childNode.nodeType;\n    // console.log('type', type);\n    // if (type === ELEMENT_NODE) {\n    //   // We don't split element, it will keep if whole element can be displayed.\n    //   appendChildNode(childNode);\n    //   if (inRange()) {\n    //     return {\n    //       finished: false,\n    //       vNode: contentList[index],\n    //     };\n    //   }\n    //   // Clean up if can not pull in\n    //   ellipsisContentHolder.removeChild(childNode);\n    //   return {\n    //     finished: true,\n    //     vNode: null,\n    //   };\n    // }\n    if (type === TEXT_NODE) {\n      const fullText = childNode.textContent || '';\n      const textNode = document.createTextNode(fullText);\n      appendChildNode(textNode);\n      return measureText(textNode, fullText);\n    }\n    // Not handle other type of content\n    return {\n      finished: false,\n      vNode: null\n    };\n  }\n  childNodes.some(childNode => {\n    const {\n      finished,\n      vNode\n    } = measureNode(childNode);\n    if (vNode) {\n      ellipsisChildren.push(vNode);\n    }\n    return finished;\n  });\n  return {\n    content: ellipsisChildren,\n    text: ellipsisContainer.innerHTML,\n    ellipsis: true\n  };\n};","map":{"version":3,"names":["createVNode","_createVNode","createApp","styleToString","TEXT_NODE","COMMENT_NODE","ellipsisContainer","wrapperStyle","padding","margin","display","lineHeight","resetDomStyles","target","origin","setAttribute","originStyle","window","getComputedStyle","originCSS","style","position","left","height","minHeight","maxHeight","paddingTop","paddingBottom","borderTopWidth","borderBottomWidth","top","zIndex","textOverflow","whiteSpace","webkitLineClamp","getRealLineHeight","originElement","heightContainer","document","createElement","appendChild","createTextNode","body","realHeight","getBoundingClientRect","removeChild","option","content","fixedContent","ellipsisStr","rows","suffix","Math","round","vm","render","mount","inRange","currentHeight","unmount","text","innerHTML","ellipsis","childNodes","Array","prototype","slice","apply","cloneNode","filter","_ref","nodeType","data","fixedNodes","ellipsisChildren","ellipsisContentHolder","ellipsisTextNode","forEach","childNode","appendChildNode","node","insertBefore","measureText","textNode","fullText","startLoc","arguments","length","undefined","endLoc","lastSuccessLoc","midLoc","floor","currentText","textContent","step","currentStepText","finished","vNode","measureNode","type","some","push"],"sources":["E:/code/Django/project/front/front/node_modules/ant-design-vue/es/typography/util.js"],"sourcesContent":["import { createVNode as _createVNode } from \"vue\";\nimport { createApp } from 'vue';\nimport { styleToString } from '../vc-util/Dom/css';\n// We only handle element & text node.\nconst TEXT_NODE = 3;\nconst COMMENT_NODE = 8;\nlet ellipsisContainer;\nconst wrapperStyle = {\n  padding: 0,\n  margin: 0,\n  display: 'inline',\n  lineHeight: 'inherit'\n};\nfunction resetDomStyles(target, origin) {\n  target.setAttribute('aria-hidden', 'true');\n  const originStyle = window.getComputedStyle(origin);\n  const originCSS = styleToString(originStyle);\n  // Set shadow\n  target.setAttribute('style', originCSS);\n  target.style.position = 'fixed';\n  target.style.left = '0';\n  target.style.height = 'auto';\n  target.style.minHeight = 'auto';\n  target.style.maxHeight = 'auto';\n  target.style.paddingTop = '0';\n  target.style.paddingBottom = '0';\n  target.style.borderTopWidth = '0';\n  target.style.borderBottomWidth = '0';\n  target.style.top = '-999999px';\n  target.style.zIndex = '-1000';\n  // clean up css overflow\n  target.style.textOverflow = 'clip';\n  target.style.whiteSpace = 'normal';\n  target.style.webkitLineClamp = 'none';\n}\nfunction getRealLineHeight(originElement) {\n  const heightContainer = document.createElement('div');\n  resetDomStyles(heightContainer, originElement);\n  heightContainer.appendChild(document.createTextNode('text'));\n  document.body.appendChild(heightContainer);\n  // The element real height is always less than multiple of line-height\n  // Use getBoundingClientRect to get actual single row height of the element\n  const realHeight = heightContainer.getBoundingClientRect().height;\n  document.body.removeChild(heightContainer);\n  return realHeight;\n}\nexport default ((originElement, option, content, fixedContent, ellipsisStr) => {\n  if (!ellipsisContainer) {\n    ellipsisContainer = document.createElement('div');\n    ellipsisContainer.setAttribute('aria-hidden', 'true');\n    document.body.appendChild(ellipsisContainer);\n  }\n  const {\n    rows,\n    suffix = ''\n  } = option;\n  const lineHeight = getRealLineHeight(originElement);\n  const maxHeight = Math.round(lineHeight * rows * 100) / 100;\n  resetDomStyles(ellipsisContainer, originElement);\n  // Render in the fake container\n  const vm = createApp({\n    render() {\n      return _createVNode(\"div\", {\n        \"style\": wrapperStyle\n      }, [_createVNode(\"span\", {\n        \"style\": wrapperStyle\n      }, [content, suffix]), _createVNode(\"span\", {\n        \"style\": wrapperStyle\n      }, [fixedContent])]);\n    }\n  });\n  vm.mount(ellipsisContainer);\n  // Check if ellipsis in measure div is height enough for content\n  function inRange() {\n    const currentHeight = Math.round(ellipsisContainer.getBoundingClientRect().height * 100) / 100;\n    return currentHeight - 0.1 <= maxHeight; // -.1 for firefox\n  }\n  // Skip ellipsis if already match\n  if (inRange()) {\n    vm.unmount();\n    return {\n      content,\n      text: ellipsisContainer.innerHTML,\n      ellipsis: false\n    };\n  }\n  const childNodes = Array.prototype.slice.apply(ellipsisContainer.childNodes[0].childNodes[0].cloneNode(true).childNodes).filter(_ref => {\n    let {\n      nodeType,\n      data\n    } = _ref;\n    return nodeType !== COMMENT_NODE && data !== '';\n  });\n  const fixedNodes = Array.prototype.slice.apply(ellipsisContainer.childNodes[0].childNodes[1].cloneNode(true).childNodes);\n  vm.unmount();\n  // ========================= Find match ellipsis content =========================\n  const ellipsisChildren = [];\n  ellipsisContainer.innerHTML = '';\n  // Create origin content holder\n  const ellipsisContentHolder = document.createElement('span');\n  ellipsisContainer.appendChild(ellipsisContentHolder);\n  const ellipsisTextNode = document.createTextNode(ellipsisStr + suffix);\n  ellipsisContentHolder.appendChild(ellipsisTextNode);\n  fixedNodes.forEach(childNode => {\n    ellipsisContainer.appendChild(childNode);\n  });\n  // Append before fixed nodes\n  function appendChildNode(node) {\n    ellipsisContentHolder.insertBefore(node, ellipsisTextNode);\n  }\n  // Get maximum text\n  function measureText(textNode, fullText) {\n    let startLoc = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    let endLoc = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : fullText.length;\n    let lastSuccessLoc = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n    const midLoc = Math.floor((startLoc + endLoc) / 2);\n    const currentText = fullText.slice(0, midLoc);\n    textNode.textContent = currentText;\n    if (startLoc >= endLoc - 1) {\n      // Loop when step is small\n      for (let step = endLoc; step >= startLoc; step -= 1) {\n        const currentStepText = fullText.slice(0, step);\n        textNode.textContent = currentStepText;\n        if (inRange() || !currentStepText) {\n          return step === fullText.length ? {\n            finished: false,\n            vNode: fullText\n          } : {\n            finished: true,\n            vNode: currentStepText\n          };\n        }\n      }\n    }\n    if (inRange()) {\n      return measureText(textNode, fullText, midLoc, endLoc, midLoc);\n    }\n    return measureText(textNode, fullText, startLoc, midLoc, lastSuccessLoc);\n  }\n  function measureNode(childNode) {\n    const type = childNode.nodeType;\n    // console.log('type', type);\n    // if (type === ELEMENT_NODE) {\n    //   // We don't split element, it will keep if whole element can be displayed.\n    //   appendChildNode(childNode);\n    //   if (inRange()) {\n    //     return {\n    //       finished: false,\n    //       vNode: contentList[index],\n    //     };\n    //   }\n    //   // Clean up if can not pull in\n    //   ellipsisContentHolder.removeChild(childNode);\n    //   return {\n    //     finished: true,\n    //     vNode: null,\n    //   };\n    // }\n    if (type === TEXT_NODE) {\n      const fullText = childNode.textContent || '';\n      const textNode = document.createTextNode(fullText);\n      appendChildNode(textNode);\n      return measureText(textNode, fullText);\n    }\n    // Not handle other type of content\n    return {\n      finished: false,\n      vNode: null\n    };\n  }\n  childNodes.some(childNode => {\n    const {\n      finished,\n      vNode\n    } = measureNode(childNode);\n    if (vNode) {\n      ellipsisChildren.push(vNode);\n    }\n    return finished;\n  });\n  return {\n    content: ellipsisChildren,\n    text: ellipsisContainer.innerHTML,\n    ellipsis: true\n  };\n});"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
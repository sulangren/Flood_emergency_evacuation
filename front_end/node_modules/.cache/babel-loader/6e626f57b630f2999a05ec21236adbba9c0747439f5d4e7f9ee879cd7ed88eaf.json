{"ast":null,"code":"// userStore.js\n\n// 导入 Pinia 的 defineStore 用于定义状态管理 store\nimport { defineStore } from \"pinia\";\n// 导入 Vue 的 ref 响应式引用\nimport { ref } from \"vue\";\n// 导入用户相关的 API 函数\nimport { getCurrentUser, userLogin, deleteUser, searchUsers, userRegister } from \"@/api/user\";\n\n// 定义名为 \"auth\" 的 Pinia store\nexport const useAuthStore = defineStore(\"auth\", () => {\n  // 创建一个响应式引用，存储用户信息\n  const user = ref({\n    username: \"未登录\",\n    token: \"\"\n  });\n\n  // 异步函数，用于获取当前登录用户信息\n  async function fetchLoginUser() {\n    try {\n      const token = user.value.token; // 从 Pinia store 获取 Token\n      if (!token) {\n        console.error(\"No token available for fetching user data\");\n        return;\n      }\n      const res = await getCurrentUser();\n      if (res.data.code === 0 && res.data.data) {\n        user.value = {\n          ...res.data.data,\n          token: res.data.token\n        }; // 更新用户信息\n        console.log(res.data.data);\n      } else {\n        // 如果获取用户信息失败，不设置默认用户\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  // 函数，用于设置登录用户信息\n  function setLoginUser(newLoginUser) {\n    user.value = newLoginUser;\n  }\n\n  // 异步函数，用于注册新用户\n  async function register(credentials) {\n    try {\n      const res = await userRegister(credentials);\n      console.log(res);\n      if (res.data.code === 0 && res.data.data) {\n        user.value = {\n          ...res.data.data,\n          token: \"\"\n        };\n        user.value.username = \"\";\n        console.log(res.data);\n        return res.data;\n      } else {\n        throw new Error(res.data.message || \"注册失败\");\n      }\n    } catch (error) {\n      console.error(\"Register failed:\", error);\n      throw error;\n    }\n  }\n\n  // 异步函数，用于用户登录\n  async function login(credentials) {\n    try {\n      const res = await userLogin(credentials);\n      if (res.data.code === 0 && res.data.data) {\n        user.value = {\n          ...res.data.data,\n          token: res.data.token\n        };\n        return res.data;\n      }\n    } catch (error) {\n      console.error(\"Login failed:\", error);\n      throw error;\n    }\n  }\n\n  // 函数，用于用户注销\n  function logout() {\n    // 清除用户状态和 Token\n    user.value = {\n      username: \"未登录\",\n      token: \"\"\n    };\n    // 调用登出 API\n    deleteUser(user.value.token);\n  }\n\n  // 返回 store 中的所有响应式属性和函数\n  return {\n    user,\n    fetchLoginUser,\n    setLoginUser,\n    login,\n    logout,\n    register\n  };\n});","map":{"version":3,"names":["defineStore","ref","getCurrentUser","userLogin","deleteUser","searchUsers","userRegister","useAuthStore","user","username","token","fetchLoginUser","value","console","error","res","data","code","log","setLoginUser","newLoginUser","register","credentials","Error","message","login","logout"],"sources":["E:/code/Django/project/front/front/src/storage/userStorage.js"],"sourcesContent":["// userStore.js\r\n\r\n// 导入 Pinia 的 defineStore 用于定义状态管理 store\r\nimport { defineStore } from \"pinia\";\r\n// 导入 Vue 的 ref 响应式引用\r\nimport { ref } from \"vue\";\r\n// 导入用户相关的 API 函数\r\nimport {\r\n  getCurrentUser,\r\n  userLogin,\r\n  deleteUser,\r\n  searchUsers,\r\n  userRegister,\r\n} from \"@/api/user\";\r\n\r\n// 定义名为 \"auth\" 的 Pinia store\r\nexport const useAuthStore = defineStore(\"auth\", () => {\r\n  // 创建一个响应式引用，存储用户信息\r\n  const user = ref({\r\n    username: \"未登录\",\r\n    token: \"\",\r\n  });\r\n\r\n  // 异步函数，用于获取当前登录用户信息\r\n  async function fetchLoginUser() {\r\n    try {\r\n      const token = user.value.token; // 从 Pinia store 获取 Token\r\n      if (!token) {\r\n        console.error(\"No token available for fetching user data\");\r\n        return;\r\n      }\r\n      const res = await getCurrentUser();\r\n      if (res.data.code === 0 && res.data.data) {\r\n        user.value = { ...res.data.data, token: res.data.token }; // 更新用户信息\r\n        console.log(res.data.data);\r\n      } else {\r\n        // 如果获取用户信息失败，不设置默认用户\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n\r\n  // 函数，用于设置登录用户信息\r\n  function setLoginUser(newLoginUser) {\r\n    user.value = newLoginUser;\r\n  }\r\n\r\n  // 异步函数，用于注册新用户\r\n  async function register(credentials) {\r\n    try {\r\n      const res = await userRegister(credentials);\r\n      console.log(res);\r\n      if (res.data.code === 0 && res.data.data) {\r\n        user.value = { ...res.data.data, token: \"\" };\r\n        user.value.username = \"\";\r\n        console.log(res.data);\r\n        return res.data;\r\n      } else {\r\n        throw new Error(res.data.message || \"注册失败\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Register failed:\", error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // 异步函数，用于用户登录\r\n  async function login(credentials) {\r\n    try {\r\n      const res = await userLogin(credentials);\r\n      if (res.data.code === 0 && res.data.data) {\r\n        user.value = { ...res.data.data, token: res.data.token };\r\n        return res.data;\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Login failed:\", error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // 函数，用于用户注销\r\n  function logout() {\r\n    // 清除用户状态和 Token\r\n    user.value = { username: \"未登录\", token: \"\" };\r\n    // 调用登出 API\r\n    deleteUser(user.value.token);\r\n  }\r\n\r\n  // 返回 store 中的所有响应式属性和函数\r\n  return { user, fetchLoginUser, setLoginUser, login, logout, register };\r\n});\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { reactive } from \"vue\";\nimport { useAuthStore } from \"@/storage/userStorage\";\nimport { useRouter } from \"vue-router\";\nimport { Form, Input, Button, Card, Layout, InputPassword, message } from \"ant-design-vue\";\nexport default {\n  components: {\n    \"a-layout\": Layout,\n    \"a-layout-content\": Layout.Content,\n    \"a-card\": Card,\n    \"a-form-item\": Form.Item,\n    \"a-input\": Input,\n    \"a-input-password\": InputPassword,\n    \"a-button\": Button\n  },\n  setup() {\n    const router = useRouter();\n    const authStore = useAuthStore();\n\n    // 这里直接在 setup 中使用 reactive\n    const registerForm = reactive({\n      username: \"\",\n      password: \"\",\n      confirm: \"\",\n      employeeKey: \"\",\n      phone: \"\"\n    });\n    const rules = {\n      username: [{\n        required: false,\n        message: \"请输入正确的用户名\",\n        trigger: /^\\S{4,10}$/\n      }],\n      password: [{\n        required: false,\n        message: \"请输入正确的密码\",\n        pattern: /^\\S{8,16}$/\n      }],\n      confirm: [{\n        required: false,\n        message: \"请确认密码\",\n        trigger: \"blur\"\n      }, {\n        validator: (_, value) => {\n          if (!value || value === registerForm.password) {\n            return Promise.resolve();\n          }\n          return Promise.reject(new Error(\"两次输入的密码不一致\"));\n        }\n      }],\n      employeeKey: [{\n        required: false\n      }],\n      phone: [{\n        required: false,\n        pattern: /^\\S{11,11}$/,\n        message: \"请输入正确的手机号\"\n      }]\n    };\n    const logins = async () => {\n      console.log(\"staff_username:\", registerForm.username);\n      console.log(\"staff_password:\", registerForm.password);\n      console.log(\"staff_phone:\", registerForm.phone);\n      try {\n        await authStore.register({\n          staff_username: registerForm.username,\n          // 使用后端需要的字段名\n          staff_password: registerForm.password,\n          staff_telephone: registerForm.phone || null // 可选字段\n        });\n        message.success(\"注册成功\");\n        await router.push(\"/\"); // 注册成功后跳转到登录页面\n      } catch (error) {\n        message.error(\"注册失败\");\n      }\n    };\n    return {\n      registerForm,\n      rules,\n      logins\n    };\n  },\n  methods: {\n    // async logins() {\n    //   await this.handleSubmit(this.registerForm);\n    // },\n    // async handleSubmit(values) {\n    //   const router = useRouter();\n    //   const authStore = useAuthStore();\n    //   console.log(\"staff_username:\", values.username);\n    //   console.log(\"staff_password:\", values.password);\n    //   console.log(\"staff_phone:\", values.phone);\n    //   try {\n    //     await authStore.register({\n    //       staff_username: values.username, // 使用后端需要的字段名\n    //       staff_password: values.password,\n    //       staff_telephone: values.phone || null, // 可选字段\n    //     });\n    //     message.success(\"注册成功\");\n    //     console.log(\"one\", router);\n    //     await router.push(\"/\"); // 注册成功后跳转到登录页面\n    //   } catch (error) {\n    //     message.error(\"用户名或手机号重复!\");\n    //   }\n    // },\n    handleCancel() {\n      this.$router.push(\"/\");\n      this.isModalVisible = false; // 关闭模态框\n    }\n  }\n};","map":{"version":3,"names":["reactive","useAuthStore","useRouter","Form","Input","Button","Card","Layout","InputPassword","message","components","Content","Item","setup","router","authStore","registerForm","username","password","confirm","employeeKey","phone","rules","required","trigger","pattern","validator","_","value","Promise","resolve","reject","Error","logins","console","log","register","staff_username","staff_password","staff_telephone","success","push","error","methods","handleCancel","$router","isModalVisible"],"sources":["E:\\code\\Django\\project\\front\\front\\src\\components\\EnrollWindow.vue"],"sourcesContent":["<template>\r\n  <a-layout class=\"layout\">\r\n    <a-layout-content style=\"padding: 24px\">\r\n      <a-card title=\"新用户注册\" :bordered=\"false\">\r\n        <a-form :model=\"registerForm\" :rules=\"rules\" @finish=\"logins\">\r\n          <a-form-item\r\n            name=\"username\"\r\n            label=\"新用户名\"\r\n            :labelCol=\"{ span: 24 }\"\r\n            :wrapperCol=\"{ span: 24 }\"\r\n            hasFeedback\r\n          >\r\n            <a-input v-model:value=\"registerForm.username\" />\r\n          </a-form-item>\r\n          <a-form-item\r\n            name=\"password\"\r\n            label=\"密码\"\r\n            :labelCol=\"{ span: 24 }\"\r\n            :wrapperCol=\"{ span: 24 }\"\r\n            hasFeedback\r\n          >\r\n            <a-input-password v-model:value=\"registerForm.password\" />\r\n          </a-form-item>\r\n          <a-form-item\r\n            name=\"confirm\"\r\n            label=\"确认密码\"\r\n            :labelCol=\"{ span: 24 }\"\r\n            :wrapperCol=\"{ span: 24 }\"\r\n            hasFeedback\r\n          >\r\n            <a-input-password v-model:value=\"registerForm.confirm\" />\r\n          </a-form-item>\r\n          <a-form-item\r\n            name=\"employeeKey\"\r\n            label=\"员工密钥（可选）\"\r\n            :labelCol=\"{ span: 24 }\"\r\n            :wrapperCol=\"{ span: 24 }\"\r\n          >\r\n            <a-input v-model:value=\"registerForm.employeeKey\" />\r\n          </a-form-item>\r\n          <a-form-item\r\n            name=\"phone\"\r\n            label=\"手机号（可选）\"\r\n            :labelCol=\"{ span: 24 }\"\r\n            :wrapperCol=\"{ span: 24 }\"\r\n          >\r\n            <a-input v-model:value=\"registerForm.phone\" />\r\n          </a-form-item>\r\n          <a-form-item :wrapperCol=\"{ span: 24, offset: 0 }\">\r\n            <a-button type=\"primary\" htmlType=\"submit\">提交注册</a-button>\r\n            <a-button style=\"margin-left: 8px\" @click=\"handleCancel\"\r\n              >取消注册</a-button\r\n            >\r\n          </a-form-item>\r\n        </a-form>\r\n      </a-card>\r\n    </a-layout-content>\r\n  </a-layout>\r\n</template>\r\n\r\n<script>\r\nimport { reactive } from \"vue\";\r\nimport { useAuthStore } from \"@/storage/userStorage\";\r\nimport { useRouter } from \"vue-router\";\r\nimport {\r\n  Form,\r\n  Input,\r\n  Button,\r\n  Card,\r\n  Layout,\r\n  InputPassword,\r\n  message,\r\n} from \"ant-design-vue\";\r\n\r\nexport default {\r\n  components: {\r\n    \"a-layout\": Layout,\r\n    \"a-layout-content\": Layout.Content,\r\n    \"a-card\": Card,\r\n    \"a-form-item\": Form.Item,\r\n    \"a-input\": Input,\r\n    \"a-input-password\": InputPassword,\r\n    \"a-button\": Button,\r\n  },\r\n\r\n  setup() {\r\n    const router = useRouter();\r\n    const authStore = useAuthStore();\r\n\r\n    // 这里直接在 setup 中使用 reactive\r\n    const registerForm = reactive({\r\n      username: \"\",\r\n      password: \"\",\r\n      confirm: \"\",\r\n      employeeKey: \"\",\r\n      phone: \"\",\r\n    });\r\n\r\n    const rules = {\r\n      username: [\r\n        {\r\n          required: false,\r\n          message: \"请输入正确的用户名\",\r\n          trigger: /^\\S{4,10}$/,\r\n        },\r\n      ],\r\n      password: [\r\n        {\r\n          required: false,\r\n          message: \"请输入正确的密码\",\r\n          pattern: /^\\S{8,16}$/,\r\n        },\r\n      ],\r\n      confirm: [\r\n        { required: false, message: \"请确认密码\", trigger: \"blur\" },\r\n        {\r\n          validator: (_, value) => {\r\n            if (!value || value === registerForm.password) {\r\n              return Promise.resolve();\r\n            }\r\n            return Promise.reject(new Error(\"两次输入的密码不一致\"));\r\n          },\r\n        },\r\n      ],\r\n      employeeKey: [{ required: false }],\r\n      phone: [\r\n        {\r\n          required: false,\r\n          pattern: /^\\S{11,11}$/,\r\n          message: \"请输入正确的手机号\",\r\n        },\r\n      ],\r\n    };\r\n\r\n    const logins = async () => {\r\n      console.log(\"staff_username:\", registerForm.username);\r\n      console.log(\"staff_password:\", registerForm.password);\r\n      console.log(\"staff_phone:\", registerForm.phone);\r\n      try {\r\n        await authStore.register({\r\n          staff_username: registerForm.username, // 使用后端需要的字段名\r\n          staff_password: registerForm.password,\r\n          staff_telephone: registerForm.phone || null, // 可选字段\r\n        });\r\n        message.success(\"注册成功\");\r\n        await router.push(\"/\"); // 注册成功后跳转到登录页面\r\n      } catch (error) {\r\n        message.error(\"注册失败\");\r\n      }\r\n    };\r\n\r\n    return { registerForm, rules, logins };\r\n  },\r\n\r\n  methods: {\r\n    // async logins() {\r\n    //   await this.handleSubmit(this.registerForm);\r\n    // },\r\n    // async handleSubmit(values) {\r\n    //   const router = useRouter();\r\n    //   const authStore = useAuthStore();\r\n    //   console.log(\"staff_username:\", values.username);\r\n    //   console.log(\"staff_password:\", values.password);\r\n    //   console.log(\"staff_phone:\", values.phone);\r\n    //   try {\r\n    //     await authStore.register({\r\n    //       staff_username: values.username, // 使用后端需要的字段名\r\n    //       staff_password: values.password,\r\n    //       staff_telephone: values.phone || null, // 可选字段\r\n    //     });\r\n    //     message.success(\"注册成功\");\r\n    //     console.log(\"one\", router);\r\n    //     await router.push(\"/\"); // 注册成功后跳转到登录页面\r\n    //   } catch (error) {\r\n    //     message.error(\"用户名或手机号重复!\");\r\n    //   }\r\n    // },\r\n    handleCancel() {\r\n      this.$router.push(\"/\");\r\n      this.isModalVisible = false; // 关闭模态框\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.layout {\r\n  height: 100vh;\r\n}\r\n</style>\r\n"],"mappings":";AA6DA,SAASA,QAAO,QAAS,KAAK;AAC9B,SAASC,YAAW,QAAS,uBAAuB;AACpD,SAASC,SAAQ,QAAS,YAAY;AACtC,SACEC,IAAI,EACJC,KAAK,EACLC,MAAM,EACNC,IAAI,EACJC,MAAM,EACNC,aAAa,EACbC,OAAO,QACF,gBAAgB;AAEvB,eAAe;EACbC,UAAU,EAAE;IACV,UAAU,EAAEH,MAAM;IAClB,kBAAkB,EAAEA,MAAM,CAACI,OAAO;IAClC,QAAQ,EAAEL,IAAI;IACd,aAAa,EAAEH,IAAI,CAACS,IAAI;IACxB,SAAS,EAAER,KAAK;IAChB,kBAAkB,EAAEI,aAAa;IACjC,UAAU,EAAEH;EACd,CAAC;EAEDQ,KAAKA,CAAA,EAAG;IACN,MAAMC,MAAK,GAAIZ,SAAS,CAAC,CAAC;IAC1B,MAAMa,SAAQ,GAAId,YAAY,CAAC,CAAC;;IAEhC;IACA,MAAMe,YAAW,GAAIhB,QAAQ,CAAC;MAC5BiB,QAAQ,EAAE,EAAE;MACZC,QAAQ,EAAE,EAAE;MACZC,OAAO,EAAE,EAAE;MACXC,WAAW,EAAE,EAAE;MACfC,KAAK,EAAE;IACT,CAAC,CAAC;IAEF,MAAMC,KAAI,GAAI;MACZL,QAAQ,EAAE,CACR;QACEM,QAAQ,EAAE,KAAK;QACfd,OAAO,EAAE,WAAW;QACpBe,OAAO,EAAE;MACX,CAAC,CACF;MACDN,QAAQ,EAAE,CACR;QACEK,QAAQ,EAAE,KAAK;QACfd,OAAO,EAAE,UAAU;QACnBgB,OAAO,EAAE;MACX,CAAC,CACF;MACDN,OAAO,EAAE,CACP;QAAEI,QAAQ,EAAE,KAAK;QAAEd,OAAO,EAAE,OAAO;QAAEe,OAAO,EAAE;MAAO,CAAC,EACtD;QACEE,SAAS,EAAEA,CAACC,CAAC,EAAEC,KAAK,KAAK;UACvB,IAAI,CAACA,KAAI,IAAKA,KAAI,KAAMZ,YAAY,CAACE,QAAQ,EAAE;YAC7C,OAAOW,OAAO,CAACC,OAAO,CAAC,CAAC;UAC1B;UACA,OAAOD,OAAO,CAACE,MAAM,CAAC,IAAIC,KAAK,CAAC,YAAY,CAAC,CAAC;QAChD;MACF,CAAC,CACF;MACDZ,WAAW,EAAE,CAAC;QAAEG,QAAQ,EAAE;MAAM,CAAC,CAAC;MAClCF,KAAK,EAAE,CACL;QACEE,QAAQ,EAAE,KAAK;QACfE,OAAO,EAAE,aAAa;QACtBhB,OAAO,EAAE;MACX,CAAC;IAEL,CAAC;IAED,MAAMwB,MAAK,GAAI,MAAAA,CAAA,KAAY;MACzBC,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEnB,YAAY,CAACC,QAAQ,CAAC;MACrDiB,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEnB,YAAY,CAACE,QAAQ,CAAC;MACrDgB,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEnB,YAAY,CAACK,KAAK,CAAC;MAC/C,IAAI;QACF,MAAMN,SAAS,CAACqB,QAAQ,CAAC;UACvBC,cAAc,EAAErB,YAAY,CAACC,QAAQ;UAAE;UACvCqB,cAAc,EAAEtB,YAAY,CAACE,QAAQ;UACrCqB,eAAe,EAAEvB,YAAY,CAACK,KAAI,IAAK,IAAI,CAAE;QAC/C,CAAC,CAAC;QACFZ,OAAO,CAAC+B,OAAO,CAAC,MAAM,CAAC;QACvB,MAAM1B,MAAM,CAAC2B,IAAI,CAAC,GAAG,CAAC,EAAE;MAC1B,EAAE,OAAOC,KAAK,EAAE;QACdjC,OAAO,CAACiC,KAAK,CAAC,MAAM,CAAC;MACvB;IACF,CAAC;IAED,OAAO;MAAE1B,YAAY;MAAEM,KAAK;MAAEW;IAAO,CAAC;EACxC,CAAC;EAEDU,OAAO,EAAE;IACP;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACAC,YAAYA,CAAA,EAAG;MACb,IAAI,CAACC,OAAO,CAACJ,IAAI,CAAC,GAAG,CAAC;MACtB,IAAI,CAACK,cAAa,GAAI,KAAK,EAAE;IAC/B;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
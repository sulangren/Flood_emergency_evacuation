{"ast":null,"code":"import \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.find.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport { ref, onMounted, computed } from \"vue\";\nimport { getRanderingSorted } from \"@/api/rendering\";\nimport { getCenterPointRegister, topPathRegister } from \"@/api/function\";\nimport { Form, Input, Row } from \"ant-design-vue\";\nexport default {\n  name: \"MapWindow\",\n  components: {\n    \"a-form-item\": Form.Item,\n    Form,\n    Input,\n    Row\n  },\n  setup() {\n    const map = ref(null);\n    const polygons = ref([]);\n    const tableData = ref([]); // 表格数据\n    const markers = ref([]);\n    const dispatchCoords = ref([]); // 调度的坐标数据\n\n    // 分页参数\n    const currentPage = ref(1); // 当前页\n    const pageSize = ref(5); // 每页显示的数量\n\n    // 初始化表单对象\n    const form = ref({\n      vehicleCount: \"\" // 表单中的运输车辆容量\n    });\n\n    // 加载并初始化地图\n    const loadAMapApi = () => {\n      const script = document.createElement(\"script\");\n      script.type = \"text/javascript\";\n      script.src = \"https://webapi.amap.com/maps?v=2.0&key=a6042dfaa8137c1bd9f59034cd3021a3\";\n      document.head.appendChild(script);\n      script.onload = () => {\n        initMap();\n      };\n    };\n    const initMap = () => {\n      map.value = new AMap.Map(\"container\", {\n        zoom: 16.3,\n        center: [113.266949, 35.188365]\n      });\n    };\n\n    // 获取并渲染数据\n    onMounted(async () => {\n      try {\n        const response = await getRanderingSorted();\n        if (response.data.code === 0 && Array.isArray(response.data.data)) {\n          const formattedPolygons = response.data.data.map(item => {\n            const coordinates = item.coordinates;\n            const polygon = new AMap.Polygon({\n              path: coordinates,\n              fillColor: \"#ccebc5\",\n              strokeOpacity: 1,\n              fillOpacity: 0.5,\n              strokeColor: \"#2b8cbe\",\n              strokeWeight: 1,\n              strokeStyle: \"dashed\",\n              strokeDasharray: [5, 5]\n            });\n            return polygon;\n          });\n          polygons.value = formattedPolygons;\n\n          // 延迟添加多边形到地图\n          setTimeout(() => {\n            addPolygonsToMap(polygons.value);\n          }, 500);\n        } else {\n          console.error(\"Invalid data format\", response.data);\n        }\n      } catch (error) {\n        console.error(\"Error fetching polygons:\", error);\n      }\n    });\n    const addPolygonsToMap = polygons => {\n      if (Array.isArray(polygons)) {\n        polygons.forEach(polygon => {\n          if (polygon instanceof AMap.Polygon) {\n            map.value.add(polygon);\n          }\n        });\n      }\n    };\n\n    // 获取并渲染调度数据\n    const handleButtonClick = async () => {\n      try {\n        const response = await topPathRegister({\n          capacity: form.value.vehicleCount\n        });\n        if (response.data && Array.isArray(response.data.data)) {\n          const allData = response.data.data;\n\n          // 更新表格数据\n          tableData.value = allData.map(item => ({\n            dispatchId: item.dispatch_count,\n            // 调度 ID\n            startPoint: item.from,\n            // 起始点\n            endPoint: item.to,\n            // 终点\n            scheduleAmount: item.transfer_amount // 调度数量\n          }));\n\n          // 保存调度的起始点和终点坐标\n          dispatchCoords.value = allData.map(item => ({\n            dispatchId: item.dispatch_count,\n            // 行动 ID\n            fromPoint: item.fromPoint,\n            // 起始坐标\n            toPoint: item.toPoint // 终止坐标\n          }));\n        }\n      } catch (error) {\n        console.error(\"Error fetching schedule data:\", error);\n      }\n    };\n\n    // 开始调度功能\n    const startDispatch = dispatchId => {\n      const matchingDispatch = dispatchCoords.value.find(item => item.dispatchId === dispatchId);\n      if (!matchingDispatch) {\n        alert(`未找到匹配的行动 ID: ${dispatchId}`);\n        return;\n      }\n      const {\n        fromPoint,\n        toPoint\n      } = matchingDispatch;\n      if (!fromPoint || !toPoint) {\n        alert(\"起点或终点坐标无效\");\n        return;\n      }\n      const driving = new AMap.Driving({\n        policy: AMap.DrivingPolicy.LEAST_TIME // 最短时间策略\n      });\n      driving.search(fromPoint, toPoint, (status, result) => {\n        if (status === \"complete\" && result.routes && result.routes.length > 0) {\n          const route = result.routes[0];\n          const path = route.steps.map(step => step.path).flat();\n          const polyline = new AMap.Polyline({\n            path,\n            strokeColor: \"#FF0000\",\n            // 红色\n            strokeOpacity: 0.8,\n            strokeWeight: 6\n          });\n          map.value.add(polyline);\n        } else {\n          alert(\"无法查询到导航路线，请稍后重试！\");\n        }\n      });\n    };\n\n    // 分页：计算当前页的数据\n    const currentPageData = computed(() => {\n      const start = (currentPage.value - 1) * pageSize.value;\n      const end = currentPage.value * pageSize.value;\n      return tableData.value.slice(start, end);\n    });\n    const totalPages = computed(() => {\n      return Math.ceil(tableData.value.length / pageSize.value);\n    });\n    const changePage = newPage => {\n      if (newPage >= 1 && newPage <= totalPages.value) {\n        currentPage.value = newPage;\n      }\n    };\n\n    // 加载地图和中心点\n    onMounted(() => {\n      loadAMapApi();\n    });\n    return {\n      map,\n      polygons,\n      tableData,\n      handleButtonClick,\n      startDispatch,\n      form,\n      currentPageData,\n      currentPage,\n      totalPages,\n      changePage\n    };\n  }\n};","map":{"version":3,"names":["ref","onMounted","computed","getRanderingSorted","getCenterPointRegister","topPathRegister","Form","Input","Row","name","components","Item","setup","map","polygons","tableData","markers","dispatchCoords","currentPage","pageSize","form","vehicleCount","loadAMapApi","script","document","createElement","type","src","head","appendChild","onload","initMap","value","AMap","Map","zoom","center","response","data","code","Array","isArray","formattedPolygons","item","coordinates","polygon","Polygon","path","fillColor","strokeOpacity","fillOpacity","strokeColor","strokeWeight","strokeStyle","strokeDasharray","setTimeout","addPolygonsToMap","console","error","forEach","add","handleButtonClick","capacity","allData","dispatchId","dispatch_count","startPoint","from","endPoint","to","scheduleAmount","transfer_amount","fromPoint","toPoint","startDispatch","matchingDispatch","find","alert","driving","Driving","policy","DrivingPolicy","LEAST_TIME","search","status","result","routes","length","route","steps","step","flat","polyline","Polyline","currentPageData","start","end","slice","totalPages","Math","ceil","changePage","newPage"],"sources":["E:\\code\\Django\\project\\front\\front\\src\\components\\LocationWindow.vue"],"sourcesContent":["<template>\r\n  <div class=\"map-container\">\r\n    <!-- 地图容器 -->\r\n    <div id=\"container\" class=\"map\"></div>\r\n\r\n    <!-- 右侧面板容器 -->\r\n    <div class=\"right-sidebar\">\r\n      <Form :model=\"form\" @finish=\"handleButtonClick\">\r\n        <Row :gutter=\"16\">\r\n          <a-form-item label=\"运输车辆容量\" name=\"vehicleCount\" hasFeedback>\r\n            <Input\r\n              v-model:value=\"form.vehicleCount\"\r\n              placeholder=\"输入大于5的整数\"\r\n            />\r\n          </a-form-item>\r\n        </Row>\r\n        <Row>\r\n          <a-form-item>\r\n            <button class=\"action-button\">生成运输方案</button>\r\n          </a-form-item>\r\n        </Row>\r\n      </Form>\r\n\r\n      <!-- 表格展示调度数据 -->\r\n      <table class=\"data-table\">\r\n        <thead>\r\n          <tr>\r\n            <th>调度ID</th>\r\n            <th>起始点</th>\r\n            <th>终点</th>\r\n            <th>调度数量</th>\r\n            <th>开始调度</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <!-- 动态渲染表格数据 -->\r\n          <tr v-for=\"(row, index) in currentPageData\" :key=\"index\">\r\n            <td>{{ row.dispatchId }}</td>\r\n            <td>{{ row.startPoint }}</td>\r\n            <td>{{ row.endPoint }}</td>\r\n            <td>{{ row.scheduleAmount }}</td>\r\n            <td>\r\n              <button\r\n                @click=\"startDispatch(row.dispatchId)\"\r\n                class=\"start-dispatch-button\"\r\n              >\r\n                开始调度\r\n              </button>\r\n            </td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n\r\n      <!-- 分页控件 -->\r\n      <div class=\"pagination\">\r\n        <button\r\n          @click=\"changePage(currentPage - 1)\"\r\n          :disabled=\"currentPage <= 1\"\r\n        >\r\n          上一页\r\n        </button>\r\n        <span>第 {{ currentPage }} 页</span>\r\n        <button\r\n          @click=\"changePage(currentPage + 1)\"\r\n          :disabled=\"currentPage >= totalPages\"\r\n        >\r\n          下一页\r\n        </button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, onMounted, computed } from \"vue\";\r\nimport { getRanderingSorted } from \"@/api/rendering\";\r\nimport { getCenterPointRegister, topPathRegister } from \"@/api/function\";\r\nimport { Form, Input, Row } from \"ant-design-vue\";\r\n\r\nexport default {\r\n  name: \"MapWindow\",\r\n  components: {\r\n    \"a-form-item\": Form.Item,\r\n    Form,\r\n    Input,\r\n    Row,\r\n  },\r\n\r\n  setup() {\r\n    const map = ref(null);\r\n    const polygons = ref([]);\r\n    const tableData = ref([]); // 表格数据\r\n    const markers = ref([]);\r\n    const dispatchCoords = ref([]); // 调度的坐标数据\r\n\r\n    // 分页参数\r\n    const currentPage = ref(1); // 当前页\r\n    const pageSize = ref(5); // 每页显示的数量\r\n\r\n    // 初始化表单对象\r\n    const form = ref({\r\n      vehicleCount: \"\", // 表单中的运输车辆容量\r\n    });\r\n\r\n    // 加载并初始化地图\r\n    const loadAMapApi = () => {\r\n      const script = document.createElement(\"script\");\r\n      script.type = \"text/javascript\";\r\n      script.src =\r\n        \"https://webapi.amap.com/maps?v=2.0&key=a6042dfaa8137c1bd9f59034cd3021a3\";\r\n      document.head.appendChild(script);\r\n\r\n      script.onload = () => {\r\n        initMap();\r\n      };\r\n    };\r\n\r\n    const initMap = () => {\r\n      map.value = new AMap.Map(\"container\", {\r\n        zoom: 16.3,\r\n        center: [113.266949, 35.188365],\r\n      });\r\n    };\r\n\r\n    // 获取并渲染数据\r\n    onMounted(async () => {\r\n      try {\r\n        const response = await getRanderingSorted();\r\n        if (response.data.code === 0 && Array.isArray(response.data.data)) {\r\n          const formattedPolygons = response.data.data.map((item) => {\r\n            const coordinates = item.coordinates;\r\n            const polygon = new AMap.Polygon({\r\n              path: coordinates,\r\n              fillColor: \"#ccebc5\",\r\n              strokeOpacity: 1,\r\n              fillOpacity: 0.5,\r\n              strokeColor: \"#2b8cbe\",\r\n              strokeWeight: 1,\r\n              strokeStyle: \"dashed\",\r\n              strokeDasharray: [5, 5],\r\n            });\r\n            return polygon;\r\n          });\r\n\r\n          polygons.value = formattedPolygons;\r\n\r\n          // 延迟添加多边形到地图\r\n          setTimeout(() => {\r\n            addPolygonsToMap(polygons.value);\r\n          }, 500);\r\n        } else {\r\n          console.error(\"Invalid data format\", response.data);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error fetching polygons:\", error);\r\n      }\r\n    });\r\n\r\n    const addPolygonsToMap = (polygons) => {\r\n      if (Array.isArray(polygons)) {\r\n        polygons.forEach((polygon) => {\r\n          if (polygon instanceof AMap.Polygon) {\r\n            map.value.add(polygon);\r\n          }\r\n        });\r\n      }\r\n    };\r\n\r\n    // 获取并渲染调度数据\r\n    const handleButtonClick = async () => {\r\n      try {\r\n        const response = await topPathRegister({\r\n          capacity: form.value.vehicleCount,\r\n        });\r\n\r\n        if (response.data && Array.isArray(response.data.data)) {\r\n          const allData = response.data.data;\r\n\r\n          // 更新表格数据\r\n          tableData.value = allData.map((item) => ({\r\n            dispatchId: item.dispatch_count, // 调度 ID\r\n            startPoint: item.from, // 起始点\r\n            endPoint: item.to, // 终点\r\n            scheduleAmount: item.transfer_amount, // 调度数量\r\n          }));\r\n\r\n          // 保存调度的起始点和终点坐标\r\n          dispatchCoords.value = allData.map((item) => ({\r\n            dispatchId: item.dispatch_count, // 行动 ID\r\n            fromPoint: item.fromPoint, // 起始坐标\r\n            toPoint: item.toPoint, // 终止坐标\r\n          }));\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error fetching schedule data:\", error);\r\n      }\r\n    };\r\n\r\n    // 开始调度功能\r\n    const startDispatch = (dispatchId) => {\r\n      const matchingDispatch = dispatchCoords.value.find(\r\n        (item) => item.dispatchId === dispatchId\r\n      );\r\n\r\n      if (!matchingDispatch) {\r\n        alert(`未找到匹配的行动 ID: ${dispatchId}`);\r\n        return;\r\n      }\r\n\r\n      const { fromPoint, toPoint } = matchingDispatch;\r\n\r\n      if (!fromPoint || !toPoint) {\r\n        alert(\"起点或终点坐标无效\");\r\n        return;\r\n      }\r\n\r\n      const driving = new AMap.Driving({\r\n        policy: AMap.DrivingPolicy.LEAST_TIME, // 最短时间策略\r\n      });\r\n\r\n      driving.search(fromPoint, toPoint, (status, result) => {\r\n        if (\r\n          status === \"complete\" &&\r\n          result.routes &&\r\n          result.routes.length > 0\r\n        ) {\r\n          const route = result.routes[0];\r\n          const path = route.steps.map((step) => step.path).flat();\r\n\r\n          const polyline = new AMap.Polyline({\r\n            path,\r\n            strokeColor: \"#FF0000\", // 红色\r\n            strokeOpacity: 0.8,\r\n            strokeWeight: 6,\r\n          });\r\n\r\n          map.value.add(polyline);\r\n        } else {\r\n          alert(\"无法查询到导航路线，请稍后重试！\");\r\n        }\r\n      });\r\n    };\r\n\r\n    // 分页：计算当前页的数据\r\n    const currentPageData = computed(() => {\r\n      const start = (currentPage.value - 1) * pageSize.value;\r\n      const end = currentPage.value * pageSize.value;\r\n      return tableData.value.slice(start, end);\r\n    });\r\n\r\n    const totalPages = computed(() => {\r\n      return Math.ceil(tableData.value.length / pageSize.value);\r\n    });\r\n\r\n    const changePage = (newPage) => {\r\n      if (newPage >= 1 && newPage <= totalPages.value) {\r\n        currentPage.value = newPage;\r\n      }\r\n    };\r\n\r\n    // 加载地图和中心点\r\n    onMounted(() => {\r\n      loadAMapApi();\r\n    });\r\n\r\n    return {\r\n      map,\r\n      polygons,\r\n      tableData,\r\n      handleButtonClick,\r\n      startDispatch,\r\n      form,\r\n      currentPageData,\r\n      currentPage,\r\n      totalPages,\r\n      changePage,\r\n    };\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\nhtml,\r\nbody,\r\n#container {\r\n  margin: 0;\r\n  padding: 0;\r\n  height: 100%;\r\n}\r\n\r\n.map-container {\r\n  display: flex;\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n\r\n.map {\r\n  flex-grow: 1;\r\n  height: 100%;\r\n}\r\n\r\n.right-sidebar {\r\n  width: 450px;\r\n  background-color: #fff;\r\n  padding: 20px;\r\n  border-radius: 10px;\r\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);\r\n  overflow-y: auto;\r\n}\r\n\r\n.action-button {\r\n  width: 100%;\r\n  padding: 10px;\r\n  background-color: #4caf50;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 5px;\r\n  font-size: 16px;\r\n  cursor: pointer;\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.action-button:hover {\r\n  background-color: #45a049;\r\n}\r\n\r\n.data-table {\r\n  width: 100%;\r\n  border-collapse: collapse;\r\n}\r\n\r\n.data-table th,\r\n.data-table td {\r\n  border: 1px solid #ddd;\r\n  padding: 8px;\r\n  text-align: left;\r\n}\r\n\r\n.data-table th {\r\n  background-color: #f2f2f2;\r\n}\r\n\r\n.start-dispatch-button {\r\n  padding: 5px 10px;\r\n  background-color: #008cba;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n}\r\n\r\n.start-dispatch-button:hover {\r\n  background-color: #007b9f;\r\n}\r\n\r\n/* 分页器样式 */\r\n.pagination {\r\n  display: flex;\r\n  justify-content: center;\r\n  margin-top: 10px;\r\n}\r\n\r\n.pagination button {\r\n  padding: 5px 10px;\r\n  margin: 0 10px;\r\n  background-color: #007b9f;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n}\r\n\r\n.pagination button[disabled] {\r\n  background-color: #d3d3d3;\r\n  cursor: not-allowed;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
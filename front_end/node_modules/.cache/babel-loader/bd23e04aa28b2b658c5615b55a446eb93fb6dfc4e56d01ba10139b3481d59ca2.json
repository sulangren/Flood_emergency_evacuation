{"ast":null,"code":"import { createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  id: \"container\",\n  style: {\n    \"width\": \"100%\",\n    \"height\": \"100%\"\n  }\n};\nconst _hoisted_2 = {\n  class: \"button-container\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_Button = _resolveComponent(\"Button\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_createVNode(_component_Button, {\n    type: \"primary\"\n  }, {\n    default: _withCtx(() => _cache[0] || (_cache[0] = [_createTextVNode(\" New Account \")])),\n    _: 1 /* STABLE */\n  })])]);\n}","map":{"version":3,"names":["id","style","class","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_createVNode","_component_Button","type","default","_withCtx","_cache","_createTextVNode","_"],"sources":["E:\\code\\Django\\project\\front\\front\\src\\components\\LocationWindow.vue"],"sourcesContent":["<template>\r\n  <div id=\"container\" style=\"width: 100%; height: 100%\">\r\n    <div class=\"button-container\">\r\n      <Button type=\"primary\"> New Account </Button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, onMounted } from \"vue\";\r\nimport { getRanderingSorted } from \"@/api/rendering\";\r\n\r\nexport default {\r\n  name: \"MapWindow\",\r\n  setup() {\r\n    const map = ref(null);\r\n    const polygons = ref([]);\r\n\r\n    // 加载并初始化地图\r\n    const loadAMapApi = () => {\r\n      const script = document.createElement(\"script\");\r\n      script.type = \"text/javascript\";\r\n      script.src =\r\n        \"https://webapi.amap.com/maps?v=2.0&key=a6042dfaa8137c1bd9f59034cd3021a3\";\r\n      document.head.appendChild(script);\r\n\r\n      script.onload = () => {\r\n        initMap();\r\n      };\r\n    };\r\n\r\n    const initMap = () => {\r\n      const layer = new AMap.createDefaultLayer({\r\n        zooms: [3, 20],\r\n        visible: true,\r\n        opacity: 1,\r\n        zIndex: 0,\r\n      });\r\n\r\n      map.value = new AMap.Map(\"container\", {\r\n        viewMode: \"2D\",\r\n        zoom: 16.3,\r\n        center: [113.266949, 35.188365],\r\n        layer: [layer],\r\n      });\r\n    };\r\n\r\n    // 获取并渲染数据\r\n    onMounted(async () => {\r\n      try {\r\n        const response = await getRanderingSorted();\r\n        console.log(\"Response:\", response.data);\r\n\r\n        if (response.data.code === 0 && Array.isArray(response.data.data)) {\r\n          const formattedPolygons = response.data.data.map((item) => {\r\n            const coordinates = item.coordinates;\r\n            console.log(coordinates);\r\n            // 创建 AMap.Polygon 实例时，确保它没有被响应式包裹\r\n            const polygon = new AMap.Polygon({\r\n              path: coordinates,\r\n              fillColor: \"#ccebc5\",\r\n              strokeOpacity: 1,\r\n              fillOpacity: 0.5,\r\n              strokeColor: \"#2b8cbe\",\r\n              strokeWeight: 1,\r\n              strokeStyle: \"dashed\",\r\n              strokeDasharray: [5, 5],\r\n            });\r\n\r\n            return polygon;\r\n          });\r\n\r\n          polygons.value = formattedPolygons; // 更新 polygons\r\n\r\n          // 延迟添加多边形到地图\r\n          setTimeout(() => {\r\n            addPolygonsToMap(polygons.value);\r\n          }, 500);\r\n        } else {\r\n          console.error(\"Invalid data format\", response.data);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error fetching polygons:\", error);\r\n      }\r\n    });\r\n\r\n    // 将多边形添加到地图\r\n    const addPolygonsToMap = (polygons) => {\r\n      if (Array.isArray(polygons)) {\r\n        polygons.forEach((polygon) => {\r\n          // 确保每个 polygon 是 AMap.Polygon 实例\r\n          if (polygon instanceof AMap.Polygon) {\r\n            map.value.add(polygon); // 添加有效的 AMap.Polygon 实例到地图\r\n          } else {\r\n            console.error(\"Invalid polygon item\", polygon);\r\n          }\r\n        });\r\n      } else {\r\n        console.error(\"Polygons is not an array:\", polygons);\r\n      }\r\n    };\r\n\r\n    // 加载并初始化地图 API\r\n    onMounted(() => {\r\n      loadAMapApi();\r\n    });\r\n\r\n    return {\r\n      map,\r\n      polygons,\r\n    };\r\n  },\r\n};\r\n</script>\r\n\r\n<style>\r\nhtml,\r\nbody,\r\n#container {\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n\r\n.amap-logo {\r\n  display: none !important;\r\n}\r\n\r\n.amap-copyright {\r\n  opacity: 0 !important;\r\n}\r\n\r\n/* 按钮容器的样式 */\r\n.button-container {\r\n  position: absolute;\r\n  top: 20px; /* 按钮距离顶部 20px */\r\n  right: 20px; /* 按钮距离右边 20px */\r\n  z-index: 9999; /* 确保按钮位于地图的顶部 */\r\n}\r\n</style>\r\n"],"mappings":";;EACOA,EAAE,EAAC,WAAW;EAACC,KAAiC,EAAjC;IAAA;IAAA;EAAA;;;EACbC,KAAK,EAAC;AAAkB;;;uBAD/BC,mBAAA,CAIM,OAJNC,UAIM,GAHJC,mBAAA,CAEM,OAFNC,UAEM,GADJC,YAAA,CAA6CC,iBAAA;IAArCC,IAAI,EAAC;EAAS;IAH5BC,OAAA,EAAAC,QAAA,CAG6B,MAAaC,MAAA,QAAAA,MAAA,OAH1CC,gBAAA,CAG6B,eAAa,E;IAH1CC,CAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
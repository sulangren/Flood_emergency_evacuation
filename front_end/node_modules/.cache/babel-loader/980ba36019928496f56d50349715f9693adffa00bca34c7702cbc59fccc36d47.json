{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString } from \"vue\";\nconst _hoisted_1 = {\n  class: \"map-container\"\n};\nconst _hoisted_2 = {\n  class: \"right-sidebar\"\n};\nconst _hoisted_3 = {\n  class: \"data-table\"\n};\nconst _hoisted_4 = [\"onClick\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_Input = _resolveComponent(\"Input\");\n  const _component_a_form_item = _resolveComponent(\"a-form-item\");\n  const _component_Row = _resolveComponent(\"Row\");\n  const _component_Form = _resolveComponent(\"Form\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\" 地图容器 \"), _cache[3] || (_cache[3] = _createElementVNode(\"div\", {\n    id: \"container\",\n    class: \"map\"\n  }, null, -1 /* HOISTED */)), _createCommentVNode(\" 右侧面板容器 \"), _createElementVNode(\"div\", _hoisted_2, [_createCommentVNode(\" 表单输入框，用户填写运输车辆容量 \"), _createVNode(_component_Form, {\n    model: $setup.form,\n    onFinish: $setup.handleButtonClick\n  }, {\n    default: _withCtx(() => [_createVNode(_component_Row, {\n      gutter: 16\n    }, {\n      default: _withCtx(() => [_createVNode(_component_a_form_item, {\n        label: \"运输车辆容量\",\n        name: \"vehicleCount\",\n        hasFeedback: \"\"\n      }, {\n        default: _withCtx(() => [_createVNode(_component_Input, {\n          value: $setup.form.vehicleCount,\n          \"onUpdate:value\": _cache[0] || (_cache[0] = $event => $setup.form.vehicleCount = $event),\n          placeholder: \"请输入运输车辆容量\"\n        }, null, 8 /* PROPS */, [\"value\"])]),\n        _: 1 /* STABLE */\n      })]),\n      _: 1 /* STABLE */\n    }), _createVNode(_component_Row, null, {\n      default: _withCtx(() => [_createVNode(_component_a_form_item, null, {\n        default: _withCtx(() => _cache[1] || (_cache[1] = [_createElementVNode(\"button\", {\n          class: \"action-button\"\n        }, \"生成调度数据\", -1 /* HOISTED */)])),\n        _: 1 /* STABLE */\n      })]),\n      _: 1 /* STABLE */\n    })]),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"model\", \"onFinish\"]), _createCommentVNode(\" 表格展示调度数据 \"), _createElementVNode(\"table\", _hoisted_3, [_cache[2] || (_cache[2] = _createElementVNode(\"thead\", null, [_createElementVNode(\"tr\", null, [_createElementVNode(\"th\", null, \"调度ID\"), _createElementVNode(\"th\", null, \"起始点\"), _createElementVNode(\"th\", null, \"终点\"), _createElementVNode(\"th\", null, \"调度数量\"), _createElementVNode(\"th\", null, \"开始调度\")])], -1 /* HOISTED */)), _createElementVNode(\"tbody\", null, [_createCommentVNode(\" 动态渲染表格数据 \"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.tableData, (row, index) => {\n    return _openBlock(), _createElementBlock(\"tr\", {\n      key: index\n    }, [_createElementVNode(\"td\", null, _toDisplayString(row.dispatchId), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(row.startPoint), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(row.endPoint), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(row.scheduleAmount), 1 /* TEXT */), _createElementVNode(\"td\", null, [_createElementVNode(\"button\", {\n      onClick: $event => $setup.startDispatch(row.dispatchId),\n      class: \"start-dispatch-button\"\n    }, \" 开始调度 \", 8 /* PROPS */, _hoisted_4)])]);\n  }), 128 /* KEYED_FRAGMENT */))])])])]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_createCommentVNode","_createElementVNode","id","_hoisted_2","_createVNode","_component_Form","model","$setup","form","onFinish","handleButtonClick","default","_withCtx","_component_Row","gutter","_component_a_form_item","label","name","hasFeedback","_component_Input","value","vehicleCount","_cache","$event","placeholder","_","_hoisted_3","_Fragment","_renderList","tableData","row","index","key","_toDisplayString","dispatchId","startPoint","endPoint","scheduleAmount","onClick","startDispatch","_hoisted_4"],"sources":["E:\\code\\Django\\project\\front\\front\\src\\components\\LocationWindow.vue"],"sourcesContent":["<template>\r\n  <div class=\"map-container\">\r\n    <!-- 地图容器 -->\r\n    <div id=\"container\" class=\"map\"></div>\r\n\r\n    <!-- 右侧面板容器 -->\r\n    <div class=\"right-sidebar\">\r\n      <!-- 表单输入框，用户填写运输车辆容量 -->\r\n      <Form :model=\"form\" @finish=\"handleButtonClick\">\r\n        <Row :gutter=\"16\">\r\n          <a-form-item label=\"运输车辆容量\" name=\"vehicleCount\" hasFeedback>\r\n            <Input\r\n              v-model:value=\"form.vehicleCount\"\r\n              placeholder=\"请输入运输车辆容量\"\r\n            />\r\n          </a-form-item>\r\n        </Row>\r\n        <Row>\r\n          <a-form-item>\r\n            <button class=\"action-button\">生成调度数据</button>\r\n          </a-form-item>\r\n        </Row>\r\n      </Form>\r\n\r\n      <!-- 表格展示调度数据 -->\r\n      <table class=\"data-table\">\r\n        <thead>\r\n          <tr>\r\n            <th>调度ID</th>\r\n            <th>起始点</th>\r\n            <th>终点</th>\r\n            <th>调度数量</th>\r\n            <th>开始调度</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <!-- 动态渲染表格数据 -->\r\n          <tr v-for=\"(row, index) in tableData\" :key=\"index\">\r\n            <td>{{ row.dispatchId }}</td>\r\n            <td>{{ row.startPoint }}</td>\r\n            <td>{{ row.endPoint }}</td>\r\n            <td>{{ row.scheduleAmount }}</td>\r\n            <td>\r\n              <button\r\n                @click=\"startDispatch(row.dispatchId)\"\r\n                class=\"start-dispatch-button\"\r\n              >\r\n                开始调度\r\n              </button>\r\n            </td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, onMounted } from \"vue\";\r\nimport { getRanderingSorted } from \"@/api/rendering\"; // 获取多边形渲染数据\r\nimport { topPathRegister } from \"@/api/function\"; // 获取调度数据\r\nimport { Form, Input, Row } from \"ant-design-vue\";\r\n\r\nexport default {\r\n  name: \"MapWindow\",\r\n  components: {\r\n    \"a-form-item\": Form.Item,\r\n    Form,\r\n    Input,\r\n    Row,\r\n  },\r\n\r\n  setup() {\r\n    const map = ref(null); // 地图实例\r\n    const tableData = ref([]); // 存储表格数据\r\n    const form = ref({\r\n      vehicleCount: \"\", // 表单中的运输车辆容量\r\n    });\r\n\r\n    // 请求并更新表格数据\r\n    const handleButtonClick = async () => {\r\n      try {\r\n        // 发送请求获取调度数据\r\n        const response = await topPathRegister({\r\n          capacity: form.value.vehicleCount, // 从表单获取车辆容量\r\n        });\r\n        console.log(response);\r\n\r\n        if (response.data.code === 0 && Array.isArray(response.data.data)) {\r\n          // 更新表格数据\r\n          tableData.value = response.data.data.map((item) => ({\r\n            dispatchId: item.dispatchId, // 调度ID\r\n            startPoint: item.startPoint, // 起始点\r\n            endPoint: item.endPoint, // 终点\r\n            scheduleAmount: item.scheduleAmount, // 调度数量\r\n          }));\r\n        } else {\r\n          console.error(\"Invalid data format\", response.data);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error fetching schedule data:\", error);\r\n      }\r\n    };\r\n\r\n    // 加载并初始化地图\r\n    const loadAMapApi = () => {\r\n      const script = document.createElement(\"script\");\r\n      script.type = \"text/javascript\";\r\n      script.src =\r\n        \"https://webapi.amap.com/maps?v=2.0&key=a6042dfaa8137c1bd9f59034cd3021a3\"; // 请替换为有效的高德地图API Key\r\n      document.head.appendChild(script);\r\n\r\n      script.onload = () => {\r\n        initMap();\r\n      };\r\n    };\r\n\r\n    // 初始化地图\r\n    const initMap = () => {\r\n      const layer = new AMap.createDefaultLayer({\r\n        zooms: [3, 20],\r\n        visible: true,\r\n        opacity: 1,\r\n        zIndex: 0,\r\n      });\r\n\r\n      map.value = new AMap.Map(\"container\", {\r\n        viewMode: \"2D\",\r\n        zoom: 16.3,\r\n        center: [113.266949, 35.188365], // 设置地图中心点坐标\r\n        layer: [layer],\r\n      });\r\n    };\r\n\r\n    // 加载并初始化地图 API\r\n    onMounted(() => {\r\n      loadAMapApi(); // 加载地图 API\r\n    });\r\n\r\n    // 开始调度\r\n    const startDispatch = async (dispatchId) => {\r\n      try {\r\n        // 发送请求发起调度\r\n        const response = await fetch(`/api/start-dispatch/${dispatchId}`, {\r\n          method: \"POST\",\r\n        });\r\n        const data = await response.json();\r\n        if (data.success) {\r\n          alert(`调度 ${dispatchId} 已成功启动！`);\r\n        } else {\r\n          alert(`调度 ${dispatchId} 启动失败，请重试！`);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"调度启动失败\", error);\r\n      }\r\n    };\r\n\r\n    return {\r\n      map,\r\n      tableData,\r\n      handleButtonClick,\r\n      startDispatch,\r\n      form,\r\n    };\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\nhtml,\r\nbody,\r\n#container {\r\n  margin: 0;\r\n  padding: 0;\r\n  height: 100%;\r\n}\r\n\r\n.map-container {\r\n  display: flex;\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n\r\n.map {\r\n  flex-grow: 1;\r\n  height: 100%;\r\n}\r\n\r\n.right-sidebar {\r\n  width: 450px; /* 固定宽度的右侧面板 */\r\n  background-color: #fff;\r\n  padding: 20px;\r\n  border-radius: 10px;\r\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);\r\n  overflow-y: auto;\r\n}\r\n\r\n.action-button {\r\n  width: 100%;\r\n  padding: 10px;\r\n  background-color: #4caf50;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 5px;\r\n  font-size: 16px;\r\n  cursor: pointer;\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.action-button:hover {\r\n  background-color: #45a049;\r\n}\r\n\r\n.data-table {\r\n  width: 100%;\r\n  border-collapse: collapse;\r\n}\r\n\r\n.data-table th,\r\n.data-table td {\r\n  border: 1px solid #ddd;\r\n  padding: 8px;\r\n  text-align: left;\r\n}\r\n\r\n.data-table th {\r\n  background-color: #f2f2f2;\r\n}\r\n\r\n.start-dispatch-button {\r\n  padding: 5px 10px;\r\n  background-color: #008cba;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n}\r\n\r\n.start-dispatch-button:hover {\r\n  background-color: #007b9f;\r\n}\r\n</style>\r\n"],"mappings":";;EACOA,KAAK,EAAC;AAAe;;EAKnBA,KAAK,EAAC;AAAe;;EAmBjBA,KAAK,EAAC;AAAY;mBAzB/B;;;;;;uBACEC,mBAAA,CAqDM,OArDNC,UAqDM,GApDJC,mBAAA,UAAa,E,0BACbC,mBAAA,CAAsC;IAAjCC,EAAE,EAAC,WAAW;IAACL,KAAK,EAAC;+BAE1BG,mBAAA,YAAe,EACfC,mBAAA,CA+CM,OA/CNE,UA+CM,GA9CJH,mBAAA,sBAAyB,EACzBI,YAAA,CAcOC,eAAA;IAdAC,KAAK,EAAEC,MAAA,CAAAC,IAAI;IAAGC,QAAM,EAAEF,MAAA,CAAAG;;IARnCC,OAAA,EAAAC,QAAA,CASQ,MAOM,CAPNR,YAAA,CAOMS,cAAA;MAPAC,MAAM,EAAE;IAAE;MATxBH,OAAA,EAAAC,QAAA,CAUU,MAKc,CALdR,YAAA,CAKcW,sBAAA;QALDC,KAAK,EAAC,QAAQ;QAACC,IAAI,EAAC,cAAc;QAACC,WAAW,EAAX;;QAV1DP,OAAA,EAAAC,QAAA,CAWY,MAGE,CAHFR,YAAA,CAGEe,gBAAA;UAFQC,KAAK,EAAEb,MAAA,CAAAC,IAAI,CAACa,YAAY;UAZ9C,kBAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAY6BhB,MAAA,CAAAC,IAAI,CAACa,YAAY,GAAAE,MAAA;UAChCC,WAAW,EAAC;;QAb1BC,CAAA;;MAAAA,CAAA;QAiBQrB,YAAA,CAIMS,cAAA;MArBdF,OAAA,EAAAC,QAAA,CAkBU,MAEc,CAFdR,YAAA,CAEcW,sBAAA;QApBxBJ,OAAA,EAAAC,QAAA,CAmBY,MAA6CU,MAAA,QAAAA,MAAA,OAA7CrB,mBAAA,CAA6C;UAArCJ,KAAK,EAAC;QAAe,GAAC,QAAM,oB;QAnBhD4B,CAAA;;MAAAA,CAAA;;IAAAA,CAAA;4CAwBMzB,mBAAA,cAAiB,EACjBC,mBAAA,CA2BQ,SA3BRyB,UA2BQ,G,0BA1BNzB,mBAAA,CAQQ,gBAPNA,mBAAA,CAMK,aALHA,mBAAA,CAAa,YAAT,MAAI,GACRA,mBAAA,CAAY,YAAR,KAAG,GACPA,mBAAA,CAAW,YAAP,IAAE,GACNA,mBAAA,CAAa,YAAT,MAAI,GACRA,mBAAA,CAAa,YAAT,MAAI,E,wBAGZA,mBAAA,CAgBQ,gBAfND,mBAAA,cAAiB,G,kBACjBF,mBAAA,CAaK6B,SAAA,QAlDfC,WAAA,CAqCqCrB,MAAA,CAAAsB,SAAS,EArC9C,CAqCsBC,GAAG,EAAEC,KAAK;yBAAtBjC,mBAAA,CAaK;MAbkCkC,GAAG,EAAED;IAAK,IAC/C9B,mBAAA,CAA6B,YAAAgC,gBAAA,CAAtBH,GAAG,CAACI,UAAU,kBACrBjC,mBAAA,CAA6B,YAAAgC,gBAAA,CAAtBH,GAAG,CAACK,UAAU,kBACrBlC,mBAAA,CAA2B,YAAAgC,gBAAA,CAApBH,GAAG,CAACM,QAAQ,kBACnBnC,mBAAA,CAAiC,YAAAgC,gBAAA,CAA1BH,GAAG,CAACO,cAAc,kBACzBpC,mBAAA,CAOK,aANHA,mBAAA,CAKS;MAJNqC,OAAK,EAAAf,MAAA,IAAEhB,MAAA,CAAAgC,aAAa,CAACT,GAAG,CAACI,UAAU;MACpCrC,KAAK,EAAC;OACP,QAED,iBAhDd2C,UAAA,E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}